diff --git a/benchmarks/tst_messageserver/tst_messageserver.pro b/benchmarks/tst_messageserver/tst_messageserver.pro
index db23ea9..febeff0 100644
--- a/benchmarks/tst_messageserver/tst_messageserver.pro
+++ b/benchmarks/tst_messageserver/tst_messageserver.pro
@@ -21,11 +21,13 @@ MESSAGE_SERVER=$$BASE/src/tools/messageserver
 INCLUDEPATH += . 3rdparty $$BASE/src/libraries/qtopiamail \
                  $$BASE/src/libraries/qtopiamail/support \
                  $$BASE/src/libraries/messageserver \
+                 $$BASE/src/libraries/sparql \
                  $$IMAP_PLUGIN \
                  $$MESSAGE_SERVER 
 
 LIBS += -L$$BASE/src/libraries/messageserver -lmessageserver \
-        -L$$BASE/src/libraries/qtopiamail -lqtopiamail
+        -L$$BASE/src/libraries/qtopiamail -lqtopiamail \
+        -L$$BASE/src/libraries/sparql -lsparql
 
 QMAKE_LFLAGS += -Wl,-rpath,$$BASE/src/libraries/qtopiamail \
     -Wl,-rpath,$$BASE/src/libraries/messageserver
@@ -37,7 +39,8 @@ HEADERS += benchmarkcontext.h \
            $$MESSAGE_SERVER/mailmessageclient.h \
            $$MESSAGE_SERVER/messageserver.h \
            $$MESSAGE_SERVER/servicehandler.h \
-           $$MESSAGE_SERVER/newcountnotifier.h
+           $$MESSAGE_SERVER/newcountnotifier.h \
+           $$MESSAGE_SERVER/sparqlindexer.h
 
 SOURCES += benchmarkcontext.cpp \
            qscopedconnection.cpp \
@@ -48,7 +51,8 @@ SOURCES += benchmarkcontext.cpp \
            $$MESSAGE_SERVER/messageserver.cpp \
            $$MESSAGE_SERVER/prepareaccounts.cpp \
            $$MESSAGE_SERVER/servicehandler.cpp \
-           $$MESSAGE_SERVER/newcountnotifier.cpp
+           $$MESSAGE_SERVER/newcountnotifier.cpp \
+           $$MESSAGE_SERVER/sparqlindexer.cpp
 
 !symbian:!win32 {
 	HEADERS += testmalloc.h 3rdparty/cycle_p.h
diff --git a/qmf.pro b/qmf.pro
index d88fb14..bcec51a 100644
--- a/qmf.pro
+++ b/qmf.pro
@@ -1,26 +1,26 @@
-TEMPLATE = subdirs
-SUBDIRS = src/libraries/qtopiamail \
-          src/libraries/messageserver \
-          src/libraries/qmfutil \
-          src/plugins/messageservices/imap \
-          src/plugins/messageservices/pop \
-          src/plugins/messageservices/smtp \
-          src/plugins/messageservices/qtopiamailfile \
-          src/plugins/contentmanagers/qtopiamailfile \
-          src/plugins/viewers/generic \
-          src/plugins/composers/email \
-          src/tools/messageserver \
-          examples/applications/qtmail \
-          examples/settings/messagingaccounts \
-          tests \
-          benchmarks \
-
-CONFIG += ordered
-
-# Custom target 'doc' to generate documentation
-dox.target = doc
-dox.commands = THISYEAR=2009 qdoc3 $$_PRO_FILE_PWD_/doc/src/qmf.qdocconf
-dox.depends =
-
-QMAKE_EXTRA_TARGETS += dox
-
+TEMPLATE = subdirs
+SUBDIRS = src/libraries/qtopiamail \
+          src/libraries/messageserver \
+          src/libraries/qmfutil \
+          src/libraries/sparql \
+          src/plugins/messageservices/imap \
+          src/plugins/messageservices/pop \
+          src/plugins/messageservices/smtp \
+          src/plugins/messageservices/qtopiamailfile \
+          src/plugins/contentmanagers/qtopiamailfile \
+          src/plugins/viewers/generic \
+          src/plugins/composers/email \
+          src/tools/messageserver \
+          examples/applications/qtmail \
+          examples/settings/messagingaccounts \
+          tests \
+          benchmarks \
+
+CONFIG += ordered
+
+# Custom target 'doc' to generate documentation
+dox.target = doc
+dox.commands = THISYEAR=2009 qdoc3 $$_PRO_FILE_PWD_/doc/src/qmf.qdocconf
+dox.depends =
+
+QMAKE_EXTRA_TARGETS += dox
diff --git a/src/libraries/messageserver/include/QMailAuthenticator b/src/libraries/messageserver/include/QMailAuthenticator
new file mode 100644
index 0000000..a1c5ba5
--- /dev/null
+++ b/src/libraries/messageserver/include/QMailAuthenticator
@@ -0,0 +1 @@
+#include "qmailauthenticator.h"
diff --git a/src/libraries/messageserver/include/QMailMessageClassifier b/src/libraries/messageserver/include/QMailMessageClassifier
new file mode 100644
index 0000000..285ed1a
--- /dev/null
+++ b/src/libraries/messageserver/include/QMailMessageClassifier
@@ -0,0 +1 @@
+#include "qmailmessageclassifier.h"
diff --git a/src/libraries/messageserver/include/QMailMessageService b/src/libraries/messageserver/include/QMailMessageService
new file mode 100644
index 0000000..8df572e
--- /dev/null
+++ b/src/libraries/messageserver/include/QMailMessageService
@@ -0,0 +1 @@
+#include "qmailmessageservice.h"
diff --git a/src/libraries/messageserver/include/QMailMessageServiceConfigurator b/src/libraries/messageserver/include/QMailMessageServiceConfigurator
new file mode 100644
index 0000000..8df572e
--- /dev/null
+++ b/src/libraries/messageserver/include/QMailMessageServiceConfigurator
@@ -0,0 +1 @@
+#include "qmailmessageservice.h"
diff --git a/src/libraries/messageserver/include/QMailMessageServiceEditor b/src/libraries/messageserver/include/QMailMessageServiceEditor
new file mode 100644
index 0000000..8df572e
--- /dev/null
+++ b/src/libraries/messageserver/include/QMailMessageServiceEditor
@@ -0,0 +1 @@
+#include "qmailmessageservice.h"
diff --git a/src/libraries/messageserver/include/QMailMessageServiceFactory b/src/libraries/messageserver/include/QMailMessageServiceFactory
new file mode 100644
index 0000000..8df572e
--- /dev/null
+++ b/src/libraries/messageserver/include/QMailMessageServiceFactory
@@ -0,0 +1 @@
+#include "qmailmessageservice.h"
diff --git a/src/libraries/messageserver/include/QMailMessageServicePlugin b/src/libraries/messageserver/include/QMailMessageServicePlugin
new file mode 100644
index 0000000..8df572e
--- /dev/null
+++ b/src/libraries/messageserver/include/QMailMessageServicePlugin
@@ -0,0 +1 @@
+#include "qmailmessageservice.h"
diff --git a/src/libraries/messageserver/include/QMailMessageSink b/src/libraries/messageserver/include/QMailMessageSink
new file mode 100644
index 0000000..8df572e
--- /dev/null
+++ b/src/libraries/messageserver/include/QMailMessageSink
@@ -0,0 +1 @@
+#include "qmailmessageservice.h"
diff --git a/src/libraries/messageserver/include/QMailMessageSource b/src/libraries/messageserver/include/QMailMessageSource
new file mode 100644
index 0000000..8df572e
--- /dev/null
+++ b/src/libraries/messageserver/include/QMailMessageSource
@@ -0,0 +1 @@
+#include "qmailmessageservice.h"
diff --git a/src/libraries/messageserver/include/QMailServiceConfiguration b/src/libraries/messageserver/include/QMailServiceConfiguration
new file mode 100644
index 0000000..c6f8a6c
--- /dev/null
+++ b/src/libraries/messageserver/include/QMailServiceConfiguration
@@ -0,0 +1 @@
+#include "qmailserviceconfiguration.h"
diff --git a/src/libraries/messageserver/include/QMailTransport b/src/libraries/messageserver/include/QMailTransport
new file mode 100644
index 0000000..1b390c9
--- /dev/null
+++ b/src/libraries/messageserver/include/QMailTransport
@@ -0,0 +1 @@
+#include "qmailtransport.h"
diff --git a/src/libraries/messageserver/messageserver.pro b/src/libraries/messageserver/messageserver.pro
index c04c36d..71c1bc2 100644
--- a/src/libraries/messageserver/messageserver.pro
+++ b/src/libraries/messageserver/messageserver.pro
@@ -17,6 +17,9 @@ DEFINES += MESSAGESERVER_INTERNAL
 
 DEPENDPATH += .
 
+CONFIG += warn_on create_pc create_prl
+
+
 INCLUDEPATH += . ../qtopiamail ../qtopiamail/support
 
 LIBS += -L../qtopiamail -lqtopiamail
@@ -35,5 +38,14 @@ SOURCES += qmailauthenticator.cpp \
            qmailstoreaccountfilter.cpp \
            qmailtransport.cpp
 
-include(../../common.pri)
+# Install headers
+headers.files = $$HEADERS include/*
+headers.path  = $$QMF_INSTALL_ROOT/include/qmf
+
+INSTALLS += headers 
+
+# Install pkgconfig file
+QMAKE_PKGCONFIG_LIBDIR  = $$target.path
+QMAKE_PKGCONFIG_INCDIR  = $$headers.path
+QMAKE_PKGCONFIG_DESTDIR = pkgconfig
 
diff --git a/src/libraries/qmfutil/include/QMailComposerFactory b/src/libraries/qmfutil/include/QMailComposerFactory
new file mode 100644
index 0000000..23b68f1
--- /dev/null
+++ b/src/libraries/qmfutil/include/QMailComposerFactory
@@ -0,0 +1 @@
+#include "qmailcomposer.h"
\ No newline at end of file
diff --git a/src/libraries/qmfutil/include/QMailComposerInterface b/src/libraries/qmfutil/include/QMailComposerInterface
new file mode 100644
index 0000000..23b68f1
--- /dev/null
+++ b/src/libraries/qmfutil/include/QMailComposerInterface
@@ -0,0 +1 @@
+#include "qmailcomposer.h"
\ No newline at end of file
diff --git a/src/libraries/qmfutil/include/QMailMessageDelegate b/src/libraries/qmfutil/include/QMailMessageDelegate
new file mode 100644
index 0000000..6d19eb2
--- /dev/null
+++ b/src/libraries/qmfutil/include/QMailMessageDelegate
@@ -0,0 +1 @@
+#include "qmailmessagedelegate.h"
\ No newline at end of file
diff --git a/src/libraries/qmfutil/include/QMailViewerFactory b/src/libraries/qmfutil/include/QMailViewerFactory
new file mode 100644
index 0000000..81a8bde
--- /dev/null
+++ b/src/libraries/qmfutil/include/QMailViewerFactory
@@ -0,0 +1 @@
+#include "qmailviewer.h"
diff --git a/src/libraries/qmfutil/include/QMailViewerInterface b/src/libraries/qmfutil/include/QMailViewerInterface
new file mode 100644
index 0000000..dc9d052
--- /dev/null
+++ b/src/libraries/qmfutil/include/QMailViewerInterface
@@ -0,0 +1 @@
+#include "qmailviewer.h"
\ No newline at end of file
diff --git a/src/libraries/qmfutil/include/QtopiaHomeMailMessageDelegate b/src/libraries/qmfutil/include/QtopiaHomeMailMessageDelegate
new file mode 100644
index 0000000..6d19eb2
--- /dev/null
+++ b/src/libraries/qmfutil/include/QtopiaHomeMailMessageDelegate
@@ -0,0 +1 @@
+#include "qmailmessagedelegate.h"
\ No newline at end of file
diff --git a/src/libraries/qmfutil/qmfutil.pro b/src/libraries/qmfutil/qmfutil.pro
index 370404c..2512455 100644
--- a/src/libraries/qmfutil/qmfutil.pro
+++ b/src/libraries/qmfutil/qmfutil.pro
@@ -18,6 +18,9 @@ INCLUDEPATH += . ../qtopiamail ../qtopiamail/support
 
 LIBS += -L../qtopiamail -lqtopiamail
 
+
+CONFIG += warn_on create_pc create_prl
+
 HEADERS += emailfoldermodel.h \
            emailfolderview.h \
            folderdelegate.h \
@@ -52,5 +55,4 @@ TRANSLATIONS += libqmfutil-ar.ts \
 
 RESOURCES += qmfutil.qrc
 
-include(../../common.pri)
 
diff --git a/src/libraries/qtopiamail/include/MailId b/src/libraries/qtopiamail/include/MailId
new file mode 100644
index 0000000..e2db656
--- /dev/null
+++ b/src/libraries/qtopiamail/include/MailId
@@ -0,0 +1 @@
+#include "qmailid.h"
diff --git a/src/libraries/qtopiamail/include/QMailAccount b/src/libraries/qtopiamail/include/QMailAccount
new file mode 100644
index 0000000..e403614
--- /dev/null
+++ b/src/libraries/qtopiamail/include/QMailAccount
@@ -0,0 +1 @@
+#include "qmailaccount.h"
diff --git a/src/libraries/qtopiamail/include/QMailAccountConfiguration b/src/libraries/qtopiamail/include/QMailAccountConfiguration
new file mode 100644
index 0000000..0631517
--- /dev/null
+++ b/src/libraries/qtopiamail/include/QMailAccountConfiguration
@@ -0,0 +1 @@
+#include "qmailaccountconfiguration.h"
diff --git a/src/libraries/qtopiamail/include/QMailAccountId b/src/libraries/qtopiamail/include/QMailAccountId
new file mode 100644
index 0000000..e2db656
--- /dev/null
+++ b/src/libraries/qtopiamail/include/QMailAccountId
@@ -0,0 +1 @@
+#include "qmailid.h"
diff --git a/src/libraries/qtopiamail/include/QMailAccountKey b/src/libraries/qtopiamail/include/QMailAccountKey
new file mode 100644
index 0000000..1c39992
--- /dev/null
+++ b/src/libraries/qtopiamail/include/QMailAccountKey
@@ -0,0 +1 @@
+#include "qmailaccountkey.h"
diff --git a/src/libraries/qtopiamail/include/QMailAccountListModel b/src/libraries/qtopiamail/include/QMailAccountListModel
new file mode 100644
index 0000000..a9d6feb
--- /dev/null
+++ b/src/libraries/qtopiamail/include/QMailAccountListModel
@@ -0,0 +1 @@
+#include "qmailaccountlistmodel.h"
diff --git a/src/libraries/qtopiamail/include/QMailAccountMessageSet b/src/libraries/qtopiamail/include/QMailAccountMessageSet
new file mode 100644
index 0000000..d8be240
--- /dev/null
+++ b/src/libraries/qtopiamail/include/QMailAccountMessageSet
@@ -0,0 +1 @@
+#include "qmailmessageset.h"
diff --git a/src/libraries/qtopiamail/include/QMailAccountSortKey b/src/libraries/qtopiamail/include/QMailAccountSortKey
new file mode 100644
index 0000000..87a88f6
--- /dev/null
+++ b/src/libraries/qtopiamail/include/QMailAccountSortKey
@@ -0,0 +1 @@
+#include "qmailaccountsortkey.h"
diff --git a/src/libraries/qtopiamail/include/QMailAddress b/src/libraries/qtopiamail/include/QMailAddress
new file mode 100644
index 0000000..80d6726
--- /dev/null
+++ b/src/libraries/qtopiamail/include/QMailAddress
@@ -0,0 +1 @@
+#include "qmailaddress.h"
diff --git a/src/libraries/qtopiamail/include/QMailBase64Codec b/src/libraries/qtopiamail/include/QMailBase64Codec
new file mode 100644
index 0000000..1a908f2
--- /dev/null
+++ b/src/libraries/qtopiamail/include/QMailBase64Codec
@@ -0,0 +1 @@
+#include "qmailcodec.h"
diff --git a/src/libraries/qtopiamail/include/QMailCodec b/src/libraries/qtopiamail/include/QMailCodec
new file mode 100644
index 0000000..1a908f2
--- /dev/null
+++ b/src/libraries/qtopiamail/include/QMailCodec
@@ -0,0 +1 @@
+#include "qmailcodec.h"
diff --git a/src/libraries/qtopiamail/include/QMailContentManager b/src/libraries/qtopiamail/include/QMailContentManager
new file mode 100644
index 0000000..7c05cb5
--- /dev/null
+++ b/src/libraries/qtopiamail/include/QMailContentManager
@@ -0,0 +1 @@
+#include "qmailcontentmanager.h"
diff --git a/src/libraries/qtopiamail/include/QMailContentManagerFactory b/src/libraries/qtopiamail/include/QMailContentManagerFactory
new file mode 100644
index 0000000..7c05cb5
--- /dev/null
+++ b/src/libraries/qtopiamail/include/QMailContentManagerFactory
@@ -0,0 +1 @@
+#include "qmailcontentmanager.h"
diff --git a/src/libraries/qtopiamail/include/QMailContentManagerPlugin b/src/libraries/qtopiamail/include/QMailContentManagerPlugin
new file mode 100644
index 0000000..7c05cb5
--- /dev/null
+++ b/src/libraries/qtopiamail/include/QMailContentManagerPlugin
@@ -0,0 +1 @@
+#include "qmailcontentmanager.h"
diff --git a/src/libraries/qtopiamail/include/QMailFilterMessageSet b/src/libraries/qtopiamail/include/QMailFilterMessageSet
new file mode 100644
index 0000000..d8be240
--- /dev/null
+++ b/src/libraries/qtopiamail/include/QMailFilterMessageSet
@@ -0,0 +1 @@
+#include "qmailmessageset.h"
diff --git a/src/libraries/qtopiamail/include/QMailFolder b/src/libraries/qtopiamail/include/QMailFolder
new file mode 100644
index 0000000..cae2455
--- /dev/null
+++ b/src/libraries/qtopiamail/include/QMailFolder
@@ -0,0 +1 @@
+#include "qmailfolder.h"
diff --git a/src/libraries/qtopiamail/include/QMailFolderId b/src/libraries/qtopiamail/include/QMailFolderId
new file mode 100644
index 0000000..e2db656
--- /dev/null
+++ b/src/libraries/qtopiamail/include/QMailFolderId
@@ -0,0 +1 @@
+#include "qmailid.h"
diff --git a/src/libraries/qtopiamail/include/QMailFolderKey b/src/libraries/qtopiamail/include/QMailFolderKey
new file mode 100644
index 0000000..5effe63
--- /dev/null
+++ b/src/libraries/qtopiamail/include/QMailFolderKey
@@ -0,0 +1 @@
+#include "qmailfolderkey.h"
diff --git a/src/libraries/qtopiamail/include/QMailFolderMessageSet b/src/libraries/qtopiamail/include/QMailFolderMessageSet
new file mode 100644
index 0000000..d8be240
--- /dev/null
+++ b/src/libraries/qtopiamail/include/QMailFolderMessageSet
@@ -0,0 +1 @@
+#include "qmailmessageset.h"
diff --git a/src/libraries/qtopiamail/include/QMailFolderSortKey b/src/libraries/qtopiamail/include/QMailFolderSortKey
new file mode 100644
index 0000000..231dba5
--- /dev/null
+++ b/src/libraries/qtopiamail/include/QMailFolderSortKey
@@ -0,0 +1 @@
+#include "qmailfoldersortkey.h"
diff --git a/src/libraries/qtopiamail/include/QMailLineEndingCodec b/src/libraries/qtopiamail/include/QMailLineEndingCodec
new file mode 100644
index 0000000..1a908f2
--- /dev/null
+++ b/src/libraries/qtopiamail/include/QMailLineEndingCodec
@@ -0,0 +1 @@
+#include "qmailcodec.h"
diff --git a/src/libraries/qtopiamail/include/QMailMessage b/src/libraries/qtopiamail/include/QMailMessage
new file mode 100644
index 0000000..1f120e0
--- /dev/null
+++ b/src/libraries/qtopiamail/include/QMailMessage
@@ -0,0 +1 @@
+#include "qmailmessage.h"
diff --git a/src/libraries/qtopiamail/include/QMailMessageBody b/src/libraries/qtopiamail/include/QMailMessageBody
new file mode 100644
index 0000000..1f120e0
--- /dev/null
+++ b/src/libraries/qtopiamail/include/QMailMessageBody
@@ -0,0 +1 @@
+#include "qmailmessage.h"
diff --git a/src/libraries/qtopiamail/include/QMailMessageContentDisposition b/src/libraries/qtopiamail/include/QMailMessageContentDisposition
new file mode 100644
index 0000000..1f120e0
--- /dev/null
+++ b/src/libraries/qtopiamail/include/QMailMessageContentDisposition
@@ -0,0 +1 @@
+#include "qmailmessage.h"
diff --git a/src/libraries/qtopiamail/include/QMailMessageContentType b/src/libraries/qtopiamail/include/QMailMessageContentType
new file mode 100644
index 0000000..1f120e0
--- /dev/null
+++ b/src/libraries/qtopiamail/include/QMailMessageContentType
@@ -0,0 +1 @@
+#include "qmailmessage.h"
diff --git a/src/libraries/qtopiamail/include/QMailMessageHeaderField b/src/libraries/qtopiamail/include/QMailMessageHeaderField
new file mode 100644
index 0000000..1f120e0
--- /dev/null
+++ b/src/libraries/qtopiamail/include/QMailMessageHeaderField
@@ -0,0 +1 @@
+#include "qmailmessage.h"
diff --git a/src/libraries/qtopiamail/include/QMailMessageId b/src/libraries/qtopiamail/include/QMailMessageId
new file mode 100644
index 0000000..e2db656
--- /dev/null
+++ b/src/libraries/qtopiamail/include/QMailMessageId
@@ -0,0 +1 @@
+#include "qmailid.h"
diff --git a/src/libraries/qtopiamail/include/QMailMessageKey b/src/libraries/qtopiamail/include/QMailMessageKey
new file mode 100644
index 0000000..06211f5
--- /dev/null
+++ b/src/libraries/qtopiamail/include/QMailMessageKey
@@ -0,0 +1 @@
+#include "qmailmessagekey.h"
diff --git a/src/libraries/qtopiamail/include/QMailMessageListModel b/src/libraries/qtopiamail/include/QMailMessageListModel
new file mode 100644
index 0000000..5eb664a
--- /dev/null
+++ b/src/libraries/qtopiamail/include/QMailMessageListModel
@@ -0,0 +1 @@
+#include "qmailmessagelistmodel.h"
diff --git a/src/libraries/qtopiamail/include/QMailMessageMetaData b/src/libraries/qtopiamail/include/QMailMessageMetaData
new file mode 100644
index 0000000..1f120e0
--- /dev/null
+++ b/src/libraries/qtopiamail/include/QMailMessageMetaData
@@ -0,0 +1 @@
+#include "qmailmessage.h"
diff --git a/src/libraries/qtopiamail/include/QMailMessagePart b/src/libraries/qtopiamail/include/QMailMessagePart
new file mode 100644
index 0000000..1f120e0
--- /dev/null
+++ b/src/libraries/qtopiamail/include/QMailMessagePart
@@ -0,0 +1 @@
+#include "qmailmessage.h"
diff --git a/src/libraries/qtopiamail/include/QMailMessagePartContainer b/src/libraries/qtopiamail/include/QMailMessagePartContainer
new file mode 100644
index 0000000..1f120e0
--- /dev/null
+++ b/src/libraries/qtopiamail/include/QMailMessagePartContainer
@@ -0,0 +1 @@
+#include "qmailmessage.h"
diff --git a/src/libraries/qtopiamail/include/QMailMessageRemovalRecord b/src/libraries/qtopiamail/include/QMailMessageRemovalRecord
new file mode 100644
index 0000000..737bd83
--- /dev/null
+++ b/src/libraries/qtopiamail/include/QMailMessageRemovalRecord
@@ -0,0 +1 @@
+#include "qmailmessageremovalrecord.h"
diff --git a/src/libraries/qtopiamail/include/QMailMessageServer b/src/libraries/qtopiamail/include/QMailMessageServer
new file mode 100644
index 0000000..5398cdc
--- /dev/null
+++ b/src/libraries/qtopiamail/include/QMailMessageServer
@@ -0,0 +1 @@
+#include "qmailmessageserver.h"
diff --git a/src/libraries/qtopiamail/include/QMailMessageSet b/src/libraries/qtopiamail/include/QMailMessageSet
new file mode 100644
index 0000000..d8be240
--- /dev/null
+++ b/src/libraries/qtopiamail/include/QMailMessageSet
@@ -0,0 +1 @@
+#include "qmailmessageset.h"
diff --git a/src/libraries/qtopiamail/include/QMailMessageSetContainer b/src/libraries/qtopiamail/include/QMailMessageSetContainer
new file mode 100644
index 0000000..d8be240
--- /dev/null
+++ b/src/libraries/qtopiamail/include/QMailMessageSetContainer
@@ -0,0 +1 @@
+#include "qmailmessageset.h"
diff --git a/src/libraries/qtopiamail/include/QMailMessageSetModel b/src/libraries/qtopiamail/include/QMailMessageSetModel
new file mode 100644
index 0000000..d8be240
--- /dev/null
+++ b/src/libraries/qtopiamail/include/QMailMessageSetModel
@@ -0,0 +1 @@
+#include "qmailmessageset.h"
diff --git a/src/libraries/qtopiamail/include/QMailMessageSortKey b/src/libraries/qtopiamail/include/QMailMessageSortKey
new file mode 100644
index 0000000..b6f0399
--- /dev/null
+++ b/src/libraries/qtopiamail/include/QMailMessageSortKey
@@ -0,0 +1 @@
+#include "qmailmessagesortkey.h"
diff --git a/src/libraries/qtopiamail/include/QMailNewEmailHandler b/src/libraries/qtopiamail/include/QMailNewEmailHandler
new file mode 100644
index 0000000..61db895
--- /dev/null
+++ b/src/libraries/qtopiamail/include/QMailNewEmailHandler
@@ -0,0 +1 @@
+#include "qmailnewmessagehandler.h"
diff --git a/src/libraries/qtopiamail/include/QMailNewMessageHandler b/src/libraries/qtopiamail/include/QMailNewMessageHandler
new file mode 100644
index 0000000..61db895
--- /dev/null
+++ b/src/libraries/qtopiamail/include/QMailNewMessageHandler
@@ -0,0 +1 @@
+#include "qmailnewmessagehandler.h"
diff --git a/src/libraries/qtopiamail/include/QMailPassThroughCodec b/src/libraries/qtopiamail/include/QMailPassThroughCodec
new file mode 100644
index 0000000..1a908f2
--- /dev/null
+++ b/src/libraries/qtopiamail/include/QMailPassThroughCodec
@@ -0,0 +1 @@
+#include "qmailcodec.h"
diff --git a/src/libraries/qtopiamail/include/QMailQuotedPrintableCodec b/src/libraries/qtopiamail/include/QMailQuotedPrintableCodec
new file mode 100644
index 0000000..1a908f2
--- /dev/null
+++ b/src/libraries/qtopiamail/include/QMailQuotedPrintableCodec
@@ -0,0 +1 @@
+#include "qmailcodec.h"
diff --git a/src/libraries/qtopiamail/include/QMailRetrievalAction b/src/libraries/qtopiamail/include/QMailRetrievalAction
new file mode 100644
index 0000000..cfbd6ca
--- /dev/null
+++ b/src/libraries/qtopiamail/include/QMailRetrievalAction
@@ -0,0 +1 @@
+#include "qmailserviceaction.h"
diff --git a/src/libraries/qtopiamail/include/QMailSearchAction b/src/libraries/qtopiamail/include/QMailSearchAction
new file mode 100644
index 0000000..cfbd6ca
--- /dev/null
+++ b/src/libraries/qtopiamail/include/QMailSearchAction
@@ -0,0 +1 @@
+#include "qmailserviceaction.h"
diff --git a/src/libraries/qtopiamail/include/QMailServiceAction b/src/libraries/qtopiamail/include/QMailServiceAction
new file mode 100644
index 0000000..cfbd6ca
--- /dev/null
+++ b/src/libraries/qtopiamail/include/QMailServiceAction
@@ -0,0 +1 @@
+#include "qmailserviceaction.h"
diff --git a/src/libraries/qtopiamail/include/QMailStorageAction b/src/libraries/qtopiamail/include/QMailStorageAction
new file mode 100644
index 0000000..cfbd6ca
--- /dev/null
+++ b/src/libraries/qtopiamail/include/QMailStorageAction
@@ -0,0 +1 @@
+#include "qmailserviceaction.h"
diff --git a/src/libraries/qtopiamail/include/QMailStore b/src/libraries/qtopiamail/include/QMailStore
new file mode 100644
index 0000000..217a7a7
--- /dev/null
+++ b/src/libraries/qtopiamail/include/QMailStore
@@ -0,0 +1 @@
+#include "qmailstore.h"
diff --git a/src/libraries/qtopiamail/include/QMailTimeStamp b/src/libraries/qtopiamail/include/QMailTimeStamp
new file mode 100644
index 0000000..07bfe99
--- /dev/null
+++ b/src/libraries/qtopiamail/include/QMailTimeStamp
@@ -0,0 +1 @@
+#include "qmailtimestamp.h"
diff --git a/src/libraries/qtopiamail/include/QMailTransmitAction b/src/libraries/qtopiamail/include/QMailTransmitAction
new file mode 100644
index 0000000..cfbd6ca
--- /dev/null
+++ b/src/libraries/qtopiamail/include/QMailTransmitAction
@@ -0,0 +1 @@
+#include "qmailserviceaction.h"
diff --git a/src/libraries/qtopiamail/include/QPrivatelyImplemented b/src/libraries/qtopiamail/include/QPrivatelyImplemented
new file mode 100644
index 0000000..0b73b3b
--- /dev/null
+++ b/src/libraries/qtopiamail/include/QPrivatelyImplemented
@@ -0,0 +1 @@
+#include "qprivateimplementation.h"
diff --git a/src/libraries/qtopiamail/include/QPrivatelyNoncopyable b/src/libraries/qtopiamail/include/QPrivatelyNoncopyable
new file mode 100644
index 0000000..0b73b3b
--- /dev/null
+++ b/src/libraries/qtopiamail/include/QPrivatelyNoncopyable
@@ -0,0 +1 @@
+#include "qprivateimplementation.h"
diff --git a/src/libraries/qtopiamail/include/ServiceConfiguration b/src/libraries/qtopiamail/include/ServiceConfiguration
new file mode 100644
index 0000000..0631517
--- /dev/null
+++ b/src/libraries/qtopiamail/include/ServiceConfiguration
@@ -0,0 +1 @@
+#include "qmailaccountconfiguration.h"
diff --git a/src/libraries/qtopiamail/include/Status b/src/libraries/qtopiamail/include/Status
new file mode 100644
index 0000000..cfbd6ca
--- /dev/null
+++ b/src/libraries/qtopiamail/include/Status
@@ -0,0 +1 @@
+#include "qmailserviceaction.h"
diff --git a/src/libraries/qtopiamail/qmailstore_p.cpp b/src/libraries/qtopiamail/qmailstore_p.cpp
index 65712cc..a639a02 100644
--- a/src/libraries/qtopiamail/qmailstore_p.cpp
+++ b/src/libraries/qtopiamail/qmailstore_p.cpp
@@ -53,6 +53,7 @@
 #include <QSqlError>
 #include <QSqlRecord>
 #include <QTextCodec>
+#include <QSharedPointer>
 
 #define Q_USE_SQLITE
 
@@ -174,7 +175,7 @@ public:
 
     Guard(Mutex& m)
         : mutex(m),
-          locked(false) 
+          locked(false)
     {
     }
 
@@ -192,7 +193,7 @@ public:
     {
         if (locked) {
             mutex.unlock();
-            locked = false; 
+            locked = false;
         }
     }
 };
@@ -258,7 +259,7 @@ template<>
 class MessageValueExtractor<QMailMessageMetaData>
 {
     const QMailMessageMetaData &_data;
-    
+
 public:
     MessageValueExtractor(const QMailMessageMetaData &d) : _data(d) {}
 
@@ -305,7 +306,7 @@ template<>
 class MessageValueExtractor<QVariant>
 {
     const QVariant &_value;
-    
+
 public:
     MessageValueExtractor(const QVariant &v) : _value(v) {}
 
@@ -346,9 +347,9 @@ public:
 
 
 // Properties of the mailmessages table
-static QMailStorePrivate::MessagePropertyMap messagePropertyMap() 
+static QMailStorePrivate::MessagePropertyMap messagePropertyMap()
 {
-    QMailStorePrivate::MessagePropertyMap map; 
+    QMailStorePrivate::MessagePropertyMap map;
 
     map.insert(QMailMessageKey::Id,"id");
     map.insert(QMailMessageKey::Type,"type");
@@ -384,16 +385,16 @@ static QString messagePropertyName(QMailMessageKey::Property property)
     if ((property != QMailMessageKey::AncestorFolderIds) &&
         (property != QMailMessageKey::Custom))
         qWarning() << "Unknown message property:" << property;
-    
+
     return QString();
 }
 
 typedef QMap<QMailAccountKey::Property, QString> AccountPropertyMap;
 
 // Properties of the mailaccounts table
-static AccountPropertyMap accountPropertyMap() 
+static AccountPropertyMap accountPropertyMap()
 {
-    AccountPropertyMap map; 
+    AccountPropertyMap map;
 
     map.insert(QMailAccountKey::Id,"id");
     map.insert(QMailAccountKey::Name,"name");
@@ -421,9 +422,9 @@ static QString accountPropertyName(QMailAccountKey::Property property)
 typedef QMap<QMailFolderKey::Property, QString> FolderPropertyMap;
 
 // Properties of the mailfolders table
-static FolderPropertyMap folderPropertyMap() 
+static FolderPropertyMap folderPropertyMap()
 {
-    FolderPropertyMap map; 
+    FolderPropertyMap map;
 
     map.insert(QMailFolderKey::Id,"id");
     map.insert(QMailFolderKey::Path,"name");
@@ -612,7 +613,7 @@ class ArgumentExtractorBase
 {
 protected:
     const Argument &arg;
-    
+
     ArgumentExtractorBase(const Argument &a) : arg(a) {}
 
     QString minimalString(const QString &s) const
@@ -623,7 +624,7 @@ protected:
             QString minimal(address.minimalPhoneNumber());
 
             // Rather than compare exact numbers, we will only use the trailing
-            // digits to compare phone numbers - otherwise, slightly different 
+            // digits to compare phone numbers - otherwise, slightly different
             // forms of the same number will not be matched
             static const int significantDigits = 8;
 
@@ -678,10 +679,10 @@ protected:
     template<typename ID>
     quint64 idValue() const
     {
-        return QMailStorePrivate::extractValue<ID>(arg.valueList.first()).toULongLong(); 
+        return QMailStorePrivate::extractValue<ID>(arg.valueList.first()).toULongLong();
     }
 
-    template<typename ClauseKey>
+    template <typename ClauseKey>
     QVariantList idValues() const
     {
         const QVariant& var = arg.valueList.first();
@@ -735,7 +736,6 @@ protected:
     }
 };
 
-
 template<typename PropertyType, typename BitmapType = int>
 class RecordExtractorBase
 {
@@ -745,10 +745,10 @@ protected:
 
     RecordExtractorBase(const QSqlRecord &r, BitmapType b = 0) : record(r), bitmap(b) {}
     virtual ~RecordExtractorBase() {}
-    
+
     template<typename ValueType>
-    ValueType value(const QString &field, const ValueType &defaultValue = ValueType()) const 
-    { 
+    ValueType value(const QString &field, const ValueType &defaultValue = ValueType()) const
+    {
         int index(fieldIndex(field, bitmap));
 
         if (record.isNull(index))
@@ -756,10 +756,10 @@ protected:
         else
             return QMailStorePrivate::extractValue<ValueType>(record.value(index), defaultValue);
     }
-    
+
     template<typename ValueType>
-    ValueType value(PropertyType p, const ValueType &defaultValue = ValueType()) const 
-    { 
+    ValueType value(PropertyType p, const ValueType &defaultValue = ValueType()) const
+    {
         return value(fieldName(p, QString()), defaultValue);
     }
 
@@ -789,7 +789,7 @@ protected:
 class MessageRecord : public RecordExtractorBase<QMailMessageKey::Property, QMailMessageKey::Properties>
 {
 public:
-    MessageRecord(const QSqlRecord &r, QMailMessageKey::Properties props) 
+    MessageRecord(const QSqlRecord &r, QMailMessageKey::Properties props)
         : RecordExtractorBase<QMailMessageKey::Property, QMailMessageKey::Properties>(r, props) {}
 
     QMailMessageId id() const { return QMailMessageId(value<quint64>(QMailMessageKey::Id)); }
@@ -820,18 +820,18 @@ public:
 
     QMailFolderId previousParentFolderId() const { return QMailFolderId(value<quint64>(QMailMessageKey::PreviousParentFolderId)); }
 
-    QString contentScheme() const 
-    { 
-        if (_uriElements.first.isNull()) 
-            _uriElements = extractUriElements(value<QString>(QMailMessageKey::ContentScheme)); 
+    QString contentScheme() const
+    {
+        if (_uriElements.first.isNull())
+            _uriElements = extractUriElements(value<QString>(QMailMessageKey::ContentScheme));
 
         return _uriElements.first;
     }
 
-    QString contentIdentifier() const 
-    { 
-        if (_uriElements.first.isNull()) 
-            _uriElements = extractUriElements(value<QString>(QMailMessageKey::ContentIdentifier)); 
+    QString contentIdentifier() const
+    {
+        if (_uriElements.first.isNull())
+            _uriElements = extractUriElements(value<QString>(QMailMessageKey::ContentIdentifier));
 
         return _uriElements.second;
     }
@@ -858,7 +858,7 @@ QMap<QMailMessageKey::Properties, QMap<QString, int> > MessageRecord::_fieldInde
 class MessageKeyArgumentExtractor : public ArgumentExtractorBase<QMailMessageKey>
 {
 public:
-    MessageKeyArgumentExtractor(const QMailMessageKey::ArgumentType &a) 
+    MessageKeyArgumentExtractor(const QMailMessageKey::ArgumentType &a)
         : ArgumentExtractorBase<QMailMessageKey>(a) {}
 
     QVariantList id() const { return idValues<QMailMessageKey>(); }
@@ -895,10 +895,10 @@ public:
 
     QVariantList previousParentFolderId() const { return idValues<QMailFolderKey>(); }
 
-    QVariant contentScheme() const 
-    { 
+    QVariant contentScheme() const
+    {
         // Any colons in the field will be stored in escaped format
-        QString value(escape(QMailStorePrivate::extractValue<QString>(arg.valueList.first()), ':')); 
+        QString value(escape(QMailStorePrivate::extractValue<QString>(arg.valueList.first()), ':'));
 
         if ((arg.op == Includes) || (arg.op == Excludes)) {
             value.prepend('%').append('%');
@@ -908,10 +908,10 @@ public:
         return value;
     }
 
-    QVariant contentIdentifier() const 
-    { 
+    QVariant contentIdentifier() const
+    {
         // Any colons in the field will be stored in escaped format
-        QString value(escape(QMailStorePrivate::extractValue<QString>(arg.valueList.first()), ':')); 
+        QString value(escape(QMailStorePrivate::extractValue<QString>(arg.valueList.first()), ':'));
 
         if ((arg.op == Includes) || (arg.op == Excludes)) {
             value.prepend('%').append('%');
@@ -936,7 +936,7 @@ void appendWhereValues<QMailMessageKey::ArgumentType>(const QMailMessageKey::Arg
     const MessageKeyArgumentExtractor extractor(a);
 
     switch (a.property)
-    { 
+    {
     case QMailMessageKey::Id:
         if (a.valueList.count() < IdLookupThreshold) {
             values += extractor.id();
@@ -1031,38 +1031,6 @@ void appendWhereValues<QMailMessageKey::ArgumentType>(const QMailMessageKey::Arg
     }
 }
 
-
-// Class to extract data from records of the mailaccounts table
-class AccountRecord : public RecordExtractorBase<QMailAccountKey::Property>
-{
-public:
-    AccountRecord(const QSqlRecord &r) 
-        : RecordExtractorBase<QMailAccountKey::Property>(r) {}
-
-    QMailAccountId id() const { return QMailAccountId(value<quint64>(QMailAccountKey::Id)); }
-
-    QString name() const { return value<QString>(QMailAccountKey::Name); }
-
-    QMailMessage::MessageType messageType() const { return static_cast<QMailMessage::MessageType>(value<int>(QMailAccountKey::MessageType, -1)); }
-
-    QString fromAddress() const { return value<QString>(QMailAccountKey::FromAddress); }
-
-    quint64 status() const { return value<quint64>(QMailAccountKey::Status); }
-
-    QString signature() const { return value<QString>("signature"); }
-
-private:
-    int fieldIndex(const QString &field, int props) const
-    {
-        return mappedFieldIndex(field, props, _fieldIndex);
-    }
-
-    static QMap<int, QMap<QString, int> > _fieldIndex;
-};
-
-QMap<int, QMap<QString, int> > AccountRecord::_fieldIndex;
-
-
 // Class to convert QMailAccountKey argument values to SQL bind values
 class AccountKeyArgumentExtractor : public ArgumentExtractorBase<QMailAccountKey>
 {
@@ -1076,8 +1044,8 @@ public:
 
     QVariant messageType() const { return intValue(); }
 
-    QVariant fromAddress() const 
-    { 
+    QVariant fromAddress() const
+    {
         QString value(QMailStorePrivate::extractValue<QString>(arg.valueList.first()));
 
         // This test will be converted to a LIKE test, for all comparators
@@ -1127,7 +1095,6 @@ void appendWhereValues<QMailAccountKey::ArgumentType>(const QMailAccountKey::Arg
     }
 }
 
-
 // Class to extract data from records of the mailfolders table
 class FolderRecord : public RecordExtractorBase<QMailFolderKey::Property>
 {
@@ -1307,7 +1274,7 @@ QString buildOrderClause(const ArgumentListType &list, const QString &alias)
 
 QString operatorString(QMailKey::Comparator op, bool multipleArgs = false, bool patternMatch = false, bool bitwiseMultiples = false)
 {
-    switch (op) 
+    switch (op)
     {
     case Equal:
         return (multipleArgs ? " IN " : (patternMatch ? " LIKE " : " = "));
@@ -1350,7 +1317,7 @@ QString operatorString(QMailKey::Comparator op, bool multipleArgs = false, bool
 
 QString combineOperatorString(QMailKey::Combiner op)
 {
-    switch (op) 
+    switch (op)
     {
     case And:
         return " AND ";
@@ -1396,7 +1363,7 @@ QString columnExpression(const QString &column, QMailKey::Comparator op, const Q
 
 QString columnExpression(const QString &column, QMailKey::Comparator op, const QVariantList &valueList, bool patternMatch = false, bool bitwiseMultiples = false, bool noCase = false)
 {
-    QString value(QMailStorePrivate::expandValueList(valueList)); 
+    QString value(QMailStorePrivate::expandValueList(valueList));
 
     return columnExpression(column, op, value, (valueList.count() > 1), patternMatch, bitwiseMultiples, noCase);
 }
@@ -1411,7 +1378,7 @@ template<typename Key>
 QString whereClauseItem(const Key &key, const typename Key::ArgumentType &arg, const QString &alias, const QString &field, const QMailStorePrivate &store);
 
 template<>
-QString whereClauseItem<QMailAccountKey>(const QMailAccountKey &, const QMailAccountKey::ArgumentType &a, const QString &alias, const QString &field, const QMailStorePrivate &store)
+QString whereClauseItem<QMailAccountKey>(const QMailAccountKey &, const QMailAccountKey::ArgumentType &a, const QString &alias, const QString &field, const QMailStorePrivate &)
 {
     QString item;
     {
@@ -1429,53 +1396,18 @@ QString whereClauseItem<QMailAccountKey>(const QMailAccountKey &, const QMailAcc
         bool noCase((a.property == QMailAccountKey::Name) || (a.property == QMailAccountKey::FromAddress));
 
         QString expression = columnExpression(columnName, a.op, a.valueList, patternMatching, bitwise, noCase);
-        
-        switch(a.property)
-        {
-        case QMailAccountKey::Id:
-            if (a.valueList.first().canConvert<QMailAccountKey>()) {
-                QMailAccountKey subKey = a.valueList.first().value<QMailAccountKey>();
-                QString nestedAlias(incrementAlias(alias));
-
-                // Expand comparison to sub-query result
-                q << baseExpression(columnName, a.op, true) << "( SELECT " << qualifiedName("id", nestedAlias) << " FROM mailaccounts " << nestedAlias;
-                q << store.buildWhereClause(QMailStorePrivate::Key(subKey, nestedAlias)) << ")";
-            } else {
-                q << expression;
-            }
-            break;
-
-        case QMailAccountKey::Custom:
-            // Match on custom field
-            {
-                QString nestedAlias(incrementAlias(alias));
-
-                // Is this an existence test or a value test?
-                if ((a.op == QMailKey::Present) || (a.op == QMailKey::Absent)) {
-                    q << qualifiedName("id", alias) << operatorString(a.op, true) << "( SELECT " << qualifiedName("id", nestedAlias);
-                    q << " FROM mailaccountcustom " << nestedAlias << " WHERE name=? COLLATE NOCASE )";
-                } else {
-                    q << qualifiedName("id", alias) << " IN ( SELECT " << qualifiedName("id", nestedAlias); q << " FROM mailaccountcustom " << nestedAlias;
-                    q << " WHERE " << qualifiedName("name", nestedAlias) << "=? COLLATE NOCASE AND " 
-                      << qualifiedName("value", nestedAlias) << operatorString(a.op, false) << "? COLLATE NOCASE )";
-                }
-            }
-            break;
-
-        case QMailAccountKey::Status:
-        case QMailAccountKey::MessageType:
-        case QMailAccountKey::Name:
-        case QMailAccountKey::FromAddress:
 
-            q << expression;
-            break;
-        }
+        // Only ID could be queried here,
+        // All other properties will be queried
+        // from Accounts subsystem
+        Q_ASSERT(a.property == QMailAccountKey::Id);
+        q << expression;
     }
     return item;
 }
 
 template<>
-QString whereClauseItem<QMailMessageKey>(const QMailMessageKey &, const QMailMessageKey::ArgumentType &a, const QString &alias, const QString &field, const QMailStorePrivate &store)
+QString whereClauseItem<QMailMessageKey>(const QMailMessageKey &key, const QMailMessageKey::ArgumentType &a, const QString &alias, const QString &field, const QMailStorePrivate &store)
 {
     QString item;
     {
@@ -1494,7 +1426,7 @@ QString whereClauseItem<QMailMessageKey>(const QMailMessageKey &, const QMailMes
         bool noCase((a.property == QMailMessageKey::Sender) || (a.property == QMailMessageKey::Recipients) || (a.property == QMailMessageKey::Subject));
 
         QString expression = columnExpression(columnName, a.op, a.valueList, patternMatching, bitwise, noCase);
-        
+
         switch(a.property)
         {
         case QMailMessageKey::Id:
@@ -1548,10 +1480,12 @@ QString whereClauseItem<QMailMessageKey>(const QMailMessageKey &, const QMailMes
         case QMailMessageKey::ParentAccountId:
             if(a.valueList.first().canConvert<QMailAccountKey>()) {
                 QMailAccountKey parentAccountKey = a.valueList.first().value<QMailAccountKey>();
-                QString nestedAlias(incrementAlias(alias));
+                QMailAccountIdList parentAccountIdList = store.searchSSOAccounts(parentAccountKey);
 
-                q << baseExpression(columnName, a.op, true) << "( SELECT " << qualifiedName("id", nestedAlias) << " FROM mailaccounts " << nestedAlias;
-                q << store.buildWhereClause(QMailStorePrivate::Key(parentAccountKey, nestedAlias)) << ")";
+                // Rewrite argument and execute builder again
+                QMailMessageKey::ArgumentType &arg = const_cast<QMailMessageKey::ArgumentType&>(a);
+                arg = QMailMessageKey::parentAccountId(parentAccountIdList, QMailDataComparator::Includes).arguments().first();
+                return whereClauseItem(key, arg, alias, field, store);
             } else {
                 q << expression;
             }
@@ -1568,7 +1502,7 @@ QString whereClauseItem<QMailMessageKey>(const QMailMessageKey &, const QMailMes
                     q << " FROM mailmessagecustom " << nestedAlias << " WHERE name=? COLLATE NOCASE )";
                 } else {
                     q << qualifiedName("id", alias) << " IN ( SELECT " << qualifiedName("id", nestedAlias); q << " FROM mailmessagecustom " << nestedAlias;
-                    q << " WHERE " << qualifiedName("name", nestedAlias) << "=? COLLATE NOCASE AND " 
+                    q << " WHERE " << qualifiedName("name", nestedAlias) << "=? COLLATE NOCASE AND "
                       << qualifiedName("value", nestedAlias) << operatorString(a.op, false) << "? COLLATE NOCASE )";
                 }
             }
@@ -1631,14 +1565,14 @@ QString whereClauseItem<QMailMessageKey>(const QMailMessageKey &, const QMailMes
         case QMailMessageKey::ContentIdentifier:
         case QMailMessageKey::ResponseType:
             q << expression;
-            break;     
+            break;
         }
     }
     return item;
 }
 
 template<>
-QString whereClauseItem<QMailFolderKey>(const QMailFolderKey &, const QMailFolderKey::ArgumentType &a, const QString &alias, const QString &field, const QMailStorePrivate &store)
+QString whereClauseItem<QMailFolderKey>(const QMailFolderKey &key, const QMailFolderKey::ArgumentType &a, const QString &alias, const QString &field, const QMailStorePrivate &store)
 {
     QString item;
     {
@@ -1655,7 +1589,7 @@ QString whereClauseItem<QMailFolderKey>(const QMailFolderKey &, const QMailFolde
         bool noCase((a.property == QMailFolderKey::Path) || (a.property == QMailFolderKey::DisplayName));
 
         QString expression = columnExpression(columnName, a.op, a.valueList, false, bitwise, noCase);
-        
+
         switch (a.property)
         {
         case QMailFolderKey::Id:
@@ -1704,10 +1638,12 @@ QString whereClauseItem<QMailFolderKey>(const QMailFolderKey &, const QMailFolde
         case QMailFolderKey::ParentAccountId:
             if(a.valueList.first().canConvert<QMailAccountKey>()) {
                 QMailAccountKey accountSubKey = a.valueList.first().value<QMailAccountKey>();
-                QString nestedAlias(incrementAlias(alias));
+                QMailAccountIdList acountIdList = store.searchSSOAccounts(accountSubKey);
 
-                q << baseExpression(columnName, a.op, true) << "( SELECT " << qualifiedName("id", nestedAlias) << " FROM mailaccounts " << nestedAlias;
-                q << store.buildWhereClause(QMailStorePrivate::Key(accountSubKey, nestedAlias)) << ")";
+                // Rewrite argument and execute builder again
+                QMailFolderKey::ArgumentType &arg = const_cast<QMailFolderKey::ArgumentType&>(a);
+                arg = QMailFolderKey::parentAccountId(acountIdList, QMailDataComparator::Includes).arguments().first();
+                return whereClauseItem(key, arg, alias, field, store);
             } else {
                 q << expression;
             }
@@ -1724,7 +1660,7 @@ QString whereClauseItem<QMailFolderKey>(const QMailFolderKey &, const QMailFolde
                     q << " FROM mailfoldercustom " << nestedAlias << " WHERE name=? COLLATE NOCASE )";
                 } else {
                     q << qualifiedName("id", alias) << " IN ( SELECT " << qualifiedName("id", nestedAlias); q << " FROM mailfoldercustom " << nestedAlias;
-                    q << " WHERE " << qualifiedName("name", nestedAlias) << "=? COLLATE NOCASE AND " 
+                    q << " WHERE " << qualifiedName("name", nestedAlias) << "=? COLLATE NOCASE AND "
                       << qualifiedName("value", nestedAlias) << operatorString(a.op, false) << "? COLLATE NOCASE )";
                 }
             }
@@ -1745,15 +1681,15 @@ QString whereClauseItem<QMailFolderKey>(const QMailFolderKey &, const QMailFolde
 }
 
 template<typename KeyType, typename ArgumentListType, typename KeyListType, typename CombineType>
-QString buildWhereClause(const KeyType &key, 
-                         const ArgumentListType &args, 
-                         const KeyListType &subKeys, 
-                         CombineType combine, 
-                         bool negated, 
+QString buildWhereClause(const KeyType &key,
+                         const ArgumentListType &args,
+                         const KeyListType &subKeys,
+                         CombineType combine,
+                         bool negated,
                          bool nested,
                          bool firstClause,
-                         const QString &alias, 
-                         const QString &field, 
+                         const QString &alias,
+                         const QString &field,
                          const QMailStorePrivate& store)
 {
     QString whereClause;
@@ -1775,12 +1711,12 @@ QString buildWhereClause(const KeyType &key,
 
         foreach (typename KeyListType::const_reference subkey, subKeys) {
             QString nestedWhere(store.buildWhereClause(QMailStorePrivate::Key(subkey, alias), true));
-            if (!nestedWhere.isEmpty()) 
+            if (!nestedWhere.isEmpty())
                 s << op << " (" << nestedWhere << ") ";
 
             op = logicalOpString;
-        }       
-    }       
+        }
+    }
 
     // Finalise the where clause
     if (!whereClause.isEmpty()) {
@@ -1810,6 +1746,427 @@ QMailContentManager::DurabilityRequirement durability(bool commitOnSuccess)
     return (commitOnSuccess ? QMailContentManager::EnsureDurability : QMailContentManager::DeferDurability);
 }
 
+// Forward declaration
+bool SSOAccountSatisfyTheKey(Accounts::Account* ssoAccount, const QMailAccountKey& key);
+
+template <typename Property>
+bool SSOAccountCompareProperty(Accounts::Account* ssoAccount, Property value, QMailKey::Comparator op, const QMailAccountKey::ArgumentType::ValueList& arguments)
+{
+    // Argument list should not be empty.
+    // Otherwise we have nothing to compare.
+    Q_ASSERT(arguments.count());
+
+    if (arguments.count() == 1)
+    {
+        if (!arguments.front().canConvert<Property>())
+        {
+            if (arguments.front().canConvert<QMailAccountKey>())
+            {
+                QMailAccountKey accountKey = arguments.front().value<QMailAccountKey>();
+                return SSOAccountSatisfyTheKey(ssoAccount, accountKey);
+            }
+
+            qMailLog(Messaging) << "Failed to convert argument";
+            return false;
+        }
+
+        Property argument = arguments.front().value<Property>();
+        switch (op)
+        {
+            case QMailKey::Equal:
+                return value == argument;
+
+            case QMailKey::NotEqual:
+                return value != argument;
+
+            case QMailKey::Includes:
+            case QMailKey::Present:
+            case QMailKey::Excludes:
+            case QMailKey::Absent:
+            case QMailKey::LessThan:
+            case QMailKey::LessThanEqual:
+            case QMailKey::GreaterThan:
+            case QMailKey::GreaterThanEqual:
+            default:
+                qMailLog(Messaging) << "This comparator is not supported";
+                Q_ASSERT(false);
+                break;
+        }
+
+    } else {
+        switch (op)
+        {
+            case QMailKey::Includes:
+            case QMailKey::Present:
+                foreach (const QVariant& argument, arguments)
+                {
+                    if (argument.canConvert<Property>() && argument.value<Property>() == value)
+                        return true;
+                }
+                return false;
+
+            case QMailKey::Excludes:
+            case QMailKey::Absent:
+                foreach (const QVariant& argument, arguments)
+                {
+                    if (argument.canConvert<Property>() && argument.value<Property>() == value)
+                        return false;
+                }
+                return true;
+
+
+            case QMailKey::LessThan:
+            case QMailKey::LessThanEqual:
+            case QMailKey::GreaterThan:
+            case QMailKey::GreaterThanEqual:
+            case QMailKey::Equal:
+            case QMailKey::NotEqual:
+            default:
+                qMailLog(Messaging) << "This comparator is not supported";
+                Q_ASSERT(false);
+                break;
+        }
+
+    }
+
+    Q_ASSERT(false);
+    return false;
+}
+
+template <>
+bool SSOAccountCompareProperty(Accounts::Account*, quint64 value, QMailKey::Comparator op, const QMailAccountKey::ArgumentType::ValueList& arguments)
+{
+    // Argument list should not be empty.
+    // Otherwise we have nothing to compare.
+    Q_ASSERT(arguments.count());
+
+    if (arguments.count() == 1)
+    {
+        bool ok = false;
+        quint64 argument = arguments.front().toULongLong(&ok);
+        if (!ok)
+        {
+            qMailLog(Messaging) << "Failed to convert to quing64";
+            return false;
+        }
+
+        switch (op)
+        {
+            case QMailKey::LessThan:
+                return value < argument;
+
+            case QMailKey::LessThanEqual:
+                return value <= argument;
+
+            case QMailKey::GreaterThan:
+                return value > argument;
+
+            case QMailKey::GreaterThanEqual:
+                return value >= argument;
+
+            case QMailKey::Equal:
+                return value == argument;
+
+            case QMailKey::NotEqual:
+                return value != argument;
+
+            case QMailKey::Includes:
+            case QMailKey::Present:
+                return value & argument;
+
+            case QMailKey::Excludes:
+            case QMailKey::Absent:
+                return !(value & argument);
+
+            default:
+                Q_ASSERT(false);
+                break;
+        }
+
+    } else {
+
+        switch (op)
+        {
+            case QMailKey::LessThan:
+            case QMailKey::LessThanEqual:
+            case QMailKey::GreaterThan:
+            case QMailKey::GreaterThanEqual:
+            case QMailKey::Equal:
+            case QMailKey::NotEqual:
+                // This comparator is not supported for multiple integer arguments
+                Q_ASSERT(false);
+                break;
+
+            case QMailKey::Includes:
+            case QMailKey::Present:
+                foreach (const QVariant& argument, arguments)
+                {
+                    if (value == argument.toULongLong())
+                        return true;
+                }
+                return false;
+
+            case QMailKey::Excludes:
+            case QMailKey::Absent:
+                foreach (const QVariant& argument, arguments)
+                {
+                    if (value == argument.toULongLong())
+                        return false;
+                }
+                return true;
+
+            default:
+                Q_ASSERT(false);
+                break;
+        }
+
+    }
+    Q_ASSERT(false);
+    return false;
+}
+
+template <>
+bool SSOAccountCompareProperty(Accounts::Account*, const QString& value, QMailKey::Comparator op, const QMailAccountKey::ArgumentType::ValueList& arguments)
+{
+    // Argument list should not be empty.
+    // Otherwise we have nothing to compare.
+    Q_ASSERT(arguments.count());
+
+    if (arguments.count() == 1)
+    {
+        if (!arguments.front().canConvert<QString>())
+        {
+            qMailLog(Messaging) << "Failed to convert to string";
+            return false;
+        }
+
+        QString argument = arguments.front().toString();
+        switch (op)
+        {
+            case QMailKey::LessThan:
+                return value < argument;
+
+            case QMailKey::LessThanEqual:
+                return value <= argument;
+
+            case QMailKey::GreaterThan:
+                return value > argument;
+
+            case QMailKey::GreaterThanEqual:
+                return value >= argument;
+
+            case QMailKey::Equal:
+                return value == argument;
+
+            case QMailKey::NotEqual:
+                return value != argument;
+
+            case QMailKey::Includes:
+            case QMailKey::Present:
+                return value.contains(argument);
+
+            case QMailKey::Excludes:
+            case QMailKey::Absent:
+                return !value.contains(argument);
+
+            default:
+                Q_ASSERT(false);
+                break;
+        }
+
+    } else {
+
+        switch (op)
+        {
+            case QMailKey::LessThan:
+            case QMailKey::LessThanEqual:
+            case QMailKey::GreaterThan:
+            case QMailKey::GreaterThanEqual:
+            case QMailKey::Equal:
+            case QMailKey::NotEqual:
+                // This comparator is not supported for multiple integer arguments
+                Q_ASSERT(false);
+                break;
+
+            case QMailKey::Includes:
+            case QMailKey::Present:
+                foreach (const QVariant& argument, arguments)
+                {
+                    if (value == argument.toString())
+                        return true;
+                }
+                return false;
+
+            case QMailKey::Excludes:
+            case QMailKey::Absent:
+                foreach (const QVariant& argument, arguments)
+                {
+                    if (value == argument.toString())
+                        return false;
+                }
+                return true;
+
+            default:
+                Q_ASSERT(false);
+                break;
+        }
+
+    }
+    Q_ASSERT(false);
+    return false;
+}
+
+bool SSOAccountCompareProperty(Accounts::Account* ssoAccount, QMailKey::Comparator op, const QMailAccountKey::ArgumentType::ValueList& arguments)
+{
+    // Argument list should not be empty.
+    // Otherwise we have nothing to compare.
+    Q_ASSERT(arguments.count() == 1);
+
+    QStringList argument = arguments.front().toStringList();
+
+    QString key   = argument.front();
+    QString value = argument.count() == 2 ? argument.back() : QString();
+
+    ssoAccount->beginGroup("customFields");
+
+    bool result = false;
+    switch (op)
+    {
+        case QMailKey::LessThan:
+        case QMailKey::LessThanEqual:
+        case QMailKey::GreaterThan:
+        case QMailKey::GreaterThanEqual:
+            // This comparator is not supported for custom fields
+            Q_ASSERT(false);
+            break;
+
+        case QMailKey::Equal:
+            result = (ssoAccount->valueAsString(key) == value);
+            break;
+
+        case QMailKey::NotEqual:
+            result = (ssoAccount->valueAsString(key) != value);
+            break;
+
+        case QMailKey::Includes:
+        case QMailKey::Present:
+            result = ssoAccount->contains(key) && (value.isEmpty() ? true : ssoAccount->valueAsString(key) == value);
+            break;
+
+        case QMailKey::Excludes:
+        case QMailKey::Absent:
+            result = !(ssoAccount->contains(key) && (value.isEmpty() ? true : ssoAccount->valueAsString(key) == value));
+            break;
+
+        default:
+            Q_ASSERT(false);
+            break;
+    }
+    ssoAccount->endGroup();
+    return result;
+}
+
+bool SSOAccountSatisfyTheProperty(Accounts::Account* ssoAccount, const QMailAccountKey::ArgumentType& argument)
+{
+    Q_ASSERT(ssoAccount);
+
+    switch (argument.property)
+    {
+        case QMailAccountKey::Id:
+            return SSOAccountCompareProperty<QMailAccountId>(ssoAccount, QMailAccountId(ssoAccount->id()), argument.op, argument.valueList);
+
+        case QMailAccountKey::Name:
+            return SSOAccountCompareProperty<const QString&>(ssoAccount, ssoAccount->displayName(), argument.op, argument.valueList);
+
+        case QMailAccountKey::MessageType:
+            return SSOAccountCompareProperty<quint64>(ssoAccount, ssoAccount->valueAsInt("type"), argument.op, argument.valueList);
+
+        case QMailAccountKey::FromAddress:
+            return SSOAccountCompareProperty<const QString&>(ssoAccount, QMailAddress(ssoAccount->valueAsString("emailaddress")).address(), argument.op, argument.valueList);
+
+        case QMailAccountKey::Status:
+            return SSOAccountCompareProperty<quint64>(ssoAccount, ssoAccount->valueAsUInt64("status"), argument.op, argument.valueList);
+
+        case QMailAccountKey::Custom:
+            return SSOAccountCompareProperty(ssoAccount, argument.op, argument.valueList);
+
+        default:
+            Q_ASSERT(false);
+            break;
+    }
+    return false;
+}
+
+bool SSOAccountSatisfyTheKey(Accounts::Account* ssoAccount, const QMailAccountKey& key)
+{
+    Q_ASSERT(ssoAccount);
+
+    if (key.isNonMatching())
+        return false;
+
+    if (key.isEmpty())
+        return true;
+
+    // In case of it is not compound key and has got a list of arguments
+    // follow the list of arguments and compare
+    if (!key.arguments().isEmpty())
+    {
+        typedef QList<QMailAccountKey::ArgumentType> ListOfArguments;
+        ListOfArguments::const_iterator it = key.arguments().begin();
+
+        bool result = SSOAccountSatisfyTheProperty(ssoAccount, *it);
+        while (++it != key.arguments().end())
+        {
+            switch (key.combiner())
+            {
+                case QMailKey::And:
+                    result = result && SSOAccountSatisfyTheProperty(ssoAccount, *it);
+                    break;
+                case QMailKey::Or:
+                    result = result || SSOAccountSatisfyTheProperty(ssoAccount, *it);
+                    break;
+                default:
+                    Q_ASSERT(false);
+                    break;
+            }
+        }
+
+        // Return negated value if key was negeated
+        return key.isNegated() ? !result : result;
+    }
+
+    // In case of compound key, process each subkey separatelly
+    if (!key.subKeys().isEmpty())
+    {
+        typedef QList<QMailAccountKey> ListOfKeys;
+        ListOfKeys::const_iterator it = key.subKeys().begin();
+
+        bool result = SSOAccountSatisfyTheKey(ssoAccount, *it);
+        while (++it != key.subKeys().end())
+        {
+            switch (key.combiner())
+            {
+                case QMailKey::And:
+                    result = result && SSOAccountSatisfyTheKey(ssoAccount, *it);
+                    break;
+                case QMailKey::Or:
+                    result = result || SSOAccountSatisfyTheKey(ssoAccount, *it);
+                    break;
+                default:
+                    Q_ASSERT(false);
+                    break;
+            }
+        }
+
+        // Return negated value if key was negeated
+        return key.isNegated() ? !result : result;
+    }
+
+    // This key is not empty and has neither subkeys nor arguments.
+    Q_ASSERT(false);
+    return false;
+}
+
 } // namespace
 
 
@@ -1833,7 +2190,7 @@ public:
 };
 
 QMailStorePrivate::Transaction::Transaction(QMailStorePrivate* d)
-    : m_d(d), 
+    : m_d(d),
       m_initted(false),
       m_committed(false)
 {
@@ -2014,19 +2371,19 @@ const QMailMessageKey::Properties &QMailStorePrivate::allMessageProperties()
     return p;
 }
 
-const QMailStorePrivate::MessagePropertyMap& QMailStorePrivate::messagePropertyMap() 
+const QMailStorePrivate::MessagePropertyMap& QMailStorePrivate::messagePropertyMap()
 {
     static const MessagePropertyMap map(::messagePropertyMap());
     return map;
 }
 
-const QMailStorePrivate::MessagePropertyList& QMailStorePrivate::messagePropertyList() 
+const QMailStorePrivate::MessagePropertyList& QMailStorePrivate::messagePropertyList()
 {
     static const MessagePropertyList list(messagePropertyMap().keys());
     return list;
 }
 
-const QString &QMailStorePrivate::defaultContentScheme() 
+const QString &QMailStorePrivate::defaultContentScheme()
 {
     static QString scheme(QMailContentManagerFactory::defaultScheme());
     return scheme;
@@ -2049,7 +2406,8 @@ QMailStorePrivate::QMailStorePrivate(QMailStore* parent)
       inTransaction(false),
       lastQueryError(0),
       mutex(0),
-      readLock(0)
+      readLock(0),
+      manager(new Accounts::Manager(this))
 {
     ProcessMutex creationMutex(QDir::rootPath());
     MutexGuard guard(creationMutex);
@@ -2103,9 +2461,6 @@ bool QMailStorePrivate::initStore()
 
         if (!ensureVersionInfo() ||
             !setupTables(QList<TableInfo>() << tableInfo("maintenancerecord", 100)
-                                            << tableInfo("mailaccounts", 106)
-                                            << tableInfo("mailaccountcustom", 100)
-                                            << tableInfo("mailaccountconfig", 100)
                                             << tableInfo("mailaccountfolders", 100)
                                             << tableInfo("mailfolders", 104)
                                             << tableInfo("mailfoldercustom", 100)
@@ -2138,7 +2493,7 @@ bool QMailStorePrivate::initStore()
 
 #if defined(Q_USE_SQLITE)
     // default sqlite cache_size of 2000*1.5KB is too large, as we only want
-    // to cache 100 metadata records 
+    // to cache 100 metadata records
     QSqlQuery query( database );
     query.exec(QLatin1String("PRAGMA cache_size=50"));
 #endif
@@ -2166,6 +2521,22 @@ void QMailStorePrivate::clearContent()
 
     Transaction t(this);
 
+    // Remove all SSO email accounts
+    Accounts::AccountIdList accountIDList = manager->accountList("e-mail");
+
+    // Populate all E-Mail accounts
+    foreach (Accounts::AccountId accountID, accountIDList)
+    {
+        Accounts::Account* ssoAccount = manager->account(accountID);
+        Q_ASSERT(ssoAccount);
+
+        // Remove account
+        ssoAccount->remove();
+        ssoAccount->syncAndBlock();
+
+        delete ssoAccount;
+    }
+
     // Drop all data
     foreach (const QString &table, database.tables()) {
         if (table != "versioninfo") {
@@ -2180,7 +2551,7 @@ void QMailStorePrivate::clearContent()
     if (!t.commit()) {
         qMailLog(Messaging) << "Could not commit clearContent operation to database";
     }
-    
+
     // Remove all content
     QMailContentManagerFactory::clearContent();
 }
@@ -2253,7 +2624,7 @@ QSqlQuery QMailStorePrivate::prepare(const QString& sql)
 
             {
                 QSqlQuery createQuery(database);
-                if (!createQuery.exec(QString("CREATE TEMP TABLE %1 ( id %2 PRIMARY KEY )").arg(tableName).arg(key.second))) { 
+                if (!createQuery.exec(QString("CREATE TEMP TABLE %1 ( id %2 PRIMARY KEY )").arg(tableName).arg(key.second))) {
                     setQueryError(createQuery.lastError(), "Failed to create temporary table", queryText(createQuery));
                     qMailLog(Messaging) << "Unable to prepare query:" << sql;
                     return QSqlQuery();
@@ -2280,13 +2651,13 @@ QSqlQuery QMailStorePrivate::prepare(const QString& sql)
 
                     switch (type) {
                     case 1:
-                        id = var.value<QMailMessageId>().toULongLong(); 
+                        id = var.value<QMailMessageId>().toULongLong();
                         break;
                     case 2:
-                        id = var.value<QMailFolderId>().toULongLong(); 
+                        id = var.value<QMailFolderId>().toULongLong();
                         break;
                     case 3:
-                        id = var.value<QMailAccountId>().toULongLong(); 
+                        id = var.value<QMailAccountId>().toULongLong();
                         break;
                     default:
                         qMailLog(Messaging) << "Unable to extract ID value from valuelist!";
@@ -2302,7 +2673,7 @@ QSqlQuery QMailStorePrivate::prepare(const QString& sql)
                     QSqlQuery insertQuery(database);
                     insertQuery.prepare(QString("INSERT INTO %1 VALUES (?)").arg(tableName));
                     insertQuery.addBindValue(idValues);
-                    if (!insertQuery.execBatch()) { 
+                    if (!insertQuery.execBatch()) {
                         setQueryError(insertQuery.lastError(), "Failed to populate integer temporary table", queryText(insertQuery));
                         qMailLog(Messaging) << "Unable to prepare query:" << sql;
                         return QSqlQuery();
@@ -2317,7 +2688,7 @@ QSqlQuery QMailStorePrivate::prepare(const QString& sql)
                     QSqlQuery insertQuery(database);
                     insertQuery.prepare(QString("INSERT INTO %1 VALUES (?)").arg(tableName));
                     insertQuery.addBindValue(idValues);
-                    if (!insertQuery.execBatch()) { 
+                    if (!insertQuery.execBatch()) {
                         setQueryError(insertQuery.lastError(), "Failed to populate varchar temporary table", queryText(insertQuery));
                         qMailLog(Messaging) << "Unable to prepare query:" << sql;
                         return QSqlQuery();
@@ -2344,7 +2715,7 @@ bool QMailStorePrivate::execute(QSqlQuery& query, bool batch)
         return false;
     }
 
-#ifdef QMAILSTORE_LOG_SQL 
+#ifdef QMAILSTORE_LOG_SQL
     qMailLog(Messaging) << "(" << pid << ")" << qPrintable(queryText(query));
 #endif
 
@@ -2363,7 +2734,7 @@ bool QMailStorePrivate::commit(void)
         qMailLog(Messaging) << "(" << pid << ")" << "Transaction does not exist at commit!";
         qWarning() << "Transaction does not exist at commit!";
     }
-    
+
     if (!database.commit()) {
         setQueryError(database.lastError(), "Failed to commit transaction");
         return false;
@@ -2384,7 +2755,7 @@ void QMailStorePrivate::rollback(void)
         qMailLog(Messaging) << "(" << pid << ")" << "Transaction does not exist at rollback!";
         qWarning() << "Transaction does not exist at rollback!";
     }
-    
+
     inTransaction = false;
 
     if (!database.rollback()) {
@@ -2412,7 +2783,7 @@ void QMailStorePrivate::setQueryError(const QSqlError &error, const QString &des
     qWarning() << qPrintable(s);
 }
 
-void QMailStorePrivate::clearQueryError(void) 
+void QMailStorePrivate::clearQueryError(void)
 {
     lastQueryError = QSqlError::NoError;
 }
@@ -2476,9 +2847,10 @@ bool QMailStorePrivate::idValueExists(quint64 id, const QString& table)
     return (query.first());
 }
 
-bool QMailStorePrivate::idExists(const QMailAccountId& id, const QString& table)
+bool QMailStorePrivate::idExists(const QMailAccountId& id)
 {
-    return idValueExists(id.toULongLong(), (table.isEmpty() ? "mailaccounts" : table));
+    QSharedPointer<Accounts::Account> ssoAccount(manager->account(id.toULongLong()));
+    return (ssoAccount != NULL);
 }
 
 bool QMailStorePrivate::idExists(const QMailFolderId& id, const QString& table)
@@ -2491,17 +2863,17 @@ bool QMailStorePrivate::idExists(const QMailMessageId& id, const QString& table)
     return idValueExists(id.toULongLong(), (table.isEmpty() ? "mailmessages" : table));
 }
 
-QMailAccount QMailStorePrivate::extractAccount(const QSqlRecord& r)
+QMailAccount QMailStorePrivate::extractAccount(const QSharedPointer<Accounts::Account>& ssoAccount)
 {
-    const AccountRecord record(r);
+    Q_ASSERT(ssoAccount);
 
     QMailAccount result;
-    result.setId(record.id());
-    result.setName(record.name());
-    result.setMessageType(record.messageType());
-    result.setStatus(record.status());
-    result.setSignature(record.signature());
-    result.setFromAddress(QMailAddress(record.fromAddress()));
+    result.setId(QMailAccountId(ssoAccount->id()));
+    result.setName(ssoAccount->displayName());
+    result.setMessageType(static_cast<QMailMessageMetaDataFwd::MessageType>(ssoAccount->valueAsInt("type")));
+    result.setStatus(ssoAccount->valueAsUInt64("status"));
+    result.setSignature(ssoAccount->valueAsString("signature"));
+    result.setFromAddress(QMailAddress(ssoAccount->valueAsString("emailaddress")));
 
     return result;
 }
@@ -2612,7 +2984,7 @@ void QMailStorePrivate::extractMessageMetaData(const QSqlRecord& r,
                 break;
         }
     }
-    
+
     if (unloadedProperties) {
         // This message is not completely loaded
         metaData->setStatus(QMailMessage::UnloadedData, true);
@@ -2660,7 +3032,7 @@ QMailMessage QMailStorePrivate::extractMessage(const QSqlRecord& r, const QMap<Q
         if (!lock.lock(1000)) {
             qMailLog(Messaging) << "Unable to acquire message body mutex in extractMessage!";
             return QMailMessage();
-        } 
+        }
 
         QMailContentManager *contentManager = QMailContentManagerFactory::create(elements.first);
         if (contentManager) {
@@ -2703,9 +3075,10 @@ QString QMailStorePrivate::buildOrderClause(const Key& key) const
         const QMailFolderSortKey &sortKey(key.key<QMailFolderSortKey>());
         return ::buildOrderClause(sortKey.arguments(), key.alias());
     } else if (key.isType<QMailAccountSortKey>()) {
-        const QMailAccountSortKey &sortKey(key.key<QMailAccountSortKey>());
-        return ::buildOrderClause(sortKey.arguments(), key.alias());
-    } 
+        Q_ASSERT(false);
+        //const QMailAccountSortKey &sortKey(key.key<QMailAccountSortKey>());
+        //return ::buildOrderClause(sortKey.arguments(), key.alias());
+    }
 
     return QString();
 }
@@ -2747,7 +3120,7 @@ QVariantList QMailStorePrivate::whereClauseValues(const Key& key) const
     } else if (key.isType<QMailAccountKey>()) {
         const QMailAccountKey &accountKey(key.key<QMailAccountKey>());
         return ::whereClauseValues(accountKey);
-    } 
+    }
 
     return QVariantList();
 }
@@ -2962,7 +3335,7 @@ bool QMailStorePrivate::executeFile(QFile &file)
     QTextStream ts(&file);
     ts.setCodec(QTextCodec::codecForName("utf8"));
     ts.setAutoDetectUnicode(true);
-    
+
     QString sql = parseSql(ts);
     while (result && !sql.isEmpty()) {
         QSqlQuery query(database);
@@ -3125,7 +3498,7 @@ bool QMailStorePrivate::setupTables(const QList<TableInfo> &tableList)
             }
         }
     }
-        
+
     return result;
 }
 
@@ -3134,7 +3507,7 @@ bool QMailStorePrivate::setupFolders(const QList<FolderInfo> &folderList)
     QSet<quint64> folderIds;
 
     {
-        QSqlQuery query(simpleQuery("SELECT id FROM mailfolders", 
+        QSqlQuery query(simpleQuery("SELECT id FROM mailfolders",
                                     "folder ids query"));
         if (query.lastError().type() != QSqlError::NoError)
             return false;
@@ -3297,8 +3670,8 @@ QString QMailStorePrivate::parseSql(QTextStream& ts)
         if (line.trimmed ().length () == 0)
             continue;
         qry += line;
-        
-        if ( line.contains( ';' ) == false) 
+
+        if ( line.contains( ';' ) == false)
             qry += QLatin1String(" ");
         else
             return qry;
@@ -3327,7 +3700,7 @@ QString QMailStorePrivate::expandValueList(int valueCount)
     }
 }
 
-QString QMailStorePrivate::expandProperties(const QMailMessageKey::Properties& prop, bool update) const 
+QString QMailStorePrivate::expandProperties(const QMailMessageKey::Properties& prop, bool update) const
 {
     QString out;
 
@@ -3340,7 +3713,7 @@ QString QMailStorePrivate::expandProperties(const QMailMessageKey::Properties& p
     foreach (QMailMessageKey::Property p, messagePropertyList()) {
         if (properties & p) {
             if (!out.isEmpty())
-                out += ",";                     
+                out += ",";
             out += map.value(p);
             if (update)
                 out += "=?";
@@ -3353,18 +3726,18 @@ QString QMailStorePrivate::expandProperties(const QMailMessageKey::Properties& p
 bool QMailStorePrivate::addAccount(QMailAccount *account, QMailAccountConfiguration *config,
                                    QMailAccountIdList *addedAccountIds)
 {
-    return repeatedly<WriteAccess>(bind(&QMailStorePrivate::attemptAddAccount, this, 
-                                        account, config, 
-                                        addedAccountIds), 
+    return repeatedly<WriteAccess>(bind(&QMailStorePrivate::attemptAddAccount, this,
+                                        account, config,
+                                        addedAccountIds),
                                    "addAccount");
 }
 
 bool QMailStorePrivate::addFolder(QMailFolder *folder,
                                   QMailFolderIdList *addedFolderIds, QMailAccountIdList *modifiedAccountIds)
-{   
-    return repeatedly<WriteAccess>(bind(&QMailStorePrivate::attemptAddFolder, this, 
-                                        folder, 
-                                        addedFolderIds, modifiedAccountIds), 
+{
+    return repeatedly<WriteAccess>(bind(&QMailStorePrivate::attemptAddFolder, this,
+                                        folder,
+                                        addedFolderIds, modifiedAccountIds),
                                    "addFolder");
 }
 
@@ -3388,9 +3761,9 @@ bool QMailStorePrivate::addMessages(const QList<QMailMessage *> &messages,
             }
         }
 
-        if (!repeatedly<WriteAccess>(bind(func, this, 
+        if (!repeatedly<WriteAccess>(bind(func, this,
                                           message, cref(identifier), cref(references),
-                                          addedMessageIds, updatedMessageIds, modifiedFolderIds, modifiedAccountIds), 
+                                          addedMessageIds, updatedMessageIds, modifiedFolderIds, modifiedAccountIds),
                                      "addMessages",
                                      &t)) {
             return false;
@@ -3435,9 +3808,9 @@ bool QMailStorePrivate::addMessages(const QList<QMailMessageMetaData *> &message
         QString identifier;
         QStringList references;
 
-        if (!repeatedly<WriteAccess>(bind(func, this, 
+        if (!repeatedly<WriteAccess>(bind(func, this,
                                           metaData, cref(identifier), cref(references),
-                                          addedMessageIds, updatedMessageIds, modifiedFolderIds, modifiedAccountIds), 
+                                          addedMessageIds, updatedMessageIds, modifiedFolderIds, modifiedAccountIds),
                                      "addMessages",
                                      &t)) {
             return false;
@@ -3455,54 +3828,54 @@ bool QMailStorePrivate::addMessages(const QList<QMailMessageMetaData *> &message
 bool QMailStorePrivate::removeAccounts(const QMailAccountKey &key,
                                        QMailAccountIdList *deletedAccountIds, QMailFolderIdList *deletedFolderIds, QMailMessageIdList *deletedMessageIds, QMailMessageIdList *updatedMessageIds, QMailFolderIdList *modifiedFolderIds, QMailAccountIdList *modifiedAccountIds)
 {
-    return repeatedly<WriteAccess>(bind(&QMailStorePrivate::attemptRemoveAccounts, this, 
-                                        cref(key), 
-                                        deletedAccountIds, deletedFolderIds, deletedMessageIds, updatedMessageIds, modifiedFolderIds, modifiedAccountIds), 
+    return repeatedly<WriteAccess>(bind(&QMailStorePrivate::attemptRemoveAccounts, this,
+                                        cref(key),
+                                        deletedAccountIds, deletedFolderIds, deletedMessageIds, updatedMessageIds, modifiedFolderIds, modifiedAccountIds),
                                    "removeAccounts");
 }
 
 bool QMailStorePrivate::removeFolders(const QMailFolderKey &key, QMailStore::MessageRemovalOption option,
                                       QMailFolderIdList *deletedFolderIds, QMailMessageIdList *deletedMessageIds, QMailMessageIdList *updatedMessageIds, QMailFolderIdList *modifiedFolderIds, QMailAccountIdList *modifiedAccountIds)
 {
-    return repeatedly<WriteAccess>(bind(&QMailStorePrivate::attemptRemoveFolders, this, 
-                                        cref(key), option, 
-                                        deletedFolderIds, deletedMessageIds, updatedMessageIds, modifiedFolderIds, modifiedAccountIds), 
+    return repeatedly<WriteAccess>(bind(&QMailStorePrivate::attemptRemoveFolders, this,
+                                        cref(key), option,
+                                        deletedFolderIds, deletedMessageIds, updatedMessageIds, modifiedFolderIds, modifiedAccountIds),
                                    "removeFolders");
 }
 
 bool QMailStorePrivate::removeMessages(const QMailMessageKey &key, QMailStore::MessageRemovalOption option,
                                        QMailMessageIdList *deletedMessageIds, QMailMessageIdList *updatedMessageIds, QMailFolderIdList *modifiedFolderIds, QMailAccountIdList *modifiedAccountIds)
 {
-    return repeatedly<WriteAccess>(bind(&QMailStorePrivate::attemptRemoveMessages, this, 
-                                        cref(key), option, 
-                                        deletedMessageIds, updatedMessageIds, modifiedFolderIds, modifiedAccountIds), 
+    return repeatedly<WriteAccess>(bind(&QMailStorePrivate::attemptRemoveMessages, this,
+                                        cref(key), option,
+                                        deletedMessageIds, updatedMessageIds, modifiedFolderIds, modifiedAccountIds),
                                    "removeMessages");
 }
 
 bool QMailStorePrivate::updateAccount(QMailAccount *account, QMailAccountConfiguration *config,
                                       QMailAccountIdList *updatedAccountIds)
 {
-    return repeatedly<WriteAccess>(bind(&QMailStorePrivate::attemptUpdateAccount, this, 
-                                        account, config, 
-                                        updatedAccountIds), 
+    return repeatedly<WriteAccess>(bind(&QMailStorePrivate::attemptUpdateAccount, this,
+                                        account, config,
+                                        updatedAccountIds),
                                    "updateAccount");
 }
 
 bool QMailStorePrivate::updateAccountConfiguration(QMailAccountConfiguration *config,
                                                    QMailAccountIdList *updatedAccountIds)
 {
-    return repeatedly<WriteAccess>(bind(&QMailStorePrivate::attemptUpdateAccount, this, 
-                                        reinterpret_cast<QMailAccount*>(0), config, 
-                                        updatedAccountIds), 
+    return repeatedly<WriteAccess>(bind(&QMailStorePrivate::attemptUpdateAccount, this,
+                                        reinterpret_cast<QMailAccount*>(0), config,
+                                        updatedAccountIds),
                                    "updateAccount");
 }
 
 bool QMailStorePrivate::updateFolder(QMailFolder *folder,
                                      QMailFolderIdList *updatedFolderIds, QMailAccountIdList *modifiedAccountIds)
 {
-    return repeatedly<WriteAccess>(bind(&QMailStorePrivate::attemptUpdateFolder, this, 
-                                        folder, 
-                                        updatedFolderIds, modifiedAccountIds), 
+    return repeatedly<WriteAccess>(bind(&QMailStorePrivate::attemptUpdateFolder, this,
+                                        folder,
+                                        updatedFolderIds, modifiedAccountIds),
                                    "updateFolder");
 }
 
@@ -3516,9 +3889,9 @@ bool QMailStorePrivate::updateMessages(const QList<QPair<QMailMessageMetaData*,
     typedef QPair<QMailMessageMetaData*, QMailMessage*> PairType;
 
     foreach (const PairType &pair, messages) {
-        if (!repeatedly<WriteAccess>(bind(&QMailStorePrivate::attemptUpdateMessage, this, 
+        if (!repeatedly<WriteAccess>(bind(&QMailStorePrivate::attemptUpdateMessage, this,
                                           pair.first, pair.second,
-                                          updatedMessageIds, modifiedMessageIds, modifiedFolderIds, modifiedAccountIds), 
+                                          updatedMessageIds, modifiedMessageIds, modifiedFolderIds, modifiedAccountIds),
                                      "updateMessages",
                                      &t)) {
             return false;
@@ -3554,42 +3927,42 @@ bool QMailStorePrivate::updateMessages(const QList<QPair<QMailMessageMetaData*,
 bool QMailStorePrivate::updateMessagesMetaData(const QMailMessageKey &key, const QMailMessageKey::Properties &properties, const QMailMessageMetaData &data,
                                                QMailMessageIdList *updatedMessageIds, QMailFolderIdList *modifiedFolderIds, QMailAccountIdList *modifiedAccountIds)
 {
-    return repeatedly<WriteAccess>(bind(&QMailStorePrivate::attemptUpdateMessagesMetaData, this, 
-                                        cref(key), cref(properties), cref(data), 
-                                        updatedMessageIds, modifiedFolderIds, modifiedAccountIds), 
+    return repeatedly<WriteAccess>(bind(&QMailStorePrivate::attemptUpdateMessagesMetaData, this,
+                                        cref(key), cref(properties), cref(data),
+                                        updatedMessageIds, modifiedFolderIds, modifiedAccountIds),
                                    "updateMessagesMetaData");
 }
 
 bool QMailStorePrivate::updateMessagesMetaData(const QMailMessageKey &key, quint64 status, bool set,
                                                QMailMessageIdList *updatedMessageIds, QMailFolderIdList *modifiedFolderIds, QMailAccountIdList *modifiedAccountIds)
 {
-    return repeatedly<WriteAccess>(bind(&QMailStorePrivate::attemptUpdateMessagesStatus, this, 
+    return repeatedly<WriteAccess>(bind(&QMailStorePrivate::attemptUpdateMessagesStatus, this,
                                         cref(key), status, set,
-                                        updatedMessageIds, modifiedFolderIds, modifiedAccountIds), 
+                                        updatedMessageIds, modifiedFolderIds, modifiedAccountIds),
                                    "updateMessagesMetaData"); // not 'updateMessagesStatus', due to function name exported by QMailStore
 }
 
 bool QMailStorePrivate::restoreToPreviousFolder(const QMailMessageKey &key,
                                                 QMailMessageIdList *updatedMessageIds, QMailFolderIdList *modifiedFolderIds, QMailAccountIdList *modifiedAccountIds)
 {
-    return repeatedly<WriteAccess>(bind(&QMailStorePrivate::attemptRestoreToPreviousFolder, this, 
-                                        cref(key), 
-                                        updatedMessageIds, modifiedFolderIds, modifiedAccountIds), 
+    return repeatedly<WriteAccess>(bind(&QMailStorePrivate::attemptRestoreToPreviousFolder, this,
+                                        cref(key),
+                                        updatedMessageIds, modifiedFolderIds, modifiedAccountIds),
                                    "restoreToPreviousFolder");
 }
 
 bool QMailStorePrivate::purgeMessageRemovalRecords(const QMailAccountId &accountId, const QStringList &serverUids)
 {
-    return repeatedly<WriteAccess>(bind(&QMailStorePrivate::attemptPurgeMessageRemovalRecords, this, 
-                                        cref(accountId), cref(serverUids)), 
+    return repeatedly<WriteAccess>(bind(&QMailStorePrivate::attemptPurgeMessageRemovalRecords, this,
+                                        cref(accountId), cref(serverUids)),
                                    "purgeMessageRemovalRecords");
 }
 
 int QMailStorePrivate::countAccounts(const QMailAccountKey &key) const
 {
     int result(0);
-    repeatedly<ReadAccess>(bind(&QMailStorePrivate::attemptCountAccounts, const_cast<QMailStorePrivate*>(this), 
-                                cref(key), &result), 
+    repeatedly<ReadAccess>(bind(&QMailStorePrivate::attemptCountAccounts, const_cast<QMailStorePrivate*>(this),
+                                cref(key), &result),
                            "countAccounts");
     return result;
 }
@@ -3597,8 +3970,8 @@ int QMailStorePrivate::countAccounts(const QMailAccountKey &key) const
 int QMailStorePrivate::countFolders(const QMailFolderKey &key) const
 {
     int result(0);
-    repeatedly<ReadAccess>(bind(&QMailStorePrivate::attemptCountFolders, const_cast<QMailStorePrivate*>(this), 
-                                cref(key), &result), 
+    repeatedly<ReadAccess>(bind(&QMailStorePrivate::attemptCountFolders, const_cast<QMailStorePrivate*>(this),
+                                cref(key), &result),
                            "countFolders");
     return result;
 }
@@ -3606,8 +3979,8 @@ int QMailStorePrivate::countFolders(const QMailFolderKey &key) const
 int QMailStorePrivate::countMessages(const QMailMessageKey &key) const
 {
     int result(0);
-    repeatedly<ReadAccess>(bind(&QMailStorePrivate::attemptCountMessages, const_cast<QMailStorePrivate*>(this), 
-                                cref(key), &result), 
+    repeatedly<ReadAccess>(bind(&QMailStorePrivate::attemptCountMessages, const_cast<QMailStorePrivate*>(this),
+                                cref(key), &result),
                            "countMessages");
     return result;
 }
@@ -3615,8 +3988,8 @@ int QMailStorePrivate::countMessages(const QMailMessageKey &key) const
 int QMailStorePrivate::sizeOfMessages(const QMailMessageKey &key) const
 {
     int result(0);
-    repeatedly<ReadAccess>(bind(&QMailStorePrivate::attemptSizeOfMessages, const_cast<QMailStorePrivate*>(this), 
-                                cref(key), &result), 
+    repeatedly<ReadAccess>(bind(&QMailStorePrivate::attemptSizeOfMessages, const_cast<QMailStorePrivate*>(this),
+                                cref(key), &result),
                            "sizeOfMessages");
     return result;
 }
@@ -3624,8 +3997,8 @@ int QMailStorePrivate::sizeOfMessages(const QMailMessageKey &key) const
 QMailAccountIdList QMailStorePrivate::queryAccounts(const QMailAccountKey &key, const QMailAccountSortKey &sortKey, uint limit, uint offset) const
 {
     QMailAccountIdList ids;
-    repeatedly<ReadAccess>(bind(&QMailStorePrivate::attemptQueryAccounts, const_cast<QMailStorePrivate*>(this), 
-                                cref(key), cref(sortKey), limit, offset, &ids), 
+    repeatedly<ReadAccess>(bind(&QMailStorePrivate::attemptQueryAccounts, const_cast<QMailStorePrivate*>(this),
+                                cref(key), cref(sortKey), limit, offset, &ids),
                            "queryAccounts");
     return ids;
 }
@@ -3633,8 +4006,8 @@ QMailAccountIdList QMailStorePrivate::queryAccounts(const QMailAccountKey &key,
 QMailFolderIdList QMailStorePrivate::queryFolders(const QMailFolderKey &key, const QMailFolderSortKey &sortKey, uint limit, uint offset) const
 {
     QMailFolderIdList ids;
-    repeatedly<ReadAccess>(bind(&QMailStorePrivate::attemptQueryFolders, const_cast<QMailStorePrivate*>(this), 
-                                cref(key), cref(sortKey), limit, offset, &ids), 
+    repeatedly<ReadAccess>(bind(&QMailStorePrivate::attemptQueryFolders, const_cast<QMailStorePrivate*>(this),
+                                cref(key), cref(sortKey), limit, offset, &ids),
                            "queryFolders");
     return ids;
 }
@@ -3642,8 +4015,8 @@ QMailFolderIdList QMailStorePrivate::queryFolders(const QMailFolderKey &key, con
 QMailMessageIdList QMailStorePrivate::queryMessages(const QMailMessageKey &key, const QMailMessageSortKey &sortKey, uint limit, uint offset) const
 {
     QMailMessageIdList ids;
-    repeatedly<ReadAccess>(bind(&QMailStorePrivate::attemptQueryMessages, const_cast<QMailStorePrivate*>(this), 
-                                cref(key), cref(sortKey), limit, offset, &ids), 
+    repeatedly<ReadAccess>(bind(&QMailStorePrivate::attemptQueryMessages, const_cast<QMailStorePrivate*>(this),
+                                cref(key), cref(sortKey), limit, offset, &ids),
                            "queryMessages");
     return ids;
 }
@@ -3654,8 +4027,8 @@ QMailAccount QMailStorePrivate::account(const QMailAccountId &id) const
         return accountCache.lookup(id);
 
     QMailAccount account;
-    repeatedly<ReadAccess>(bind(&QMailStorePrivate::attemptAccount, const_cast<QMailStorePrivate*>(this), 
-                                cref(id), &account), 
+    repeatedly<ReadAccess>(bind(&QMailStorePrivate::attemptAccount, const_cast<QMailStorePrivate*>(this),
+                                cref(id), &account),
                            "account");
     return account;
 }
@@ -3663,8 +4036,8 @@ QMailAccount QMailStorePrivate::account(const QMailAccountId &id) const
 QMailAccountConfiguration QMailStorePrivate::accountConfiguration(const QMailAccountId &id) const
 {
     QMailAccountConfiguration config;
-    repeatedly<ReadAccess>(bind(&QMailStorePrivate::attemptAccountConfiguration, const_cast<QMailStorePrivate*>(this), 
-                                cref(id), &config), 
+    repeatedly<ReadAccess>(bind(&QMailStorePrivate::attemptAccountConfiguration, const_cast<QMailStorePrivate*>(this),
+                                cref(id), &config),
                            "accountConfiguration");
     return config;
 }
@@ -3675,8 +4048,8 @@ QMailFolder QMailStorePrivate::folder(const QMailFolderId &id) const
         return folderCache.lookup(id);
 
     QMailFolder folder;
-    repeatedly<ReadAccess>(bind(&QMailStorePrivate::attemptFolder, const_cast<QMailStorePrivate*>(this), 
-                                cref(id), &folder), 
+    repeatedly<ReadAccess>(bind(&QMailStorePrivate::attemptFolder, const_cast<QMailStorePrivate*>(this),
+                                cref(id), &folder),
                            "folder");
     return folder;
 }
@@ -3687,8 +4060,8 @@ QMailMessage QMailStorePrivate::message(const QMailMessageId &id) const
     AttemptResult (QMailStorePrivate::*func)(const QMailMessageId&, QMailMessage*, ReadLock&) = &QMailStorePrivate::attemptMessage;
 
     QMailMessage msg;
-    repeatedly<ReadAccess>(bind(func, const_cast<QMailStorePrivate*>(this), 
-                                cref(id), &msg), 
+    repeatedly<ReadAccess>(bind(func, const_cast<QMailStorePrivate*>(this),
+                                cref(id), &msg),
                            "message(id)");
     return msg;
 }
@@ -3699,8 +4072,8 @@ QMailMessage QMailStorePrivate::message(const QString &uid, const QMailAccountId
     AttemptResult (QMailStorePrivate::*func)(const QString&, const QMailAccountId&, QMailMessage*, ReadLock&) = &QMailStorePrivate::attemptMessage;
 
     QMailMessage msg;
-    repeatedly<ReadAccess>(bind(func, const_cast<QMailStorePrivate*>(this), 
-                                cref(uid), cref(accountId), &msg), 
+    repeatedly<ReadAccess>(bind(func, const_cast<QMailStorePrivate*>(this),
+                                cref(uid), cref(accountId), &msg),
                            "message(uid, accountId)");
     return msg;
 }
@@ -3732,15 +4105,15 @@ QMailMessageMetaData QMailStorePrivate::messageMetaData(const QString &uid, cons
         // Resolve from overloaded member functions:
         AttemptResult (QMailStorePrivate::*func)(const QMailMessageId&, QMailMessageMetaData*, ReadLock&) = &QMailStorePrivate::attemptMessageMetaData;
 
-        success = repeatedly<ReadAccess>(bind(func, const_cast<QMailStorePrivate*>(this), 
-                                              cref(id), &metaData), 
+        success = repeatedly<ReadAccess>(bind(func, const_cast<QMailStorePrivate*>(this),
+                                              cref(id), &metaData),
                                          "messageMetaData(id)");
     } else {
         // Resolve from overloaded member functions:
         AttemptResult (QMailStorePrivate::*func)(const QString&, const QMailAccountId&, QMailMessageMetaData*, ReadLock&) = &QMailStorePrivate::attemptMessageMetaData;
 
-        success = repeatedly<ReadAccess>(bind(func, const_cast<QMailStorePrivate*>(this), 
-                                              cref(uid), cref(accountId), &metaData), 
+        success = repeatedly<ReadAccess>(bind(func, const_cast<QMailStorePrivate*>(this),
+                                              cref(uid), cref(accountId), &metaData),
                                          "messageMetaData(uid/accountId)");
     }
 
@@ -3755,8 +4128,8 @@ QMailMessageMetaData QMailStorePrivate::messageMetaData(const QString &uid, cons
 QMailMessageMetaDataList QMailStorePrivate::messagesMetaData(const QMailMessageKey &key, const QMailMessageKey::Properties &properties, QMailStore::ReturnOption option) const
 {
     QMailMessageMetaDataList metaData;
-    repeatedly<ReadAccess>(bind(&QMailStorePrivate::attemptMessagesMetaData, const_cast<QMailStorePrivate*>(this), 
-                                cref(key), cref(properties), option, &metaData), 
+    repeatedly<ReadAccess>(bind(&QMailStorePrivate::attemptMessagesMetaData, const_cast<QMailStorePrivate*>(this),
+                                cref(key), cref(properties), option, &metaData),
                            "messagesMetaData");
     return metaData;
 }
@@ -3764,8 +4137,8 @@ QMailMessageMetaDataList QMailStorePrivate::messagesMetaData(const QMailMessageK
 QMailMessageRemovalRecordList QMailStorePrivate::messageRemovalRecords(const QMailAccountId &accountId, const QMailFolderId &folderId) const
 {
     QMailMessageRemovalRecordList removalRecords;
-    repeatedly<ReadAccess>(bind(&QMailStorePrivate::attemptMessageRemovalRecords, const_cast<QMailStorePrivate*>(this), 
-                                cref(accountId), cref(folderId), &removalRecords), 
+    repeatedly<ReadAccess>(bind(&QMailStorePrivate::attemptMessageRemovalRecords, const_cast<QMailStorePrivate*>(this),
+                                cref(accountId), cref(folderId), &removalRecords),
                            "messageRemovalRecords(accountId, folderId)");
     return removalRecords;
 }
@@ -3777,7 +4150,7 @@ bool QMailStorePrivate::registerAccountStatusFlag(const QString &name)
 
     static const QString context("accountstatus");
     return repeatedly<WriteAccess>(bind(&QMailStorePrivate::attemptRegisterStatusBit, this,
-                                        cref(name), cref(context), 64), 
+                                        cref(name), cref(context), 64),
                                    "registerAccountStatusBit");
 }
 
@@ -3796,7 +4169,7 @@ bool QMailStorePrivate::registerFolderStatusFlag(const QString &name)
 
     static const QString context("folderstatus");
     return repeatedly<WriteAccess>(bind(&QMailStorePrivate::attemptRegisterStatusBit, this,
-                                        cref(name), cref(context), 64), 
+                                        cref(name), cref(context), 64),
                                    "registerFolderStatusBit");
 }
 
@@ -3815,7 +4188,7 @@ bool QMailStorePrivate::registerMessageStatusFlag(const QString &name)
 
     static const QString context("messagestatus");
     return repeatedly<WriteAccess>(bind(&QMailStorePrivate::attemptRegisterStatusBit, this,
-                                        cref(name), cref(context), 64), 
+                                        cref(name), cref(context), 64),
                                    "registerMessageStatusBit");
 }
 
@@ -3834,8 +4207,8 @@ quint64 QMailStorePrivate::queryStatusMap(const QString &name, const QString &co
         return it.value();
 
     int result(0);
-    repeatedly<ReadAccess>(bind(&QMailStorePrivate::attemptStatusBit, const_cast<QMailStorePrivate*>(this), 
-                                cref(name), cref(context), &result), 
+    repeatedly<ReadAccess>(bind(&QMailStorePrivate::attemptStatusBit, const_cast<QMailStorePrivate*>(this),
+                                cref(name), cref(context), &result),
                            "folderStatusMask");
     if (result == 0)
         return 0;
@@ -3856,7 +4229,7 @@ QMailFolderIdList QMailStorePrivate::folderAncestorIds(const QMailFolderIdList&
         *result = self->attemptFolderAncestorIds(ids, &ancestorIds, l);
     } else {
         bool ok = repeatedly<ReadAccess>(bind(&QMailStorePrivate::attemptFolderAncestorIds, self,
-                                              cref(ids), &ancestorIds), 
+                                              cref(ids), &ancestorIds),
                                          "folderAncestorIds");
         if (result)
             *result = ok ? Success : Failure;
@@ -3939,7 +4312,7 @@ bool QMailStorePrivate::repeatedly(FunctionType func, const QString &description
                 setLastError(errorType(AccessType()));
             }
             return false;
-        } else { 
+        } else {
             // result == DatabaseFailure
             if (queryError() == Sqlite3BusyErrorNumber) {
                 if (attemptCount < MaxAttempts) {
@@ -3973,6 +4346,110 @@ bool QMailStorePrivate::repeatedly(FunctionType func, const QString &description
     return false;
 }
 
+QMailStorePrivate::AttemptResult QMailStorePrivate::addAccountCustomFields(QSharedPointer<Accounts::Account>& ssoAccount, const QMap<QString, QString>& fields)
+{
+    if (!fields.isEmpty())
+    {
+        ssoAccount->beginGroup("customFields");
+
+        // Insert any custom fields belonging to this account
+        QMap<QString, QString>::const_iterator it = fields.begin(), end = fields.end();
+        for ( ; it != end; ++it) {
+            ssoAccount->setValue(it.key(), QVariant(it.value()));
+        }
+        ssoAccount->endGroup();
+
+        if (!ssoAccount->syncAndBlock())
+            return DatabaseFailure;
+    }
+
+    return Success;
+}
+
+QMailStorePrivate::AttemptResult QMailStorePrivate::updateAccountCustomFields(QSharedPointer<Accounts::Account>& ssoAccount, const QMap<QString, QString> &fields)
+{
+    ssoAccount->beginGroup("customFields");
+
+    QMap<QString, QString> existing;
+    {
+        foreach (const QString& name, ssoAccount->allKeys())
+        {
+             existing.insert(name, ssoAccount->valueAsString(name));
+        }
+    }
+
+    QVariantList obsoleteFields;
+    QVariantList modifiedFields;
+    QVariantList modifiedValues;
+    QVariantList addedFields;
+    QVariantList addedValues;
+
+    // Compare the sets
+    QMap<QString, QString>::const_iterator fend = fields.end(), eend = existing.end();
+    QMap<QString, QString>::const_iterator it = existing.begin();
+    for ( ; it != eend; ++it) {
+        QMap<QString, QString>::const_iterator current = fields.find(it.key());
+        if (current == fend) {
+            obsoleteFields.append(QVariant(it.key()));
+        } else if (*current != *it) {
+            modifiedFields.append(QVariant(current.key()));
+            modifiedValues.append(QVariant(current.value()));
+        }
+    }
+
+    for (it = fields.begin(); it != fend; ++it) {
+        if (existing.find(it.key()) == eend) {
+            addedFields.append(QVariant(it.key()));
+            addedValues.append(QVariant(it.value()));
+        }
+    }
+
+    if (!obsoleteFields.isEmpty()) {
+        // Remove the obsolete fields
+        foreach (const QVariant& obsolet, obsoleteFields)
+        {
+            ssoAccount->remove(obsolet.toString());
+        }
+    }
+
+    if (!modifiedFields.isEmpty()) {
+        // Batch update of the modified fields
+        QVariantList::const_iterator field = modifiedFields.begin();
+        QVariantList::const_iterator value = modifiedValues.begin();
+        while (field != modifiedFields.end() && value != modifiedValues.end())
+            ssoAccount->setValue(field++->toString(), *value++);
+    }
+
+    if (!addedFields.isEmpty()) {
+        // Batch insert of the added fields
+        QVariantList::const_iterator field = addedFields.begin();
+        QVariantList::const_iterator value = addedValues.begin();
+        while (field != addedFields.end() && value != addedValues.end())
+            ssoAccount->setValue(field++->toString(), *value++);
+
+    }
+
+    ssoAccount->endGroup();
+    if (!ssoAccount->syncAndBlock())
+        return DatabaseFailure;
+
+    return Success;
+}
+
+QMailStorePrivate::AttemptResult QMailStorePrivate::accountCustomFields(QSharedPointer<Accounts::Account>& ssoAccount, QMap<QString, QString>* fields)
+{
+    qMailLog(Messaging) << "Load custom fields";
+    ssoAccount->beginGroup("customFields");
+    foreach (const QString& key, ssoAccount->allKeys())
+    {
+        qMailLog(Messaging) << "Custom Field:" << key << "=" << ssoAccount->valueAsString(key);
+        fields->insert(key, ssoAccount->valueAsString(key));
+    }
+    ssoAccount->endGroup();
+
+    return Success;
+}
+
 QMailStorePrivate::AttemptResult QMailStorePrivate::addCustomFields(quint64 id, const QMap<QString, QString> &fields, const QString &tableName)
 {
     if (!fields.isEmpty()) {
@@ -4092,8 +4569,8 @@ QMailStorePrivate::AttemptResult QMailStorePrivate::customFields(quint64 id, QMa
     return Success;
 }
 
-QMailStorePrivate::AttemptResult QMailStorePrivate::attemptAddAccount(QMailAccount *account, QMailAccountConfiguration* config, 
-                                                                      QMailAccountIdList *addedAccountIds, 
+QMailStorePrivate::AttemptResult QMailStorePrivate::attemptAddAccount(QMailAccount *account, QMailAccountConfiguration* config,
+                                                                      QMailAccountIdList *addedAccountIds,
                                                                       Transaction &t, bool commitOnSuccess)
 {
     if (account->id().isValid() && idExists(account->id())) {
@@ -4101,29 +4578,40 @@ QMailStorePrivate::AttemptResult QMailStorePrivate::attemptAddAccount(QMailAccou
         return Failure;
     }
 
-    QMailAccountId insertId;
+    // Create new account in Accounts subsystem
+    QSharedPointer<Accounts::Account> ssoAccount(manager->createAccount("GenericProvider"));
+    if (!ssoAccount)
+    {
+        qMailLog(Messaging) << "Failed to create account";
+        return Failure;
+    }
 
+    ssoAccount->setDisplayName(account->name());
+    ssoAccount->setEnabled(account->status() & QMailAccount::Enabled);
+
+    Accounts::ServiceList services = ssoAccount->services("e-mail");
+    if (!services.count())
     {
-        QString properties("type,name,status,signature,emailaddress");
-        QString values("?,?,?,?,?");
-        QVariantList propertyValues;
-        propertyValues << static_cast<int>(account->messageType()) 
-                       << account->name() 
-                       << account->status()
-                       << account->signature()
-                       << account->fromAddress().toString(true);
+        qMailLog(Messaging) << "Services not found, make sure that *.service and *.provider files are properly installed.";
+        return DatabaseFailure;
+    }
 
-        {
-            QSqlQuery query(simpleQuery(QString("INSERT INTO mailaccounts (%1) VALUES (%2)").arg(properties).arg(values),
-                                        propertyValues,
-                                        "addAccount mailaccounts query"));
-            if (query.lastError().type() != QSqlError::NoError)
-                return DatabaseFailure;
+    Accounts::Service* service = services.first();
+    Q_ASSERT(service);
+    ssoAccount->selectService(service);
 
-            //Extract the insert id
-            insertId = QMailAccountId(extractValue<quint64>(query.lastInsertId()));
-        }
+    ssoAccount->setValue("type", static_cast<int>(account->messageType()));
+    ssoAccount->setValue("status", account->status());
+    ssoAccount->setValue("signature", account->signature());
+    ssoAccount->setValue("emailaddress", account->fromAddress().toString(true));
+
+    if (!ssoAccount->syncAndBlock())
+        return DatabaseFailure;
 
+    // Extract the id
+    QMailAccountId insertId = QMailAccountId(ssoAccount->id());
+
+    {
         // Insert any standard folders configured for this account
         const QMap<QMailFolder::StandardFolder, QMailFolderId> &folders(account->standardFolders());
         if (!folders.isEmpty()) {
@@ -4143,38 +4631,48 @@ QMailStorePrivate::AttemptResult QMailStorePrivate::attemptAddAccount(QMailAccou
                                                       << QVariant(folderIds),
                                        "addAccount mailaccountfolders query"));
             if (query.lastError().type() != QSqlError::NoError)
+            {
+                ssoAccount->remove();
+                ssoAccount->syncAndBlock();
                 return DatabaseFailure;
+            }
         }
 
         // Insert any custom fields belonging to this account
-        AttemptResult result = addCustomFields(insertId.toULongLong(), account->customFields(), "mailaccountcustom");
+        AttemptResult result = addAccountCustomFields(ssoAccount, account->customFields());
         if (result != Success)
+        {
+            ssoAccount->remove();
+            ssoAccount->syncAndBlock();
             return result;
+        }
     }
 
     if (config) {
+
         foreach (const QString &service, config->services()) {
             QMailAccountConfiguration::ServiceConfiguration &serviceConfig(config->serviceConfiguration(service));
             const QMap<QString, QString> &fields = serviceConfig.values();
+            QString serviceName = serviceConfig.service();
 
-            QVariantList configFields;
-            QVariantList configValues;
+            // Open configuration group
+            ssoAccount->beginGroup(serviceName);
 
             // Insert any configuration fields belonging to this account
             QMap<QString, QString>::const_iterator it = fields.begin(), end = fields.end();
             for ( ; it != end; ++it) {
-                configFields.append(QVariant(it.key()));
-                configValues.append(QVariant(it.value()));
+                ssoAccount->setValue(it.key(), QVariant(it.value()));
             }
+            // Close group of keys
+            ssoAccount->endGroup();
+        }
 
-            // Batch insert the custom fields
-            QString sql("INSERT INTO mailaccountconfig (id,service,name,value) VALUES (%1,'%2',?,?)");
-            QSqlQuery query(batchQuery(sql.arg(QString::number(insertId.toULongLong())).arg(service),
-                                       QVariantList() << QVariant(configFields)
-                                                      << QVariant(configValues),
-                                       "addAccount mailaccountconfig query"));
-            if (query.lastError().type() != QSqlError::NoError)
-                return DatabaseFailure;
+        // Save all changes
+        if (!ssoAccount->syncAndBlock())
+        {
+            ssoAccount->remove();
+            ssoAccount->syncAndBlock();
+            return DatabaseFailure;
         }
 
         config->setId(insertId);
@@ -4186,6 +4684,8 @@ QMailStorePrivate::AttemptResult QMailStorePrivate::attemptAddAccount(QMailAccou
         qMailLog(Messaging) << "Could not commit account changes to database";
 
         account->setId(QMailAccountId()); //revert the id
+        ssoAccount->remove();
+        ssoAccount->syncAndBlock();
         return DatabaseFailure;
     }
 
@@ -4193,10 +4693,10 @@ QMailStorePrivate::AttemptResult QMailStorePrivate::attemptAddAccount(QMailAccou
     return Success;
 }
 
-QMailStorePrivate::AttemptResult QMailStorePrivate::attemptAddFolder(QMailFolder *folder, 
+QMailStorePrivate::AttemptResult QMailStorePrivate::attemptAddFolder(QMailFolder *folder,
                                                                      QMailFolderIdList *addedFolderIds, QMailAccountIdList *modifiedAccountIds,
                                                                      Transaction &t, bool commitOnSuccess)
-{   
+{
     //check that the parent folder actually exists
     if (!checkPreconditions(*folder))
         return Failure;
@@ -4236,7 +4736,7 @@ QMailStorePrivate::AttemptResult QMailStorePrivate::attemptAddFolder(QMailFolder
             //add records for each ancestor folder
             QSqlQuery query(simpleQuery("INSERT INTO mailfolderlinks "
                                         "SELECT DISTINCT id,? FROM mailfolderlinks WHERE descendantid=?",
-                                        QVariantList() << folder->id().toULongLong() 
+                                        QVariantList() << folder->id().toULongLong()
                                                        << folder->parentFolderId().toULongLong(),
                                         "mailfolderlinks insert ancestors"));
             if (query.lastError().type() != QSqlError::NoError)
@@ -4246,7 +4746,7 @@ QMailStorePrivate::AttemptResult QMailStorePrivate::attemptAddFolder(QMailFolder
         {
             // Our direct parent is also an ancestor
             QSqlQuery query(simpleQuery("INSERT INTO mailfolderlinks VALUES (?,?)",
-                                        QVariantList() << folder->parentFolderId().toULongLong() 
+                                        QVariantList() << folder->parentFolderId().toULongLong()
                                                        << folder->id().toULongLong(),
                                         "mailfolderlinks insert parent"));
             if (query.lastError().type() != QSqlError::NoError)
@@ -4260,7 +4760,7 @@ QMailStorePrivate::AttemptResult QMailStorePrivate::attemptAddFolder(QMailFolder
         folder->setId(QMailFolderId()); //revert the id
         return DatabaseFailure;
     }
-   
+
     addedFolderIds->append(insertId);
     if (folder->parentAccountId().isValid())
         modifiedAccountIds->append(folder->parentAccountId());
@@ -4323,7 +4823,7 @@ QMailStorePrivate::AttemptResult QMailStorePrivate::attemptAddMessage(QMailMessa
     if (!lock.lock(1000)) {
         qMailLog(Messaging) << "Unable to acquire message body mutex in addMessage!";
         return Failure;
-    } 
+    }
 
     ReferenceStorer refStorer(message);
     const_cast<const QMailMessage*>(message)->foreachPart<ReferenceStorer&>(refStorer);
@@ -4363,7 +4863,7 @@ QMailStorePrivate::AttemptResult QMailStorePrivate::attemptAddMessage(QMailMessa
 }
 
 QMailStorePrivate::AttemptResult QMailStorePrivate::attemptAddMessage(QMailMessageMetaData *metaData, const QString &identifier, const QStringList &references,
-                                                                      QMailMessageIdList *addedMessageIds, QMailMessageIdList *updatedMessageIds, QMailFolderIdList *modifiedFolderIds, QMailAccountIdList *modifiedAccountIds, 
+                                                                      QMailMessageIdList *addedMessageIds, QMailMessageIdList *updatedMessageIds, QMailFolderIdList *modifiedFolderIds, QMailAccountIdList *modifiedAccountIds,
                                                                       Transaction &t, bool commitOnSuccess)
 {
     if (!metaData->parentFolderId().isValid()) {
@@ -4538,7 +5038,7 @@ QMailStorePrivate::AttemptResult QMailStorePrivate::attemptAddMessage(QMailMessa
     return Success;
 }
 
-QMailStorePrivate::AttemptResult QMailStorePrivate::attemptRemoveAccounts(const QMailAccountKey &key, 
+QMailStorePrivate::AttemptResult QMailStorePrivate::attemptRemoveAccounts(const QMailAccountKey &key,
                                                                           QMailAccountIdList *deletedAccountIds, QMailFolderIdList *deletedFolderIds, QMailMessageIdList *deletedMessageIds, QMailMessageIdList *updatedMessageIds, QMailFolderIdList *modifiedFolderIds, QMailAccountIdList *modifiedAccountIds,
                                                                           Transaction &t, bool commitOnSuccess)
 {
@@ -4555,7 +5055,7 @@ QMailStorePrivate::AttemptResult QMailStorePrivate::attemptRemoveAccounts(const
     return DatabaseFailure;
 }
 
-QMailStorePrivate::AttemptResult QMailStorePrivate::attemptRemoveFolders(const QMailFolderKey &key, QMailStore::MessageRemovalOption option, 
+QMailStorePrivate::AttemptResult QMailStorePrivate::attemptRemoveFolders(const QMailFolderKey &key, QMailStore::MessageRemovalOption option,
                                                                          QMailFolderIdList *deletedFolderIds, QMailMessageIdList *deletedMessageIds, QMailMessageIdList *updatedMessageIds, QMailFolderIdList *modifiedFolderIds, QMailAccountIdList *modifiedAccountIds,
                                                                          Transaction &t, bool commitOnSuccess)
 {
@@ -4572,7 +5072,7 @@ QMailStorePrivate::AttemptResult QMailStorePrivate::attemptRemoveFolders(const Q
     return DatabaseFailure;
 }
 
-QMailStorePrivate::AttemptResult QMailStorePrivate::attemptRemoveMessages(const QMailMessageKey &key, QMailStore::MessageRemovalOption option, 
+QMailStorePrivate::AttemptResult QMailStorePrivate::attemptRemoveMessages(const QMailMessageKey &key, QMailStore::MessageRemovalOption option,
                                                                           QMailMessageIdList *deletedMessageIds, QMailMessageIdList *updatedMessageIds, QMailFolderIdList *modifiedFolderIds, QMailAccountIdList *modifiedAccountIds,
                                                                           Transaction &t, bool commitOnSuccess)
 {
@@ -4589,7 +5089,7 @@ QMailStorePrivate::AttemptResult QMailStorePrivate::attemptRemoveMessages(const
     return DatabaseFailure;
 }
 
-QMailStorePrivate::AttemptResult QMailStorePrivate::attemptUpdateAccount(QMailAccount *account, QMailAccountConfiguration *config, 
+QMailStorePrivate::AttemptResult QMailStorePrivate::attemptUpdateAccount(QMailAccount *account, QMailAccountConfiguration *config,
                                                                          QMailAccountIdList *updatedAccountIds,
                                                                          Transaction &t, bool commitOnSuccess)
 {
@@ -4597,22 +5097,27 @@ QMailStorePrivate::AttemptResult QMailStorePrivate::attemptUpdateAccount(QMailAc
     if (!id.isValid())
         return Failure;
 
-    if (account) {
-        QString properties("type=?, name=?, status=?, signature=?, emailaddress=?");
-        QVariantList propertyValues;
-        propertyValues << static_cast<int>(account->messageType()) 
-                       << account->name() 
-                       << account->status()
-                       << account->signature()
-                       << account->fromAddress().toString(true);
+    QSharedPointer<Accounts::Account> ssoAccount(manager->account(id.toULongLong()));
+    Q_ASSERT(ssoAccount);
+    Accounts::ServiceList services = ssoAccount->services("e-mail");
+    if (!services.count())
+    {
+        qMailLog(Messaging) << "Services not found, make sure that *.service and *.provider files are properly installed.";
+        return DatabaseFailure;
+    }
 
-        {
-            QSqlQuery query(simpleQuery(QString("UPDATE mailaccounts SET %1 WHERE id=?").arg(properties),
-                                        propertyValues << id.toULongLong(),
-                                        "updateAccount mailaccounts query"));
-            if (query.lastError().type() != QSqlError::NoError)
-                return DatabaseFailure;
-        }
+    Accounts::Service* service = services.first();
+    Q_ASSERT(service);
+    ssoAccount->selectService(service);
+
+    if (account)
+    {
+        ssoAccount->setDisplayName(account->name());
+        ssoAccount->setEnabled(account->status() & QMailAccount::Enabled);
+        ssoAccount->setValue("type", static_cast<int>(account->messageType()));
+        ssoAccount->setValue("status", account->status());
+        ssoAccount->setValue("signature", account->signature());
+        ssoAccount->setValue("emailaddress", account->fromAddress().toString(true));
 
         // Update any standard folders configured
         const QMap<QMailFolder::StandardFolder, QMailFolderId> &folders(account->standardFolders());
@@ -4620,7 +5125,7 @@ QMailStorePrivate::AttemptResult QMailStorePrivate::attemptUpdateAccount(QMailAc
 
         {
             // Find the existing folders
-            QSqlQuery query(simpleQuery("SELECT foldertype,folderid FROM mailaccountfolders WHERE id=?", 
+            QSqlQuery query(simpleQuery("SELECT foldertype,folderid FROM mailaccountfolders WHERE id=?",
                                         QVariantList() << id.toULongLong(),
                                         "updateAccount mailaccountfolders select query"));
             if (query.lastError().type() != QSqlError::NoError)
@@ -4689,7 +5194,7 @@ QMailStorePrivate::AttemptResult QMailStorePrivate::attemptUpdateAccount(QMailAc
         }
 
         if (account->customFieldsModified()) {
-            AttemptResult result = updateCustomFields(id.toULongLong(), account->customFields(), "mailaccountcustom");
+            AttemptResult result = updateAccountCustomFields(ssoAccount, account->customFields());
             if (result != Success)
                 return result;
         }
@@ -4709,18 +5214,21 @@ QMailStorePrivate::AttemptResult QMailStorePrivate::attemptUpdateAccount(QMailAc
                 fields.insert(qMakePair(service, it.key()), it.value());
         }
 
-        // Find the existing fields in the database
+        // Find the existing fields in SSO account
         QMap<QPair<QString, QString>, QString> existing;
-
         {
-            QSqlQuery query(simpleQuery("SELECT service,name,value FROM mailaccountconfig WHERE id=?",
-                                        QVariantList() << id.toULongLong(),
-                                        "updateAccount mailaccountconfig select query"));
-            if (query.lastError().type() != QSqlError::NoError)
-                return DatabaseFailure;
-
-            while (query.next())
-                existing.insert(qMakePair(query.value(0).toString(), query.value(1).toString()), query.value(2).toString());
+            foreach (const QString& group, ssoAccount->childGroups())
+            {
+                if (group != "customFields")
+                {
+                    ssoAccount->beginGroup(group);
+                    foreach (const QString& name, ssoAccount->allKeys())
+                    {
+                         existing.insert(qMakePair(group, name), ssoAccount->valueAsString(name));
+                    }
+                    ssoAccount->endGroup();
+                }
+            }
         }
 
         QMap<QString, QVariantList> obsoleteFields;
@@ -4754,50 +5262,57 @@ QMailStorePrivate::AttemptResult QMailStorePrivate::attemptUpdateAccount(QMailAc
         if (!obsoleteFields.isEmpty()) {
             // Remove the obsolete fields
             QMap<QString, QVariantList>::const_iterator it = obsoleteFields.begin(), end = obsoleteFields.end();
-            for ( ; it != end; ++it) {
+            for ( ; it != end; ++it)
+            {
                 const QString &service = it.key();
                 const QVariantList &fields = it.value();
-                
-                QString sql("DELETE FROM mailaccountconfig WHERE id=? AND service='%1' AND name IN %2");
-                QSqlQuery query(simpleQuery(sql.arg(service).arg(expandValueList(fields)),
-                                            QVariantList() << id.toULongLong() << fields,
-                                            "updateAccount mailaccountconfig delete query"));
-                if (query.lastError().type() != QSqlError::NoError)
-                    return DatabaseFailure;
+
+                ssoAccount->beginGroup(service);
+                foreach (const QVariant& field, fields)
+                {
+                    ssoAccount->remove(field.toString());
+                }
+                ssoAccount->endGroup();
             }
         }
 
         if (!modifiedFields.isEmpty()) {
             // Batch update the modified fields
             QMap<QString, QVariantList>::const_iterator it = modifiedFields.begin(), end = modifiedFields.end();
-            for (QMap<QString, QVariantList>::const_iterator vit = modifiedValues.begin(); it != end; ++it, ++vit) {
+            for (QMap<QString, QVariantList>::const_iterator vit = modifiedValues.begin(); it != end; ++it, ++vit)
+            {
                 const QString &service = it.key();
                 const QVariantList &fields = it.value();
                 const QVariantList &values = vit.value();
-                
-                QString sql("UPDATE mailaccountconfig SET value=? WHERE id=%1 AND service='%2' AND name=?");
-                QSqlQuery query(batchQuery(sql.arg(QString::number(id.toULongLong())).arg(service),
-                                           QVariantList() << QVariant(values) << QVariant(fields),
-                                           "updateAccount mailaccountconfig update query"));
-                if (query.lastError().type() != QSqlError::NoError)
-                    return DatabaseFailure;
+
+                QVariantList::const_iterator field = fields.begin();
+                QVariantList::const_iterator value = values.begin();
+
+                ssoAccount->beginGroup(service);
+                while (field != fields.end() && value != values.end())
+                    ssoAccount->setValue(field++->toString(), *value++);
+
+                ssoAccount->endGroup();
             }
         }
 
         if (!addedFields.isEmpty()) {
             // Batch insert the added fields
             QMap<QString, QVariantList>::const_iterator it = addedFields.begin(), end = addedFields.end();
-            for (QMap<QString, QVariantList>::const_iterator vit = addedValues.begin(); it != end; ++it, ++vit) {
+            for (QMap<QString, QVariantList>::const_iterator vit = addedValues.begin(); it != end; ++it, ++vit)
+            {
                 const QString &service = it.key();
                 const QVariantList &fields = it.value();
                 const QVariantList &values = vit.value();
-                
-                QString sql("INSERT INTO mailaccountconfig (id,service,name,value) VALUES (%1,'%2',?,?)");
-                QSqlQuery query(batchQuery(sql.arg(QString::number(id.toULongLong())).arg(service),
-                                           QVariantList() << QVariant(fields) << QVariant(values),
-                                           "updateAccount mailaccountconfig insert query"));
-                if (query.lastError().type() != QSqlError::NoError)
-                    return DatabaseFailure;
+
+                QVariantList::const_iterator field = fields.begin();
+                QVariantList::const_iterator value = values.begin();
+
+                ssoAccount->beginGroup(service);
+                while (field != fields.end() && value != values.end())
+                    ssoAccount->setValue(field++->toString(), *value++);
+
+                ssoAccount->endGroup();
             }
         }
     }
@@ -4806,7 +5321,10 @@ QMailStorePrivate::AttemptResult QMailStorePrivate::attemptUpdateAccount(QMailAc
         qMailLog(Messaging) << "Could not commit account update to database";
         return DatabaseFailure;
     }
-        
+
+    if (!ssoAccount->syncAndBlock())
+        return DatabaseFailure;
+
     if (account) {
         // Update the account cache
         if (accountCache.contains(id))
@@ -4817,7 +5335,7 @@ QMailStorePrivate::AttemptResult QMailStorePrivate::attemptUpdateAccount(QMailAc
     return Success;
 }
 
-QMailStorePrivate::AttemptResult QMailStorePrivate::attemptUpdateFolder(QMailFolder *folder, 
+QMailStorePrivate::AttemptResult QMailStorePrivate::attemptUpdateFolder(QMailFolder *folder,
                                                                         QMailFolderIdList *updatedFolderIds, QMailAccountIdList *modifiedAccountIds,
                                                                         Transaction &t, bool commitOnSuccess)
 {
@@ -4857,7 +5375,7 @@ QMailStorePrivate::AttemptResult QMailStorePrivate::attemptUpdateFolder(QMailFol
         if (query.lastError().type() != QSqlError::NoError)
             return DatabaseFailure;
     }
-    
+
     if (folder->customFieldsModified()) {
         AttemptResult result = updateCustomFields(folder->id().toULongLong(), folder->customFields(), "mailfoldercustom");
         if (result != Success)
@@ -4884,7 +5402,7 @@ QMailStorePrivate::AttemptResult QMailStorePrivate::attemptUpdateFolder(QMailFol
             //add links to the new parent
             QSqlQuery query(simpleQuery("INSERT INTO mailfolderlinks "
                                         "SELECT DISTINCT id,? FROM mailfolderlinks WHERE descendantid=?",
-                                        QVariantList() << folder->id().toULongLong() 
+                                        QVariantList() << folder->id().toULongLong()
                                                        << folder->parentFolderId().toULongLong(),
                                         "mailfolderlinks insert ancestors"));
             if (query.lastError().type() != QSqlError::NoError)
@@ -4900,7 +5418,7 @@ QMailStorePrivate::AttemptResult QMailStorePrivate::attemptUpdateFolder(QMailFol
                 return DatabaseFailure;
         }
     }
-        
+
     if (commitOnSuccess && !t.commit()) {
         qMailLog(Messaging) << "Could not commit folder update to database";
         return DatabaseFailure;
@@ -4914,7 +5432,7 @@ QMailStorePrivate::AttemptResult QMailStorePrivate::attemptUpdateFolder(QMailFol
     return Success;
 }
 
-QMailStorePrivate::AttemptResult QMailStorePrivate::attemptUpdateMessage(QMailMessageMetaData *metaData, QMailMessage *message, 
+QMailStorePrivate::AttemptResult QMailStorePrivate::attemptUpdateMessage(QMailMessageMetaData *metaData, QMailMessage *message,
                                                                          QMailMessageIdList *updatedMessageIds, QMailMessageIdList *modifiedMessageIds, QMailFolderIdList *modifiedFolderIds, QMailAccountIdList *modifiedAccountIds,
                                                                          Transaction &t, bool commitOnSuccess)
 {
@@ -4946,7 +5464,7 @@ QMailStorePrivate::AttemptResult QMailStorePrivate::attemptUpdateMessage(QMailMe
     // Do we actually have an update to perform?
     bool updateContent(message && message->contentModified());
     if (metaData->dataModified() || updateContent) {
-        // Find the existing properties 
+        // Find the existing properties
         {
             QSqlQuery query(simpleQuery("SELECT parentaccountid,parentfolderid,responseid,mailfile FROM mailmessages WHERE id=?",
                                         QVariantList() << updateId,
@@ -5016,7 +5534,7 @@ QMailStorePrivate::AttemptResult QMailStorePrivate::attemptUpdateMessage(QMailMe
             if (!lock.lock(1000)) {
                 qMailLog(Messaging) << "Unable to acquire message body mutex in updateMessage!";
                 return Failure;
-            } 
+            }
 
             if (QMailContentManager *contentManager = QMailContentManagerFactory::create(metaData->contentScheme())) {
                 QString contentUri(::contentUri(*metaData));
@@ -5136,7 +5654,7 @@ QMailStorePrivate::AttemptResult QMailStorePrivate::attemptUpdateMessage(QMailMe
                         return DatabaseFailure;
                 }
             }
-            
+
             // Remove any missing message/ancestor references associated with this message
 
             {
@@ -5323,16 +5841,16 @@ QMailStorePrivate::AttemptResult QMailStorePrivate::attemptUpdateMessage(QMailMe
     return Success;
 }
 
-QMailStorePrivate::AttemptResult QMailStorePrivate::attemptUpdateMessagesMetaData(const QMailMessageKey &key, const QMailMessageKey::Properties &props, const QMailMessageMetaData &data, 
+QMailStorePrivate::AttemptResult QMailStorePrivate::attemptUpdateMessagesMetaData(const QMailMessageKey &key, const QMailMessageKey::Properties &props, const QMailMessageMetaData &data,
                                                                                   QMailMessageIdList *updatedMessageIds, QMailFolderIdList *modifiedFolderIds, QMailAccountIdList *modifiedAccountIds,
-                                                                                  Transaction &t, bool commitOnSuccess) 
+                                                                                  Transaction &t, bool commitOnSuccess)
 {
     //do some checks first
     if (props & QMailMessageKey::Id) {
         qMailLog(Messaging) << "Updating of messages IDs is not supported";
         return Failure;
     }
-    
+
     QMailMessageKey::Properties properties(props);
 
     if (properties & QMailMessageKey::ParentFolderId) {
@@ -5437,8 +5955,8 @@ QMailStorePrivate::AttemptResult QMailStorePrivate::attemptUpdateMessagesMetaDat
     return Success;
 }
 
-QMailStorePrivate::AttemptResult QMailStorePrivate::attemptUpdateMessagesStatus(const QMailMessageKey &key, quint64 status, bool set, 
-                                                                                QMailMessageIdList *updatedMessageIds, QMailFolderIdList *modifiedFolderIds, QMailAccountIdList *modifiedAccountIds, 
+QMailStorePrivate::AttemptResult QMailStorePrivate::attemptUpdateMessagesStatus(const QMailMessageKey &key, quint64 status, bool set,
+                                                                                QMailMessageIdList *updatedMessageIds, QMailFolderIdList *modifiedFolderIds, QMailAccountIdList *modifiedAccountIds,
                                                                                 Transaction &t, bool commitOnSuccess)
 {
     //get the valid ids
@@ -5481,8 +5999,8 @@ QMailStorePrivate::AttemptResult QMailStorePrivate::attemptUpdateMessagesStatus(
     return Success;
 }
 
-QMailStorePrivate::AttemptResult QMailStorePrivate::attemptRestoreToPreviousFolder(const QMailMessageKey &key, 
-                                                                                   QMailMessageIdList *updatedMessageIds, QMailFolderIdList *modifiedFolderIds, QMailAccountIdList *modifiedAccountIds, 
+QMailStorePrivate::AttemptResult QMailStorePrivate::attemptRestoreToPreviousFolder(const QMailMessageKey &key,
+                                                                                   QMailMessageIdList *updatedMessageIds, QMailFolderIdList *modifiedFolderIds, QMailAccountIdList *modifiedAccountIds,
                                                                                    Transaction &t, bool commitOnSuccess)
 {
     // Find the message and folders that are affected by this update
@@ -5560,7 +6078,7 @@ QMailStorePrivate::AttemptResult QMailStorePrivate::attemptPurgeMessageRemovalRe
             bindValues << uidValues;
         }
 
-        QSqlQuery query(simpleQuery(sql, 
+        QSqlQuery query(simpleQuery(sql,
                                     bindValues,
                                     "purgeMessageRemovalRecord info query"));
         if (query.lastError().type() != QSqlError::NoError)
@@ -5587,22 +6105,15 @@ QMailStorePrivate::AttemptResult QMailStorePrivate::attemptPurgeMessageRemovalRe
     return Success;
 }
 
-QMailStorePrivate::AttemptResult QMailStorePrivate::attemptCountAccounts(const QMailAccountKey &key, int *result, 
+QMailStorePrivate::AttemptResult QMailStorePrivate::attemptCountAccounts(const QMailAccountKey &key, int *result,
                                                                          ReadLock &)
 {
-    QSqlQuery query(simpleQuery("SELECT COUNT(*) FROM mailaccounts",
-                                Key(key),
-                                "countAccounts mailaccounts query"));
-    if (query.lastError().type() != QSqlError::NoError)
-        return DatabaseFailure;
-
-    if (query.first())
-        *result = extractValue<int>(query.value(0));
-
+    QMailAccountIdList accountIDList = searchSSOAccounts(key);
+    *result =  accountIDList.count();
     return Success;
 }
 
-QMailStorePrivate::AttemptResult QMailStorePrivate::attemptCountFolders(const QMailFolderKey &key, int *result, 
+QMailStorePrivate::AttemptResult QMailStorePrivate::attemptCountFolders(const QMailFolderKey &key, int *result,
                                                                         ReadLock &)
 {
     QSqlQuery query(simpleQuery("SELECT COUNT(*) FROM mailfolders",
@@ -5617,8 +6128,8 @@ QMailStorePrivate::AttemptResult QMailStorePrivate::attemptCountFolders(const QM
     return Success;
 }
 
-QMailStorePrivate::AttemptResult QMailStorePrivate::attemptCountMessages(const QMailMessageKey &key, 
-                                                                         int *result, 
+QMailStorePrivate::AttemptResult QMailStorePrivate::attemptCountMessages(const QMailMessageKey &key,
+                                                                         int *result,
                                                                          ReadLock &)
 {
     QSqlQuery query(simpleQuery("SELECT COUNT(*) FROM mailmessages",
@@ -5633,8 +6144,8 @@ QMailStorePrivate::AttemptResult QMailStorePrivate::attemptCountMessages(const Q
     return Success;
 }
 
-QMailStorePrivate::AttemptResult QMailStorePrivate::attemptSizeOfMessages(const QMailMessageKey &key, 
-                                                                          int *result, 
+QMailStorePrivate::AttemptResult QMailStorePrivate::attemptSizeOfMessages(const QMailMessageKey &key,
+                                                                          int *result,
                                                                           ReadLock &)
 {
     QSqlQuery query(simpleQuery("SELECT SUM(size FROM mailmessages",
@@ -5650,25 +6161,21 @@ QMailStorePrivate::AttemptResult QMailStorePrivate::attemptSizeOfMessages(const
 }
 
 QMailStorePrivate::AttemptResult QMailStorePrivate::attemptQueryAccounts(const QMailAccountKey &key, const QMailAccountSortKey &sortKey, uint limit, uint offset,
-                                                                         QMailAccountIdList *ids, 
+                                                                         QMailAccountIdList *ids,
                                                                          ReadLock &)
 {
-    QSqlQuery query(simpleQuery("SELECT id FROM mailaccounts",
-                                QVariantList(),
-                                QList<Key>() << Key(key) << Key(sortKey),
-                                qMakePair(limit, offset),
-                                "queryAccounts mailaccounts query"));
-    if (query.lastError().type() != QSqlError::NoError)
-        return DatabaseFailure;
+    QMailAccountIdList accountIDList = searchSSOAccounts(key, sortKey);
 
-    while (query.next())
-        ids->append(QMailAccountId(extractValue<quint64>(query.value(0))));
+    if (limit)
+        *ids << accountIDList.mid(offset, limit);
+    else
+        *ids << accountIDList.mid(offset, -1);
 
     return Success;
 }
 
 QMailStorePrivate::AttemptResult QMailStorePrivate::attemptQueryFolders(const QMailFolderKey &key, const QMailFolderSortKey &sortKey, uint limit, uint offset,
-                                                                        QMailFolderIdList *ids, 
+                                                                        QMailFolderIdList *ids,
                                                                         ReadLock &)
 {
     QSqlQuery query(simpleQuery("SELECT id FROM mailfolders",
@@ -5686,7 +6193,7 @@ QMailStorePrivate::AttemptResult QMailStorePrivate::attemptQueryFolders(const QM
 }
 
 QMailStorePrivate::AttemptResult QMailStorePrivate::attemptQueryMessages(const QMailMessageKey &key, const QMailMessageSortKey &sortKey, uint limit, uint offset,
-                                                                         QMailMessageIdList *ids, 
+                                                                         QMailMessageIdList *ids,
                                                                          ReadLock &)
 {
     QSqlQuery query(simpleQuery("SELECT id FROM mailmessages",
@@ -5706,116 +6213,118 @@ QMailStorePrivate::AttemptResult QMailStorePrivate::attemptQueryMessages(const Q
     return Success;
 }
 
-QMailStorePrivate::AttemptResult QMailStorePrivate::attemptAccount(const QMailAccountId &id, 
-                                                                   QMailAccount *result, 
+QMailStorePrivate::AttemptResult QMailStorePrivate::attemptAccount(const QMailAccountId &id,
+                                                                   QMailAccount *result,
                                                                    ReadLock &)
 {
+    if (!id.isValid())
+        return Failure;
+
+    QSharedPointer<Accounts::Account> ssoAccount(manager->account(id.toULongLong()));
+    if (!ssoAccount)
+    {
+        qMailLog(Messaging) << "Account with was not found by id:" << id.toULongLong();
+        return Failure;
+    }
+
+    Accounts::ServiceList services = ssoAccount->services("e-mail");
+    if (!services.count())
+    {
+        qMailLog(Messaging) << "Services not found, make sure that *.service and *.provider files are properly installed.";
+        return DatabaseFailure;
+    }
+
+    Accounts::Service* service = services.first();
+    Q_ASSERT(service);
+    ssoAccount->selectService(service);
+
+    *result = extractAccount(ssoAccount);
+    Q_ASSERT(result->id() == id);
+
     {
-        QSqlQuery query(simpleQuery("SELECT * FROM mailaccounts WHERE id=?",
+        // Find any standard folders configured for this account
+        QSqlQuery query(simpleQuery("SELECT foldertype,folderid FROM mailaccountfolders WHERE id=?",
                                     QVariantList() << id.toULongLong(),
-                                    "account mailaccounts query"));
+                                    "account mailaccountfolders query"));
         if (query.lastError().type() != QSqlError::NoError)
             return DatabaseFailure;
 
-        if (query.first()) {
-            *result = extractAccount(query.record());
-        }
+        while (query.next())
+            result->setStandardFolder(QMailFolder::StandardFolder(query.value(0).toInt()), QMailFolderId(query.value(1).toULongLong()));
     }
 
-    if (result->id().isValid()) {
-        {
-            // Find any standard folders configured for this account
-            QSqlQuery query(simpleQuery("SELECT foldertype,folderid FROM mailaccountfolders WHERE id=?",
-                                        QVariantList() << id.toULongLong(),
-                                        "account mailaccountfolders query"));
-            if (query.lastError().type() != QSqlError::NoError)
-                return DatabaseFailure;
-
-            while (query.next())
-                result->setStandardFolder(QMailFolder::StandardFolder(query.value(0).toInt()), QMailFolderId(query.value(1).toULongLong()));
-        }
-
-        // Find any custom fields for this account
-        QMap<QString, QString> fields;
-        AttemptResult attemptResult = customFields(id.toULongLong(), &fields, "mailaccountcustom");
-        if (attemptResult != Success)
-            return attemptResult;
+    // Find any custom fields for this SSO account
+    QMap<QString, QString> fields;
+    AttemptResult attemptResult = accountCustomFields(ssoAccount, &fields);
+    if (attemptResult != Success)
+        return attemptResult;
 
-        result->setCustomFields(fields);
-        result->setCustomFieldsModified(false);
+    result->setCustomFields(fields);
+    result->setCustomFieldsModified(false);
 
+    // Find the type of the account
+    foreach (const QString& group, ssoAccount->childGroups())
+    {
+        if (group != "customFields")
         {
-            // Find the type of the account
-            QSqlQuery query(simpleQuery("SELECT service,value FROM mailaccountconfig WHERE id=? AND name='servicetype'",
-                                        QVariantList() << id.toULongLong(),
-                                        "account mailaccountconfig query"));
-            if (query.lastError().type() != QSqlError::NoError)
-                return DatabaseFailure;
+            ssoAccount->beginGroup(group);
 
-            while (query.next()) {
-                QString service(query.value(0).toString());
-                QString type(query.value(1).toString());
+            QString serviceType = ssoAccount->valueAsString("servicetype");
+            if (serviceType.contains("source"))
+                result->addMessageSource(group);
 
-                if (type.contains("source")) {
-                    result->addMessageSource(service);
-                }
-                if (type.contains("sink")) {
-                    result->addMessageSink(service);
-                }
-            }
-        }
+            if (serviceType.contains("sink"))
+                result->addMessageSink(group);
 
-        //update cache 
-        accountCache.insert(*result);
-        return Success;
+            ssoAccount->endGroup();
+        }
     }
 
-    return Failure;
+    //update cache
+    accountCache.insert(*result);
+    return Success;
 }
 
-QMailStorePrivate::AttemptResult QMailStorePrivate::attemptAccountConfiguration(const QMailAccountId &id, 
-                                                                                QMailAccountConfiguration *result, 
+QMailStorePrivate::AttemptResult QMailStorePrivate::attemptAccountConfiguration(const QMailAccountId &id,
+                                                                                QMailAccountConfiguration *result,
                                                                                 ReadLock &)
 {
-    // Find any configuration fields for this account
-    QSqlQuery query(simpleQuery("SELECT service,name,value FROM mailaccountconfig WHERE id=? ORDER BY service",
-                                QVariantList() << id.toULongLong(),
-                                "accountConfiguration mailaccountconfig query"));
-    if (query.lastError().type() != QSqlError::NoError)
-        return DatabaseFailure;
+    QSharedPointer<Accounts::Account> ssoAccount(manager->account(id.toULongLong()));
 
-    QString service;
-    QMailAccountConfiguration::ServiceConfiguration *serviceConfig = 0;
+    if (!ssoAccount)
+        return Failure;
 
-    while (query.next()) {
-        QString svc(query.value(0).toString());
-        if (svc != service) {
-            service = svc;
+    Accounts::ServiceList services = ssoAccount->services("e-mail");
+    if (!services.count())
+    {
+        qMailLog(Messaging) << "Services not found, make sure that *.service and *.provider files are properly installed.";
+        return DatabaseFailure;
+    }
+
+    Accounts::Service* service = services.first();
+    Q_ASSERT(service);
+    ssoAccount->selectService(service);
 
-            if (!result->services().contains(service)) {
+    foreach (const QString& group, ssoAccount->childGroups())
+    {
+        if (group != "customFields")
+        {
+            if (!result->services().contains(group)) {
                 // Add this service to the configuration
-                result->addServiceConfiguration(service);
+                result->addServiceConfiguration(group);
             }
 
-            serviceConfig = &result->serviceConfiguration(service);
-        }
-
-        serviceConfig->setValue(query.value(1).toString(), query.value(2).toString());
-    }
-
-    if (service.isEmpty()) {
-        // No services - is this an error?
-        QSqlQuery query(simpleQuery("SELECT COUNT(*) FROM mailaccounts WHERE id=?",
-                                    QVariantList() << id.toULongLong(),
-                                    "accountConfiguration mailaccounts query"));
-        if (query.lastError().type() != QSqlError::NoError)
-            return DatabaseFailure;
+            QMailAccountConfiguration::ServiceConfiguration* serviceConfig = &result->serviceConfiguration(group);
+            Q_ASSERT(serviceConfig);
 
-        if (query.first()) {
-            if (extractValue<int>(query.value(0)) == 0)
-                return Failure;
+            ssoAccount->beginGroup(group);
+            foreach (const QString& key, ssoAccount->allKeys())
+            {
+                serviceConfig->setValue(key,ssoAccount->valueAsString(key));
+            }
+            ssoAccount->endGroup();
         }
-    } 
+    }
 
     result->setId(id);
     result->setModified(false);
@@ -5823,8 +6332,8 @@ QMailStorePrivate::AttemptResult QMailStorePrivate::attemptAccountConfiguration(
     return Success;
 }
 
-QMailStorePrivate::AttemptResult QMailStorePrivate::attemptFolder(const QMailFolderId &id, 
-                                                                  QMailFolder *result, 
+QMailStorePrivate::AttemptResult QMailStorePrivate::attemptFolder(const QMailFolderId &id,
+                                                                  QMailFolder *result,
                                                                   ReadLock &)
 {
     {
@@ -5849,7 +6358,7 @@ QMailStorePrivate::AttemptResult QMailStorePrivate::attemptFolder(const QMailFol
         result->setCustomFields(fields);
         result->setCustomFieldsModified(false);
 
-        //update cache 
+        //update cache
         folderCache.insert(*result);
         return Success;
     }
@@ -5857,8 +6366,8 @@ QMailStorePrivate::AttemptResult QMailStorePrivate::attemptFolder(const QMailFol
     return Failure;
 }
 
-QMailStorePrivate::AttemptResult QMailStorePrivate::attemptMessage(const QMailMessageId &id, 
-                                                                   QMailMessage *result, 
+QMailStorePrivate::AttemptResult QMailStorePrivate::attemptMessage(const QMailMessageId &id,
+                                                                   QMailMessage *result,
                                                                    ReadLock &)
 {
     // Find any custom fields for this message
@@ -5882,8 +6391,8 @@ QMailStorePrivate::AttemptResult QMailStorePrivate::attemptMessage(const QMailMe
     return Failure;
 }
 
-QMailStorePrivate::AttemptResult QMailStorePrivate::attemptMessage(const QString &uid, const QMailAccountId &accountId, 
-                                                                   QMailMessage *result, 
+QMailStorePrivate::AttemptResult QMailStorePrivate::attemptMessage(const QString &uid, const QMailAccountId &accountId,
+                                                                   QMailMessage *result,
                                                                    ReadLock &lock)
 {
     quint64 id(0);
@@ -5891,7 +6400,7 @@ QMailStorePrivate::AttemptResult QMailStorePrivate::attemptMessage(const QString
     AttemptResult attemptResult = attemptMessageId(uid, accountId, &id, lock);
     if (attemptResult != Success)
         return attemptResult;
-            
+
     if (id != 0) {
         return attemptMessage(QMailMessageId(id), result, lock);
     }
@@ -5900,7 +6409,7 @@ QMailStorePrivate::AttemptResult QMailStorePrivate::attemptMessage(const QString
 }
 
 QMailStorePrivate::AttemptResult QMailStorePrivate::attemptMessageMetaData(const QMailMessageId &id,
-                                                                           QMailMessageMetaData *result, 
+                                                                           QMailMessageMetaData *result,
                                                                            ReadLock &)
 {
     // Find any custom fields for this message
@@ -5924,8 +6433,8 @@ QMailStorePrivate::AttemptResult QMailStorePrivate::attemptMessageMetaData(const
     return Failure;
 }
 
-QMailStorePrivate::AttemptResult QMailStorePrivate::attemptMessageMetaData(const QString &uid, const QMailAccountId &accountId, 
-                                                                           QMailMessageMetaData *result, 
+QMailStorePrivate::AttemptResult QMailStorePrivate::attemptMessageMetaData(const QString &uid, const QMailAccountId &accountId,
+                                                                           QMailMessageMetaData *result,
                                                                            ReadLock &lock)
 {
     quint64 id(0);
@@ -5933,7 +6442,7 @@ QMailStorePrivate::AttemptResult QMailStorePrivate::attemptMessageMetaData(const
     AttemptResult attemptResult = attemptMessageId(uid, accountId, &id, lock);
     if (attemptResult != Success)
         return attemptResult;
-            
+
     if (id != 0) {
         return attemptMessageMetaData(QMailMessageId(id), result, lock);
     }
@@ -5941,8 +6450,8 @@ QMailStorePrivate::AttemptResult QMailStorePrivate::attemptMessageMetaData(const
     return Failure;
 }
 
-QMailStorePrivate::AttemptResult QMailStorePrivate::attemptMessagesMetaData(const QMailMessageKey& key, const QMailMessageKey::Properties &properties, QMailStore::ReturnOption option, 
-                                                                            QMailMessageMetaDataList *result, 
+QMailStorePrivate::AttemptResult QMailStorePrivate::attemptMessagesMetaData(const QMailMessageKey& key, const QMailMessageKey::Properties &properties, QMailStore::ReturnOption option,
+                                                                            QMailMessageMetaDataList *result,
                                                                             ReadLock &)
 {
     if (properties == QMailMessageKey::Custom) {
@@ -6033,8 +6542,8 @@ QMailStorePrivate::AttemptResult QMailStorePrivate::attemptMessagesMetaData(cons
     return Success;
 }
 
-QMailStorePrivate::AttemptResult QMailStorePrivate::attemptMessageRemovalRecords(const QMailAccountId &accountId, const QMailFolderId &folderId, 
-                                                                                 QMailMessageRemovalRecordList *result, 
+QMailStorePrivate::AttemptResult QMailStorePrivate::attemptMessageRemovalRecords(const QMailAccountId &accountId, const QMailFolderId &folderId,
+                                                                                 QMailMessageRemovalRecordList *result,
                                                                                  ReadLock &)
 {
     QVariantList values;
@@ -6058,8 +6567,8 @@ QMailStorePrivate::AttemptResult QMailStorePrivate::attemptMessageRemovalRecords
     return Success;
 }
 
-QMailStorePrivate::AttemptResult QMailStorePrivate::attemptMessageFolderIds(const QMailMessageKey &key, 
-                                                                            QMailFolderIdList *result, 
+QMailStorePrivate::AttemptResult QMailStorePrivate::attemptMessageFolderIds(const QMailMessageKey &key,
+                                                                            QMailFolderIdList *result,
                                                                             ReadLock &)
 {
     QSqlQuery query(simpleQuery("SELECT DISTINCT t0.parentfolderid FROM mailmessages t0",
@@ -6074,8 +6583,8 @@ QMailStorePrivate::AttemptResult QMailStorePrivate::attemptMessageFolderIds(cons
     return Success;
 }
 
-QMailStorePrivate::AttemptResult QMailStorePrivate::attemptFolderAccountIds(const QMailFolderKey &key, 
-                                                                            QMailAccountIdList *result, 
+QMailStorePrivate::AttemptResult QMailStorePrivate::attemptFolderAccountIds(const QMailFolderKey &key,
+                                                                            QMailAccountIdList *result,
                                                                             ReadLock &)
 {
     QSqlQuery query(simpleQuery("SELECT DISTINCT parentaccountid FROM mailfolders t0",
@@ -6090,8 +6599,8 @@ QMailStorePrivate::AttemptResult QMailStorePrivate::attemptFolderAccountIds(cons
     return Success;
 }
 
-QMailStorePrivate::AttemptResult QMailStorePrivate::attemptFolderAncestorIds(const QMailFolderIdList &ids, 
-                                                                             QMailFolderIdList *result, 
+QMailStorePrivate::AttemptResult QMailStorePrivate::attemptFolderAncestorIds(const QMailFolderIdList &ids,
+                                                                             QMailFolderIdList *result,
                                                                              ReadLock &)
 {
     QSqlQuery query(simpleQuery("SELECT DISTINCT id FROM mailfolderlinks",
@@ -6174,8 +6683,8 @@ void QMailStorePrivate::preloadHeaderCache(const QMailMessageId& id) const
     }
 }
 
-QMailStorePrivate::AttemptResult QMailStorePrivate::attemptStatusBit(const QString &name, const QString &context, 
-                                                                     int *result, 
+QMailStorePrivate::AttemptResult QMailStorePrivate::attemptStatusBit(const QString &name, const QString &context,
+                                                                     int *result,
                                                                      ReadLock &)
 {
     QSqlQuery query(simpleQuery("SELECT COALESCE(statusbit,0) FROM mailstatusflags WHERE name=? AND context=?",
@@ -6191,13 +6700,13 @@ QMailStorePrivate::AttemptResult QMailStorePrivate::attemptStatusBit(const QStri
     return Success;
 }
 
-QMailStorePrivate::AttemptResult QMailStorePrivate::attemptRegisterStatusBit(const QString &name, const QString &context, int maximum, 
+QMailStorePrivate::AttemptResult QMailStorePrivate::attemptRegisterStatusBit(const QString &name, const QString &context, int maximum,
                                                                              Transaction &t, bool commitOnSuccess)
 {
     int highest = 0;
 
     {
-        // Find the highest 
+        // Find the highest
         QSqlQuery query(simpleQuery("SELECT MAX(statusbit) FROM mailstatusflags WHERE context=?",
                                     QVariantList() << context,
                                     "mailstatusflags register select"));
@@ -6226,8 +6735,8 @@ QMailStorePrivate::AttemptResult QMailStorePrivate::attemptRegisterStatusBit(con
     return Success;
 }
 
-QMailStorePrivate::AttemptResult QMailStorePrivate::attemptMessageId(const QString &uid, const QMailAccountId &accountId, 
-                                                                     quint64 *result, 
+QMailStorePrivate::AttemptResult QMailStorePrivate::attemptMessageId(const QString &uid, const QMailAccountId &accountId,
+                                                                     quint64 *result,
                                                                      ReadLock &)
 {
     QSqlQuery query(simpleQuery("SELECT id FROM mailmessages WHERE serveruid=? AND parentaccountid=?",
@@ -6240,7 +6749,7 @@ QMailStorePrivate::AttemptResult QMailStorePrivate::attemptMessageId(const QStri
         *result = extractValue<quint64>(query.value(0));
         return Success;
     }
-        
+
     return Failure;
 }
 
@@ -6357,9 +6866,9 @@ QMailStorePrivate::AttemptResult QMailStorePrivate::messagePredecessor(QMailMess
                                         ")"
                                     ") "
                                     "ORDER BY stamp DESC",
-                                    QVariantList() << metaData->id().toULongLong() 
-                                                    << metaData->parentAccountId().toULongLong() 
-                                                    << metaData->date().toLocalTime() 
+                                    QVariantList() << metaData->id().toULongLong()
+                                                    << metaData->parentAccountId().toULongLong()
+                                                    << metaData->date().toLocalTime()
                                                     << baseSubject,
                                     "messagePredecessor mailmessages select query"));
         if (query.lastError().type() != QSqlError::NoError)
@@ -6646,7 +7155,7 @@ QMailStorePrivate::AttemptResult QMailStorePrivate::registerSubject(const QStrin
         if (query.next())
             subjectId = extractValue<quint64>(query.value(0));
     }
-    
+
     if (subjectId == 0) {
         QSqlQuery query(simpleQuery("INSERT INTO mailsubjects (basesubject) VALUES (?)",
                                     QVariantList() << baseSubject,
@@ -6671,7 +7180,7 @@ QMailStorePrivate::AttemptResult QMailStorePrivate::registerSubject(const QStrin
         if (query.next())
             count = extractValue<int>(query.value(0));
     }
-    
+
     if (count == 0) {
         QSqlQuery query(simpleQuery("INSERT INTO mailthreadsubjects (threadid,subjectid) SELECT threadid,? FROM mailthreadmessages WHERE messageid=?",
                                     QVariantList() << subjectId << messageId,
@@ -6716,8 +7225,8 @@ QMailStorePrivate::AttemptResult QMailStorePrivate::registerSubject(const QStrin
 
 bool QMailStorePrivate::checkPreconditions(const QMailFolder& folder, bool update)
 {
-    //if the parent is valid, check that it exists 
-    //if the account is valid, check that is exists 
+    //if the parent is valid, check that it exists
+    //if the account is valid, check that is exists
 
     if(!update)
     {
@@ -6727,7 +7236,7 @@ bool QMailStorePrivate::checkPreconditions(const QMailFolder& folder, bool updat
             return false;
         }
     }
-    else 
+    else
     {
         if(!folder.id().isValid())
         {
@@ -6753,21 +7262,30 @@ bool QMailStorePrivate::checkPreconditions(const QMailFolder& folder, bool updat
 
     if(folder.parentAccountId().isValid())
     {
-        if(!idExists(folder.parentAccountId(),"mailaccounts"))
+        Accounts::AccountId accountId = folder.parentAccountId().toULongLong();
+        QSharedPointer<Accounts::Account> ssoAccount(manager->account(accountId));
+
+        if (!ssoAccount)
         {
             qMailLog(Messaging) << "Parent account does not exist!";
             return false;
         }
+
+        if (!ssoAccount->supportsService("e-mail"))
+        {
+            qMailLog(Messaging) << "Parent account does not support e-mail service!";
+            return false;
+        }
     }
 
     return true;
 }
 
-bool QMailStorePrivate::deleteMessages(const QMailMessageKey& key, 
-                                       QMailStore::MessageRemovalOption option, 
-                                       QMailMessageIdList& deletedMessageIds, 
-                                       QStringList& expiredContent, 
-                                       QMailMessageIdList& updatedMessageIds, 
+bool QMailStorePrivate::deleteMessages(const QMailMessageKey& key,
+                                       QMailStore::MessageRemovalOption option,
+                                       QMailMessageIdList& deletedMessageIds,
+                                       QStringList& expiredContent,
+                                       QMailMessageIdList& updatedMessageIds,
                                        QMailFolderIdList& modifiedFolderIds,
                                        QMailAccountIdList& modifiedAccountIds)
 {
@@ -6790,7 +7308,7 @@ bool QMailStorePrivate::deleteMessages(const QMailMessageKey& key,
         while (query.next()) {
             QMailMessageId messageId(extractValue<quint64>(query.value(0)));
             deletedMessageIds.append(messageId);
-            
+
             QString contentUri(extractValue<QString>(query.value(1)));
             if (!contentUri.isEmpty())
                 expiredContent.append(contentUri);
@@ -6976,13 +7494,13 @@ bool QMailStorePrivate::deleteMessages(const QMailMessageKey& key,
     return true;
 }
 
-bool QMailStorePrivate::deleteFolders(const QMailFolderKey& key, 
-                                      QMailStore::MessageRemovalOption option, 
-                                      QMailFolderIdList& deletedFolderIds, 
-                                      QMailMessageIdList& deletedMessageIds, 
-                                      QStringList& expiredContent, 
-                                      QMailMessageIdList& updatedMessageIds, 
-                                      QMailFolderIdList& modifiedFolderIds, 
+bool QMailStorePrivate::deleteFolders(const QMailFolderKey& key,
+                                      QMailStore::MessageRemovalOption option,
+                                      QMailFolderIdList& deletedFolderIds,
+                                      QMailMessageIdList& deletedMessageIds,
+                                      QStringList& expiredContent,
+                                      QMailMessageIdList& updatedMessageIds,
+                                      QMailFolderIdList& modifiedFolderIds,
                                       QMailAccountIdList& modifiedAccountIds)
 {
     {
@@ -6998,16 +7516,16 @@ bool QMailStorePrivate::deleteFolders(const QMailFolderKey& key,
     }
 
     // No folders? Then we're already done
-    if (deletedFolderIds.isEmpty()) 
+    if (deletedFolderIds.isEmpty())
         return true;
 
     // Create a key to select messages in the folders to be deleted
     QMailMessageKey messagesKey(QMailMessageKey::parentFolderId(key));
-    
+
     // Delete all the messages contained by the folders we're deleting
     if (!deleteMessages(messagesKey, option, deletedMessageIds, expiredContent, updatedMessageIds, modifiedFolderIds, modifiedAccountIds))
         return false;
-    
+
     // Delete any references to these folders in the mailfolderlinks table
     QString statement("DELETE FROM mailfolderlinks WHERE %1 IN ( SELECT t0.id FROM mailfolders t0");
     statement += buildWhereClause(Key(key, "t0")) + " )";
@@ -7070,45 +7588,36 @@ bool QMailStorePrivate::deleteFolders(const QMailFolderKey& key,
     return true;
 }
 
-bool QMailStorePrivate::deleteAccounts(const QMailAccountKey& key, 
-                                       QMailAccountIdList& deletedAccountIds, 
-                                       QMailFolderIdList& deletedFolderIds, 
-                                       QMailMessageIdList& deletedMessageIds, 
-                                       QStringList& expiredContent, 
-                                       QMailMessageIdList& updatedMessageIds, 
-                                       QMailFolderIdList& modifiedFolderIds, 
+bool QMailStorePrivate::deleteAccounts(const QMailAccountKey& key,
+                                       QMailAccountIdList& deletedAccountIds,
+                                       QMailFolderIdList& deletedFolderIds,
+                                       QMailMessageIdList& deletedMessageIds,
+                                       QStringList& expiredContent,
+                                       QMailMessageIdList& updatedMessageIds,
+                                       QMailFolderIdList& modifiedFolderIds,
                                        QMailAccountIdList& modifiedAccountIds)
 {
-    {
-        // Get the identifiers for all the accounts we're deleting
-        QSqlQuery query(simpleQuery("SELECT t0.id FROM mailaccounts t0",
-                                    Key(key, "t0"),
-                                    "deleteAccounts info query"));
-        if (query.lastError().type() != QSqlError::NoError)
-            return false;
-
-        while (query.next())
-            deletedAccountIds.append(QMailAccountId(extractValue<quint64>(query.value(0))));
-    }
+    // Searching across all accounts inside SSO
+    deletedAccountIds << searchSSOAccounts(key);
 
     // No accounts? Then we're already done
-    if (deletedAccountIds.isEmpty()) 
+    if (deletedAccountIds.isEmpty())
         return true;
 
     // Create a key to select folders from the accounts to be deleted
-    QMailFolderKey foldersKey(QMailFolderKey::parentAccountId(key));
-    
+    QMailFolderKey foldersKey(QMailFolderKey::parentAccountId(deletedAccountIds));
+
     // We won't create new message removal records, since there will be no account to link them to
     QMailStore::MessageRemovalOption option(QMailStore::NoRemovalRecord);
 
     // Delete all the folders contained by the accounts we're deleting
     if (!deleteFolders(foldersKey, option, deletedFolderIds, deletedMessageIds, expiredContent, updatedMessageIds, modifiedFolderIds, modifiedAccountIds))
         return false;
-    
+
     // Also delete any messages belonging to these accounts, that aren't in folders owned by the accounts
 
     // Create a key to select messages for the accounts to be deleted
-    QMailMessageKey messagesKey(QMailMessageKey::parentAccountId(key));
+    QMailMessageKey messagesKey(QMailMessageKey::parentAccountId(deletedAccountIds));
 
     // Delete all the messages contained by the folders we're deleting
     if (!deleteMessages(messagesKey, option, deletedMessageIds, expiredContent, updatedMessageIds, modifiedFolderIds, modifiedAccountIds))
@@ -7133,30 +7642,15 @@ bool QMailStorePrivate::deleteAccounts(const QMailAccountKey& key,
     }
 
     {
-        // Remove any custom fields associated with these accounts
-        QSqlQuery query(simpleQuery("DELETE FROM mailaccountcustom",
-                                    Key("id", QMailAccountKey::id(deletedAccountIds)),
-                                    "deleteAccounts delete mailaccountcustom query"));
-        if (query.lastError().type() != QSqlError::NoError)
-            return false;
-    }
-
-    {
-        // Remove any configuration fields associated with these accounts
-        QSqlQuery query(simpleQuery("DELETE FROM mailaccountconfig",
-                                    Key("id", QMailAccountKey::id(deletedAccountIds)),
-                                    "deleteAccounts delete mailaccountconfig query"));
-        if (query.lastError().type() != QSqlError::NoError)
-            return false;
-    }
-
-    {
-        // Perform the account deletion
-        QSqlQuery query(simpleQuery("DELETE FROM mailaccounts",
-                                    Key("id", QMailAccountKey::id(deletedAccountIds)),
-                                    "deleteAccounts delete mailaccounts query"));
-        if (query.lastError().type() != QSqlError::NoError)
-            return false;
+        // Remove accounts from SSO
+        foreach (const QMailAccountId& accountID, deletedAccountIds)
+        {
+            QSharedPointer<Accounts::Account> ssoAccount(manager->account(accountID.toULongLong()));
+            Q_ASSERT(ssoAccount);
+            ssoAccount->remove();
+            if (!ssoAccount->syncAndBlock())
+                return false;
+        }
     }
 
     // Do not report any deleted entities as updated
@@ -7321,3 +7815,39 @@ void QMailStorePrivate::emitIpcNotification(QMailStoreImplementation::MessageUpd
     QMailStoreImplementation::emitIpcNotification(signal, ids);
 }
 
+QMailAccountIdList QMailStorePrivate::searchSSOAccounts(const QMailAccountKey& key, const QMailAccountSortKey& sortKey) const
+{
+    Accounts::AccountIdList accountIDList = manager->accountList("e-mail");
+
+    // Populate all E-Mail accounts
+    typedef QList<Accounts::Account*> AccountList;
+    QMailAccountIdList accountList;
+
+    foreach (Accounts::AccountId accountID, accountIDList)
+    {
+        Accounts::Account* ssoAccount = manager->account(accountID);
+        Q_ASSERT(ssoAccount);
+
+        Accounts::ServiceList services = ssoAccount->services("e-mail");
+        if (!services.count())
+        {
+            qMailLog(Messaging) << "Services not found, make sure that *.service and *.provider files are properly installed.";
+            return QMailAccountIdList();
+        }
+
+        Accounts::Service* service = services.first();
+        Q_ASSERT(service);
+        ssoAccount->selectService(service);
+
+        if (SSOAccountSatisfyTheKey(ssoAccount, key))
+            accountList.append(QMailAccountId(ssoAccount->id()));
+
+        delete ssoAccount;
+    }
+
+    /*
+     * TBD: Use sortKey to sort found accounts properly
+     */
+
+    return accountList;
+}
diff --git a/src/libraries/qtopiamail/qmailstore_p.h b/src/libraries/qtopiamail/qmailstore_p.h
index 0bcc387..9ae3980 100644
--- a/src/libraries/qtopiamail/qmailstore_p.h
+++ b/src/libraries/qtopiamail/qmailstore_p.h
@@ -56,6 +56,9 @@
 #include "qmailstoreimplementation_p.h"
 #include <QSqlDatabase>
 #include <QCache>
+#include <QDomDocument>
+#include <accounts-qt/manager.h>
+#include <accounts-qt/account.h>
 
 //#define QMAILSTORE_LOG_SQL //define to enable SQL query logging
 //#define QMAILSTORE_USE_RTTI //define if RTTI is available to assist debugging
@@ -180,7 +183,9 @@ public:
     static ValueType extractValue(const QVariant& var, const ValueType &defaultValue = ValueType());
 
     enum AttemptResult { Success = 0, Failure, DatabaseFailure };
-    
+
+    QMailAccountIdList searchSSOAccounts(const QMailAccountKey& key, const QMailAccountSortKey& sortKey = QMailAccountSortKey()) const;
+
 private:
     friend class Transaction;
     friend class ReadLock;
@@ -254,7 +259,7 @@ private:
 
     bool idValueExists(quint64 id, const QString& table);
 
-    bool idExists(const QMailAccountId& id, const QString& table = QString());
+    bool idExists(const QMailAccountId& id);
     bool idExists(const QMailFolderId& id, const QString& table = QString());
     bool idExists(const QMailMessageId& id, const QString& table = QString());
 
@@ -302,152 +307,156 @@ private:
     template<typename AccessType, typename FunctionType>
     bool repeatedly(FunctionType func, const QString &description, Transaction *t = 0) const;
 
+    AttemptResult addAccountCustomFields(QSharedPointer<Accounts::Account>& ssoAccount, const QMap<QString, QString> &fields);
+    AttemptResult updateAccountCustomFields(QSharedPointer<Accounts::Account>& ssoAccount, const QMap<QString, QString> &fields);
+    AttemptResult accountCustomFields(QSharedPointer<Accounts::Account>& ssoAccount, QMap<QString, QString>* fields);
+
     AttemptResult addCustomFields(quint64 id, const QMap<QString, QString> &fields, const QString &tableName);
     AttemptResult updateCustomFields(quint64 id, const QMap<QString, QString> &fields, const QString &tableName);
     AttemptResult customFields(quint64 id, QMap<QString, QString> *fields, const QString &tableName);
 
-    AttemptResult attemptAddAccount(QMailAccount *account, QMailAccountConfiguration* config, 
-                                    QMailAccountIdList *addedAccountIds, 
+    AttemptResult attemptAddAccount(QMailAccount *account, QMailAccountConfiguration* config,
+                                    QMailAccountIdList *addedAccountIds,
                                     Transaction &t, bool commitOnSuccess);
 
-    AttemptResult attemptAddFolder(QMailFolder *folder, 
+    AttemptResult attemptAddFolder(QMailFolder *folder,
                                    QMailFolderIdList *addedFolderIds, QMailAccountIdList *modifiedAccountIds,
                                    Transaction &t, bool commitOnSuccess);
 
     AttemptResult attemptAddMessage(QMailMessage *message, const QString &identifier, const QStringList &references,
-                                    QMailMessageIdList *addedMessageIds, QMailMessageIdList *updatedMessageIds, QMailFolderIdList *modifiedFolderIds, QMailAccountIdList *modifiedAccountIds, 
+                                    QMailMessageIdList *addedMessageIds, QMailMessageIdList *updatedMessageIds, QMailFolderIdList *modifiedFolderIds, QMailAccountIdList *modifiedAccountIds,
                                     Transaction &t, bool commitOnSuccess);
 
     AttemptResult attemptAddMessage(QMailMessageMetaData *metaData, const QString &identifier, const QStringList &references,
-                                    QMailMessageIdList *addedMessageIds, QMailMessageIdList *updatedMessageIds, QMailFolderIdList *modifiedFolderIds, QMailAccountIdList *modifiedAccountIds, 
+                                    QMailMessageIdList *addedMessageIds, QMailMessageIdList *updatedMessageIds, QMailFolderIdList *modifiedFolderIds, QMailAccountIdList *modifiedAccountIds,
                                     Transaction &t, bool commitOnSuccess);
 
-    AttemptResult attemptRemoveAccounts(const QMailAccountKey &key, 
+    AttemptResult attemptRemoveAccounts(const QMailAccountKey &key,
                                         QMailAccountIdList *deletedAccounts, QMailFolderIdList *deletedFolders, QMailMessageIdList *deletedMessages, QMailMessageIdList *updatedMessageIds, QMailFolderIdList *modifiedFolderIds, QMailAccountIdList *modifiedAccountIds,
                                         Transaction &t, bool commitOnSuccess);
 
-    AttemptResult attemptRemoveFolders(const QMailFolderKey &key, QMailStore::MessageRemovalOption option, 
+    AttemptResult attemptRemoveFolders(const QMailFolderKey &key, QMailStore::MessageRemovalOption option,
                                        QMailFolderIdList *deletedFolders, QMailMessageIdList *deletedMessages, QMailMessageIdList *updatedMessageIds, QMailFolderIdList *modifiedFolderIds, QMailAccountIdList *modifiedAccountIds,
                                        Transaction &t, bool commitOnSuccess);
 
-    AttemptResult attemptRemoveMessages(const QMailMessageKey &key, QMailStore::MessageRemovalOption option, 
+    AttemptResult attemptRemoveMessages(const QMailMessageKey &key, QMailStore::MessageRemovalOption option,
                                         QMailMessageIdList *deletedMessages, QMailMessageIdList *updatedMessageIds, QMailFolderIdList *modifiedFolderIds, QMailAccountIdList *modifiedAccountIds,
                                         Transaction &t, bool commitOnSuccess);
 
-    AttemptResult attemptUpdateAccount(QMailAccount *account, QMailAccountConfiguration *config, 
+    AttemptResult attemptUpdateAccount(QMailAccount *account, QMailAccountConfiguration *config,
                                        QMailAccountIdList *updatedAccountIds,
                                        Transaction &t, bool commitOnSuccess);
 
-    AttemptResult attemptUpdateAccountConfiguration(QMailAccountConfiguration *config, 
+    AttemptResult attemptUpdateAccountConfiguration(QMailAccountConfiguration *config,
                                                     QMailAccountIdList *updatedAccountIds,
                                                     Transaction &t, bool commitOnSuccess);
 
-    AttemptResult attemptUpdateFolder(QMailFolder *folder, 
+    AttemptResult attemptUpdateFolder(QMailFolder *folder,
                                       QMailFolderIdList *updatedFolderIds, QMailAccountIdList *modifiedAccountIds,
                                       Transaction &t, bool commitOnSuccess);
 
-    AttemptResult attemptUpdateMessage(QMailMessageMetaData *metaData, QMailMessage *mail, 
+    AttemptResult attemptUpdateMessage(QMailMessageMetaData *metaData, QMailMessage *mail,
                                        QMailMessageIdList *updatedMessageIds, QMailMessageIdList *modifiedMessageIds, QMailFolderIdList *modifiedFolderIds, QMailAccountIdList *modifiedAccountIds,
                                        Transaction &t, bool commitOnSuccess);
 
-    AttemptResult attemptUpdateMessagesMetaData(const QMailMessageKey &key, const QMailMessageKey::Properties &props, const QMailMessageMetaData &data, 
+    AttemptResult attemptUpdateMessagesMetaData(const QMailMessageKey &key, const QMailMessageKey::Properties &props, const QMailMessageMetaData &data,
                                                 QMailMessageIdList *updatedMessageIds, QMailFolderIdList *modifiedFolderIds, QMailAccountIdList *modifiedAccountIds,
-                                                Transaction &t, bool commitOnSuccess); 
+                                                Transaction &t, bool commitOnSuccess);
 
-    AttemptResult attemptUpdateMessagesStatus(const QMailMessageKey &key, quint64 status, bool set, 
-                                              QMailMessageIdList *updatedMessageIds, QMailFolderIdList *modifiedFolderIds, QMailAccountIdList *modifiedAccountIds, 
+    AttemptResult attemptUpdateMessagesStatus(const QMailMessageKey &key, quint64 status, bool set,
+                                              QMailMessageIdList *updatedMessageIds, QMailFolderIdList *modifiedFolderIds, QMailAccountIdList *modifiedAccountIds,
                                               Transaction &t, bool commitOnSuccess);
 
-    AttemptResult attemptRestoreToPreviousFolder(const QMailMessageKey &key, 
-                                                 QMailMessageIdList *updatedMessageIds, QMailFolderIdList *modifiedFolderIds, QMailAccountIdList *modifiedAccountIds, 
+    AttemptResult attemptRestoreToPreviousFolder(const QMailMessageKey &key,
+                                                 QMailMessageIdList *updatedMessageIds, QMailFolderIdList *modifiedFolderIds, QMailAccountIdList *modifiedAccountIds,
                                                  Transaction &t, bool commitOnSuccess);
 
     AttemptResult attemptPurgeMessageRemovalRecords(const QMailAccountId &accountId, const QStringList &serverUids,
                                                     Transaction &t, bool commitOnSuccess);
 
-    AttemptResult attemptCountAccounts(const QMailAccountKey &key, int *result, 
+    AttemptResult attemptCountAccounts(const QMailAccountKey &key, int *result,
                                        ReadLock &);
 
-    AttemptResult attemptCountFolders(const QMailFolderKey &key, int *result, 
+    AttemptResult attemptCountFolders(const QMailFolderKey &key, int *result,
                                       ReadLock &);
 
-    AttemptResult attemptCountMessages(const QMailMessageKey &key, 
-                                       int *result, 
+    AttemptResult attemptCountMessages(const QMailMessageKey &key,
+                                       int *result,
                                        ReadLock &);
 
-    AttemptResult attemptSizeOfMessages(const QMailMessageKey &key, 
-                                        int *result, 
+    AttemptResult attemptSizeOfMessages(const QMailMessageKey &key,
+                                        int *result,
                                         ReadLock &);
 
     AttemptResult attemptQueryAccounts(const QMailAccountKey &key, const QMailAccountSortKey &sortKey, uint limit, uint offset,
-                                       QMailAccountIdList *ids, 
+                                       QMailAccountIdList *ids,
                                        ReadLock &);
 
     AttemptResult attemptQueryFolders(const QMailFolderKey &key, const QMailFolderSortKey &sortKey, uint limit, uint offset,
-                                      QMailFolderIdList *ids, 
+                                      QMailFolderIdList *ids,
                                       ReadLock &);
 
     AttemptResult attemptQueryMessages(const QMailMessageKey &key, const QMailMessageSortKey &sortKey, uint limit, uint offset,
-                                       QMailMessageIdList *ids, 
+                                       QMailMessageIdList *ids,
                                        ReadLock &);
 
-    AttemptResult attemptAccount(const QMailAccountId &id, 
-                                 QMailAccount *result, 
+    AttemptResult attemptAccount(const QMailAccountId &id,
+                                 QMailAccount *result,
                                  ReadLock &);
 
-    AttemptResult attemptAccountConfiguration(const QMailAccountId &id, 
-                                              QMailAccountConfiguration *result, 
+    AttemptResult attemptAccountConfiguration(const QMailAccountId &id,
+                                              QMailAccountConfiguration *result,
                                               ReadLock &);
 
-    AttemptResult attemptFolder(const QMailFolderId &id, 
-                                QMailFolder *result, 
+    AttemptResult attemptFolder(const QMailFolderId &id,
+                                QMailFolder *result,
                                 ReadLock &);
 
-    AttemptResult attemptMessage(const QMailMessageId &id, 
-                                 QMailMessage *result, 
+    AttemptResult attemptMessage(const QMailMessageId &id,
+                                 QMailMessage *result,
                                  ReadLock &);
 
-    AttemptResult attemptMessage(const QString &uid, const QMailAccountId &accountId, 
-                                 QMailMessage *result, 
+    AttemptResult attemptMessage(const QString &uid, const QMailAccountId &accountId,
+                                 QMailMessage *result,
                                  ReadLock &);
 
-    AttemptResult attemptMessageMetaData(const QMailMessageId &id, 
-                                         QMailMessageMetaData *result, 
+    AttemptResult attemptMessageMetaData(const QMailMessageId &id,
+                                         QMailMessageMetaData *result,
                                          ReadLock &);
 
-    AttemptResult attemptMessageMetaData(const QString &uid, const QMailAccountId &accountId, 
-                                         QMailMessageMetaData *result, 
+    AttemptResult attemptMessageMetaData(const QString &uid, const QMailAccountId &accountId,
+                                         QMailMessageMetaData *result,
                                          ReadLock &);
 
-    AttemptResult attemptMessagesMetaData(const QMailMessageKey& key, const QMailMessageKey::Properties &properties, QMailStore::ReturnOption option, 
-                                          QMailMessageMetaDataList *result, 
+    AttemptResult attemptMessagesMetaData(const QMailMessageKey& key, const QMailMessageKey::Properties &properties, QMailStore::ReturnOption option,
+                                          QMailMessageMetaDataList *result,
                                           ReadLock &);
 
-    AttemptResult attemptMessageRemovalRecords(const QMailAccountId &accountId, const QMailFolderId &parentFolderId, 
+    AttemptResult attemptMessageRemovalRecords(const QMailAccountId &accountId, const QMailFolderId &parentFolderId,
                                                QMailMessageRemovalRecordList *result,
                                                ReadLock &);
 
-    AttemptResult attemptMessageFolderIds(const QMailMessageKey &key, 
-                                          QMailFolderIdList *result, 
+    AttemptResult attemptMessageFolderIds(const QMailMessageKey &key,
+                                          QMailFolderIdList *result,
                                           ReadLock &);
 
-    AttemptResult attemptFolderAccountIds(const QMailFolderKey &key, 
-                                          QMailAccountIdList *result, 
+    AttemptResult attemptFolderAccountIds(const QMailFolderKey &key,
+                                          QMailAccountIdList *result,
                                           ReadLock &);
 
-    AttemptResult attemptFolderAncestorIds(const QMailFolderIdList &ids, 
-                                           QMailFolderIdList *result, 
+    AttemptResult attemptFolderAncestorIds(const QMailFolderIdList &ids,
+                                           QMailFolderIdList *result,
                                            ReadLock &);
 
-    AttemptResult attemptStatusBit(const QString &name, const QString &context, 
-                                   int *result, 
+    AttemptResult attemptStatusBit(const QString &name, const QString &context,
+                                   int *result,
                                    ReadLock &);
 
-    AttemptResult attemptRegisterStatusBit(const QString &name, const QString &context, int maximum, 
+    AttemptResult attemptRegisterStatusBit(const QString &name, const QString &context, int maximum,
                                            Transaction &t, bool commitOnSuccess);
 
-    AttemptResult attemptMessageId(const QString &uid, const QMailAccountId &accountId, 
-                                   quint64 *result, 
+    AttemptResult attemptMessageId(const QString &uid, const QMailAccountId &accountId,
+                                   quint64 *result,
                                    ReadLock &);
 
     AttemptResult affectedByMessageIds(const QMailMessageIdList &messages, QMailFolderIdList *folderIds, QMailAccountIdList *accountIds) const;
@@ -462,7 +471,7 @@ private:
 
     AttemptResult registerSubject(const QString &baseSubject, quint64 messageId, const QMailMessageId &predecessorId, bool missingAncestor);
 
-    QMailAccount extractAccount(const QSqlRecord& r);
+    QMailAccount extractAccount(const QSharedPointer<Accounts::Account>& ssoAccount);
     QMailFolder extractFolder(const QSqlRecord& r);
     QMailMessageMetaData extractMessageMetaData(const QSqlRecord& r, QMailMessageKey::Properties recordProperties, const QMailMessageKey::Properties& properties = allMessageProperties());
     QMailMessageMetaData extractMessageMetaData(const QSqlRecord& r, const QMap<QString, QString> &customFields, const QMailMessageKey::Properties& properties = allMessageProperties());
@@ -491,7 +500,7 @@ private:
     static void extractMessageMetaData(const QSqlRecord& r, QMailMessageKey::Properties recordProperties, const QMailMessageKey::Properties& properties, QMailMessageMetaData* metaData);
 
 private:
-    template <typename T, typename KeyType> 
+    template <typename T, typename KeyType>
     class Cache
     {
     public:
@@ -508,7 +517,7 @@ private:
         QCache<KeyType,T> mCache;
     };
 
-    template <typename T, typename ID> 
+    template <typename T, typename ID>
     class IdCache : public Cache<T, quint64>
     {
     public:
@@ -521,7 +530,7 @@ private:
     };
 
     mutable QSqlDatabase database;
-    
+
     mutable QMailMessageIdList lastQueryMessageResult;
 
     mutable IdCache<QMailMessageMetaData, QMailMessageId> messageCache;
@@ -540,6 +549,8 @@ private:
     ProcessReadLock *readLock;
 
     static ProcessMutex *contentMutex;
+
+    Accounts::Manager* manager;
 };
 
 template <typename ValueType>
@@ -559,18 +570,18 @@ ValueType QMailStorePrivate::extractValue(const QVariant &var, const ValueType &
 }
 
 
-template <typename T, typename KeyType> 
+template <typename T, typename KeyType>
 QMailStorePrivate::Cache<T, KeyType>::Cache(unsigned int cacheSize)
     : mCache(cacheSize)
 {
 }
 
-template <typename T, typename KeyType> 
+template <typename T, typename KeyType>
 QMailStorePrivate::Cache<T, KeyType>::~Cache()
 {
 }
 
-template <typename T, typename KeyType> 
+template <typename T, typename KeyType>
 T QMailStorePrivate::Cache<T, KeyType>::lookup(const KeyType& key) const
 {
     if (T* cachedItem = mCache.object(key))
@@ -579,32 +590,32 @@ T QMailStorePrivate::Cache<T, KeyType>::lookup(const KeyType& key) const
     return T();
 }
 
-template <typename T, typename KeyType> 
+template <typename T, typename KeyType>
 void QMailStorePrivate::Cache<T, KeyType>::insert(const KeyType& key, const T& item)
 {
     mCache.insert(key,new T(item));
 }
 
-template <typename T, typename KeyType> 
+template <typename T, typename KeyType>
 bool QMailStorePrivate::Cache<T, KeyType>::contains(const KeyType& key) const
 {
     return mCache.contains(key);
 }
 
-template <typename T, typename KeyType> 
+template <typename T, typename KeyType>
 void QMailStorePrivate::Cache<T, KeyType>::remove(const KeyType& key)
 {
     mCache.remove(key);
 }
 
-template <typename T, typename KeyType> 
+template <typename T, typename KeyType>
 void QMailStorePrivate::Cache<T, KeyType>::clear()
 {
     mCache.clear();
 }
 
 
-template <typename T, typename ID> 
+template <typename T, typename ID>
 T QMailStorePrivate::IdCache<T, ID>::lookup(const ID& id) const
 {
     if (id.isValid()) {
@@ -614,7 +625,7 @@ T QMailStorePrivate::IdCache<T, ID>::lookup(const ID& id) const
     return T();
 }
 
-template <typename T, typename ID> 
+template <typename T, typename ID>
 void QMailStorePrivate::IdCache<T, ID>::insert(const T& item)
 {
     if (item.id().isValid()) {
@@ -622,13 +633,13 @@ void QMailStorePrivate::IdCache<T, ID>::insert(const T& item)
     }
 }
 
-template <typename T, typename ID> 
+template <typename T, typename ID>
 bool QMailStorePrivate::IdCache<T, ID>::contains(const ID& id) const
 {
     return Cache<T, quint64>::contains(id.toULongLong());
 }
 
-template <typename T, typename ID> 
+template <typename T, typename ID>
 void QMailStorePrivate::IdCache<T, ID>::remove(const ID& id)
 {
     Cache<T, quint64>::remove(id.toULongLong());
diff --git a/src/libraries/qtopiamail/qtopiamail.pro b/src/libraries/qtopiamail/qtopiamail.pro
index 08344a9..15f0d07 100644
--- a/src/libraries/qtopiamail/qtopiamail.pro
+++ b/src/libraries/qtopiamail/qtopiamail.pro
@@ -1,153 +1,173 @@
-TEMPLATE = lib 
-CONFIG += warn_on
+TEMPLATE = lib
+CONFIG += warn_on create_pc create_prl link_pkgconfig
 
 include(../../../common.pri)
 
+QT *= sql network xml
+
 TARGET = qtopiamail
-target.path += $$QMF_INSTALL_ROOT/lib 
+target.path += $$QMF_INSTALL_ROOT/lib
+
 INSTALLS += target
 
-DEFINES += QT_BUILD_QCOP_LIB QTOPIAMAIL_INTERNAL
 win32: {
     # QLocalSocket is broken on win32 prior to 4.5.2
     lessThan(QT_MAJOR_VERSION,5):lessThan(QT_MINOR_VERSION,6):lessThan(QT_PATCH_VERSION,2):DEFINES += QT_NO_QCOP_LOCAL_SOCKET
 }
 
-QT *= sql network
 symbian: {
     LIBS += -lefsrv
     MMP_RULES += EXPORTUNFROZEN
 }
 
-DEPENDPATH += .
+PKGCONFIG += accounts-qt
+
+DEFINES += QT_BUILD_QCOP_LIB QTOPIAMAIL_INTERNAL
+
+DEPENDPATH  += .
 
 INCLUDEPATH += support
 
 HEADERS += bind_p.h \
-           locks_p.h \
-           longstream_p.h \
-           longstring_p.h \
-           mailkeyimpl_p.h \
-           mailsortkeyimpl_p.h \
-           qmailaccount.h \
-           qmailaccountconfiguration.h \
-           qmailaccountkey.h \
-           qmailaccountkey_p.h \
-           qmailaccountlistmodel.h \
-           qmailaccountsortkey.h \
-           qmailaccountsortkey_p.h \
-           qmailaddress.h \
-           qmailcodec.h \
-           qmailcontentmanager.h \
-           qmaildatacomparator.h \
-           qmailfolder.h \
-           qmailfolderfwd.h \
-           qmailfolderkey.h \
-           qmailfolderkey_p.h \
-           qmailfoldersortkey.h \
-           qmailfoldersortkey_p.h \
-           qmailid.h \
-           qmailkeyargument.h \
-           qmailmessage_p.h \
-           qmailmessage.h \
-           qmailmessagefwd.h \
-           qmailmessagekey.h \
-           qmailmessagekey_p.h \
-           qmailmessagelistmodel.h \
-           qmailmessagemodelbase.h \
-           qmailmessageremovalrecord.h \
-           qmailmessageserver.h \
-           qmailmessageset_p.h \
-           qmailmessageset.h \
-           qmailmessagesortkey.h \
-           qmailmessagesortkey_p.h \
-           qmailmessagethreadedmodel.h \
-           qmailserviceaction_p.h \
-           qmailserviceaction.h \
-           qmailsortkeyargument.h \
-           qmailstore.h \
-           qmailstore_p.h \
-           qmailstoreimplementation_p.h \
-           qmailtimestamp.h \
-           qprivateimplementation.h \
-           qprivateimplementationdef.h \
-           support/qmailglobal.h \
-           support/qmaillog.h \
-           support/qmailnamespace.h \
-           support/qcopadaptor.h \
-           support/qcopapplicationchannel.h \
-           support/qcopchannel.h \
-           support/qcopchannel_p.h \
-           support/qcopchannelmonitor.h \
-           support/qcopserver.h \
-           support/qmailpluginmanager.h \
-           support/qringbuffer_p.h
+    locks_p.h \
+    longstream_p.h \
+    longstring_p.h \
+    mailkeyimpl_p.h \
+    mailsortkeyimpl_p.h \
+    qmailaccount.h \
+    qmailaccountconfiguration.h \
+    qmailaccountkey.h \
+    qmailaccountkey_p.h \
+    qmailaccountlistmodel.h \
+    qmailaccountsortkey.h \
+    qmailaccountsortkey_p.h \
+    qmailaddress.h \
+    qmailcodec.h \
+    qmailcontentmanager.h \
+    qmaildatacomparator.h \
+    qmailfolder.h \
+    qmailfolderfwd.h \
+    qmailfolderkey.h \
+    qmailfolderkey_p.h \
+    qmailfoldersortkey.h \
+    qmailfoldersortkey_p.h \
+    qmailid.h \
+    qmailkeyargument.h \
+    qmailmessage_p.h \
+    qmailmessage.h \
+    qmailmessagefwd.h \
+    qmailmessagekey.h \
+    qmailmessagekey_p.h \
+    qmailmessagelistmodel.h \
+    qmailmessagemodelbase.h \
+    qmailmessageremovalrecord.h \
+    qmailmessageserver.h \
+    qmailmessageset_p.h \
+    qmailmessageset.h \
+    qmailmessagesortkey.h \
+    qmailmessagesortkey_p.h \
+    qmailmessagethreadedmodel.h \
+    qmailserviceaction_p.h \
+    qmailserviceaction.h \
+    qmailsortkeyargument.h \
+    qmailstore.h \
+    qmailstore_p.h \
+    qmailstoreimplementation_p.h \
+    qmailtimestamp.h \
+    qprivateimplementation.h \
+    qprivateimplementationdef.h \
+    support/qmailglobal.h \
+    support/qmaillog.h \
+    support/qmailnamespace.h \
+    support/qcopadaptor.h \
+    support/qcopapplicationchannel.h \
+    support/qcopchannel.h \
+    support/qcopchannel_p.h \
+    support/qcopchannelmonitor.h \
+    support/qcopserver.h \
+    support/qmailpluginmanager.h \
+    support/qringbuffer_p.h \
+    support/qmailipc.h 
 
 SOURCES += longstream.cpp \
-           longstring.cpp \
-           qmailaccount.cpp \
-           qmailaccountconfiguration.cpp \
-           qmailaccountkey.cpp \
-           qmailaccountlistmodel.cpp \
-           qmailaccountsortkey.cpp \
-           qmailaddress.cpp \
-           qmailcodec.cpp \
-           qmailcontentmanager.cpp \
-           qmaildatacomparator.cpp \
-           qmailfolder.cpp \
-           qmailfolderkey.cpp \
-           qmailfoldersortkey.cpp \
-           qmailid.cpp \
-           qmailinstantiations.cpp \
-           qmailkeyargument.cpp \
-           qmailmessage.cpp \
-           qmailmessagefwd.cpp \
-           qmailmessagekey.cpp \
-           qmailmessagelistmodel.cpp \
-           qmailmessagemodelbase.cpp \
-           qmailmessageremovalrecord.cpp \
-           qmailmessageserver.cpp \
-           qmailmessageset.cpp \
-           qmailmessagesortkey.cpp \
-           qmailmessagethreadedmodel.cpp \
-           qmailserviceaction.cpp \
-           qmailstore.cpp \
-           qmailstore_p.cpp \
-           qmailstoreimplementation_p.cpp \
-           qmailtimestamp.cpp \
-           qprivateimplementation.cpp \
-           support/qmailnamespace.cpp \
-           support/qmaillog.cpp \
-           support/qcopadaptor.cpp \
-           support/qcopapplicationchannel.cpp \
-           support/qcopchannel.cpp \
-           support/qcopchannelmonitor.cpp \
-           support/qcopserver.cpp \
-           support/qmailpluginmanager.cpp
-
-win32: {
-    SOURCES += locks_win32.cpp
-} else {
-    SOURCES += locks.cpp
-}
+    longstring.cpp \
+    qmailaccount.cpp \
+    qmailaccountconfiguration.cpp \
+    qmailaccountkey.cpp \
+    qmailaccountlistmodel.cpp \
+    qmailaccountsortkey.cpp \
+    qmailaddress.cpp \
+    qmailcodec.cpp \
+    qmailcontentmanager.cpp \
+    qmaildatacomparator.cpp \
+    qmailfolder.cpp \
+    qmailfolderkey.cpp \
+    qmailfoldersortkey.cpp \
+    qmailid.cpp \
+    qmailinstantiations.cpp \
+    qmailkeyargument.cpp \
+    qmailmessage.cpp \
+    qmailmessagefwd.cpp \
+    qmailmessagekey.cpp \
+    qmailmessagelistmodel.cpp \
+    qmailmessagemodelbase.cpp \
+    qmailmessageremovalrecord.cpp \
+    qmailmessageserver.cpp \
+    qmailmessageset.cpp \
+    qmailmessagesortkey.cpp \
+    qmailmessagethreadedmodel.cpp \
+    qmailserviceaction.cpp \
+    qmailstore.cpp \
+    qmailstore_p.cpp \
+    qmailstoreimplementation_p.cpp \
+    qmailtimestamp.cpp \
+    qprivateimplementation.cpp \
+    support/qmailnamespace.cpp \
+    support/qmaillog.cpp \
+    support/qcopadaptor.cpp \
+    support/qcopapplicationchannel.cpp \
+    support/qcopchannel.cpp \
+    support/qcopchannelmonitor.cpp \
+    support/qcopserver.cpp \
+    support/qmailpluginmanager.cpp
+    
+win32::SOURCES += locks_win32.cpp
+else:SOURCES += locks.cpp
 
 RESOURCES += qtopiamail.qrc \
-             qtopiamail_icons.qrc \
-             qtopiamail_qt.qrc
-
+    qtopiamail_icons.qrc \
+    qtopiamail_qt.qrc
+    
 TRANSLATIONS += libqtopiamail-ar.ts \
-                libqtopiamail-de.ts \
-                libqtopiamail-en_GB.ts \
-                libqtopiamail-en_SU.ts \
-                libqtopiamail-en_US.ts \
-                libqtopiamail-es.ts \
-                libqtopiamail-fr.ts \
-                libqtopiamail-it.ts \
-                libqtopiamail-ja.ts \
-                libqtopiamail-ko.ts \
-                libqtopiamail-pt_BR.ts \
-                libqtopiamail-zh_CN.ts \
-                libqtopiamail-zh_TW.ts
-
-include(../../common.pri)
+    libqtopiamail-de.ts \
+    libqtopiamail-en_GB.ts \
+    libqtopiamail-en_SU.ts \
+    libqtopiamail-en_US.ts \
+    libqtopiamail-es.ts \
+    libqtopiamail-fr.ts \
+    libqtopiamail-it.ts \
+    libqtopiamail-ja.ts \
+    libqtopiamail-ko.ts \
+    libqtopiamail-pt_BR.ts \
+    libqtopiamail-zh_CN.ts \
+    libqtopiamail-zh_TW.ts
+    
+# Install headers
+headers.files = $$HEADERS include/*
+headers.path  = $$QMF_INSTALL_ROOT/include/qmf
+
+# Install generic SSO provider description
+sso_providers.files = share/GenericProvider.provider
+sso_providers.path  = $$QMF_INSTALL_ROOT/share/accounts/providers
+
+# Install generic SSO service description
+sso_services.files = share/GenericEmail.service
+sso_services.path  = $$QMF_INSTALL_ROOT/share/accounts/services
+
+INSTALLS += headers sso_providers sso_services
+
+# Install pkgconfig file
+QMAKE_PKGCONFIG_LIBDIR  = $$target.path
+QMAKE_PKGCONFIG_INCDIR  = $$headers.path
+QMAKE_PKGCONFIG_DESTDIR = pkgconfig
 
diff --git a/src/libraries/qtopiamail/share/GenericEmail.service b/src/libraries/qtopiamail/share/GenericEmail.service
new file mode 100644
index 0000000..3aed235
--- /dev/null
+++ b/src/libraries/qtopiamail/share/GenericEmail.service
@@ -0,0 +1,65 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<service id="GenericEmail">
+  <type>e-mail</type>
+  <name>Email Mailbox</name>
+  <icon>generic_email</icon>
+  <provider>GenericProvider</provider>
+
+  <!-- default settings (account settings have precedence over these) -->
+  <template>
+    <setting name="type" type="i">0</setting>
+    <setting name="name">Generic Email Account</setting>
+    <setting name="status" type="i">0</setting>
+    <setting name="signature"></setting>
+    <setting name="emailaddress"></setting>
+    <setting name="enabled" type="b">false</setting>
+    <!-- Exclude default configuration
+    <pop3>
+      <setting name="server">pop3.example.com</setting>
+      <setting name="port" type="i">143</setting>
+      <setting name="encryption" type="b">0</setting>
+      <setting name="canDelete" type="b">0</setting>
+      <setting name="autoDownload" type="b">0</setting>
+      <setting name="maxSize" type="i">102400</setting>
+      <setting name="checkInterval" type="i">-1</setting>
+      <setting name="intervalCheckRoamingEnabled" type="i">0</setting>      
+    </pop3>
+    <imap4>
+       <setting name="server">imap.example.com</setting>
+       <setting name="port" type="i">110</setting>
+       <setting name="encryption" type="b">0</setting>
+       <setting name="canDelete" type="b">0</setting>
+       <setting name="autoDownload" type="b">0</setting>
+       <setting name="maxSize" type="i">102400</setting>
+       <setting name="pushEnabled" type="b">0</setting>
+       <setting name="baseFolder"></setting>
+       <setting name="draftsFolder"></setting>
+       <setting name="trashFolder"></setting>
+       <setting name="junkFolder"></setting>
+       <setting name="checkInterval" type="i">-1</setting>
+       <setting name="intervalCheckRoamingEnabled" type="b">0</setting>
+    </imap4>
+    <smtp>
+       <setting name="address">email@example.com</setting>
+       <setting name="server">smtp.example.com</setting>
+       <setting name="port" type="i">25</setting>
+       <setting name="authentication" type="b">0</setting>
+       <setting name="encryption" type="b">0</setting>
+     </smtp>
+     -->
+  </template>
+
+  <!-- preview account -->
+  <preview>
+    <parameters>
+      <setting name="server">talkdemo.google.com</setting>
+      <setting name="account">googledemo@gmail.com</setting>
+      <setting name="password">demo</setting>
+    </parameters>
+    <setting name="display_name">GTalk demo</setting>
+  </preview>
+
+  <!-- type-specific data -->
+  <type_data>
+  </type_data>
+</service>
diff --git a/src/libraries/qtopiamail/share/GenericProvider.provider b/src/libraries/qtopiamail/share/GenericProvider.provider
new file mode 100644
index 0000000..e5d7303
--- /dev/null
+++ b/src/libraries/qtopiamail/share/GenericProvider.provider
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<provider id="GenericProvider">
+  <name>Generic Service Provider</name>
+  <icon>generic_provider</icon>
+</provider>
diff --git a/src/libraries/qtopiamail/support/qmaillog.h b/src/libraries/qtopiamail/support/qmaillog.h
index fae4f9e..f57e0a4 100644
--- a/src/libraries/qtopiamail/support/qmaillog.h
+++ b/src/libraries/qtopiamail/support/qmaillog.h
@@ -122,6 +122,7 @@ QLOG_ENABLE(Messaging)
 QLOG_ENABLE(IMAP)
 QLOG_ENABLE(SMTP)
 QLOG_ENABLE(POP)
+QLOG_ENABLE(SPARQL)
 QLOG_DISABLE(ImapData)
 QLOG_DISABLE(MessagingState)
 #else
@@ -129,6 +130,7 @@ QLOG_DISABLE(Messaging)
 QLOG_DISABLE(IMAP)
 QLOG_DISABLE(SMTP)
 QLOG_DISABLE(POP)
+QLOG_DISABLE(SPARQL)
 QLOG_DISABLE(ImapData)
 QLOG_DISABLE(MessagingState)
 #endif
diff --git a/src/libraries/qtopiamail/support/qmailnamespace.cpp b/src/libraries/qtopiamail/support/qmailnamespace.cpp
index dd572f0..c8ad36b 100644
--- a/src/libraries/qtopiamail/support/qmailnamespace.cpp
+++ b/src/libraries/qtopiamail/support/qmailnamespace.cpp
@@ -228,7 +228,8 @@ QString QMail::pluginsPath()
     if(!pluginsEnv.isEmpty())
         return pluginsEnv + "/";
     //default to "." if no env set
-    return pluginsEnv;
+    //return pluginsEnv;
+    return "/usr/lib/qmf/";
 }
 
 /*!
diff --git a/src/libraries/sparql/include/SparqlDatabase b/src/libraries/sparql/include/SparqlDatabase
new file mode 100644
index 0000000..ac92cb7
--- /dev/null
+++ b/src/libraries/sparql/include/SparqlDatabase
@@ -0,0 +1 @@
+#include "sparqldatabase.h"
diff --git a/src/libraries/sparql/include/SparqlQuery b/src/libraries/sparql/include/SparqlQuery
new file mode 100644
index 0000000..bf9b61e
--- /dev/null
+++ b/src/libraries/sparql/include/SparqlQuery
@@ -0,0 +1 @@
+#include "sparqlquery.h"
diff --git a/src/libraries/sparql/include/SparqlResult b/src/libraries/sparql/include/SparqlResult
new file mode 100644
index 0000000..8e66d59
--- /dev/null
+++ b/src/libraries/sparql/include/SparqlResult
@@ -0,0 +1 @@
+#include "sparqlresult.h"
diff --git a/src/libraries/sparql/include/SparqlUri b/src/libraries/sparql/include/SparqlUri
new file mode 100644
index 0000000..52d7ed8
--- /dev/null
+++ b/src/libraries/sparql/include/SparqlUri
@@ -0,0 +1 @@
+#include "sparqluri.h"
diff --git a/src/libraries/sparql/sparql.pro b/src/libraries/sparql/sparql.pro
new file mode 100644
index 0000000..322007f
--- /dev/null
+++ b/src/libraries/sparql/sparql.pro
@@ -0,0 +1,43 @@
+TEMPLATE = lib
+
+TARGET = sparql
+
+DEFINES += QMF_ENABLE_LOGGING
+
+INCLUDEPATH += . tracker ../qtopiamail ../qtopiamail/support/
+
+LIBS += -L../qtopiamail -lqtopiamail
+
+QT *= dbus
+
+# Input
+DBUS_HEADERS += tracker/registertypes.h \
+                tracker/resourcesproxy.h
+
+SPARQL_HEADERS += sparqldatabase.h \
+                  sparqlquery.h \
+                  sparqlresult.h \
+                  sparqluri.h
+
+HEADERS += $$DBUS_HEADERS $$SPARQL_HEADERS
+
+SOURCES += \
+    sparqldatabase.cpp \
+    sparqlquery.cpp \
+    sparqlresult.cpp \
+    tracker/registertypes.cpp \
+    tracker/resourcesproxy.cpp \
+    sparqluri.cpp
+
+# Install headers
+sparql_headers.files = $$SPARQL_HEADERS include/*
+sparql_headers.path  = $$QMF_INSTALL_ROOT/include/qmf
+
+dbus_headers.files = $$DBUS_HEADERS
+dbus_headers.path  = $$QMF_INSTALL_ROOT/include/qmf/tracker
+
+INSTALLS += sparql_headers dbus_headers
+
+target.path += $$QMF_INSTALL_ROOT/lib
+
+INSTALLS += target
diff --git a/src/libraries/sparql/sparqldatabase.cpp b/src/libraries/sparql/sparqldatabase.cpp
new file mode 100644
index 0000000..150ec7c
--- /dev/null
+++ b/src/libraries/sparql/sparqldatabase.cpp
@@ -0,0 +1,48 @@
+#include "sparqldatabase.h"
+
+#include <QDBusConnection>
+#include <qmaillog.h>
+
+// Pointer to the default database
+SparqlDatabase* SparqlDatabase::_defaultDatabase = NULL;
+
+
+SparqlDatabase::SparqlDatabase(const QString& databaseName) :
+        _databaseName(databaseName),
+        _proxy(databaseName, "/org/freedesktop/Tracker1/Resources", QDBusConnection::sessionBus())
+{
+    qMailLog(SPARQL) << "SparqlDatabase::SparqlDatabase";
+
+    if (!_defaultDatabase)
+    {
+        // Register Qt types
+        registerTypes();
+
+        _defaultDatabase = this;
+    }
+}
+
+SparqlDatabase::~SparqlDatabase()
+{
+    qMailLog(SPARQL) << "SparqlDatabase::~SparqlDatabase";
+
+    if (_defaultDatabase == this)
+        _defaultDatabase = NULL;
+}
+
+SparqlDatabase* SparqlDatabase::defaultDatabase()
+{
+    return _defaultDatabase;
+}
+
+QString SparqlDatabase::databaseName() const
+{
+    return _databaseName;
+}
+
+bool SparqlDatabase::isOpenError() const
+{
+    // Check wheither we are connected
+    bool isConnected = _proxy.connection().isConnected();
+    return !isConnected;
+}
diff --git a/src/libraries/sparql/sparqldatabase.h b/src/libraries/sparql/sparqldatabase.h
new file mode 100644
index 0000000..d737035
--- /dev/null
+++ b/src/libraries/sparql/sparqldatabase.h
@@ -0,0 +1,62 @@
+#ifndef SPARQLDATABASE_H
+#define SPARQLDATABASE_H
+
+#include "tracker/resourcesproxy.h"
+
+/**
+ * \brief SparqlDatabase represents connection to the SPARQL data base.
+ *
+ * SparqlDatabase represents connection to the SPARQL data base. It relies on the
+ * proxy implementation. It is possible to keep several databases opened at the same
+ * time, but only one of them will be default. All queries without exact database
+ * specification will be performed with default database.
+ *
+ * \see SparqlQuery
+ */
+class SparqlDatabase
+{
+    friend class SparqlQuery;
+
+public:
+    /**
+     * \brief Creates new database
+     *
+     * \param databaseName Name of the data base.
+     */
+    SparqlDatabase(const QString& databaseName = "org.freedesktop.Tracker1");
+
+    /**
+     * \brief Default destructor
+     */
+    ~SparqlDatabase();
+
+    /**
+     * \brief Returns default database
+     *
+     * First created database will become default one.
+     *
+     * \return Pointer to the default database.
+     */
+    static SparqlDatabase* defaultDatabase();
+
+    /**
+     * \brief Returns name of the database
+     */
+    QString databaseName() const;
+
+    /**
+     * \brief Returns true wheither there was an error during opening database.
+     */
+    bool isOpenError() const;
+
+private:
+    Q_DISABLE_COPY(SparqlDatabase);
+
+    static SparqlDatabase* _defaultDatabase;
+
+    QString _databaseName;
+
+    org::freedesktop::Tracker1::Resources _proxy;
+};
+
+#endif // SPARQLDATABASE_H
diff --git a/src/libraries/sparql/sparqlquery.cpp b/src/libraries/sparql/sparqlquery.cpp
new file mode 100644
index 0000000..d2e7932
--- /dev/null
+++ b/src/libraries/sparql/sparqlquery.cpp
@@ -0,0 +1,119 @@
+#include "sparqlquery.h"
+#include "sparqldatabase.h"
+#include "sparqlresult.h"
+
+#include <qmaillog.h>
+#include <QDBusPendingReply>
+
+SparqlQuery::SparqlQuery(SparqlQuery::QueryType type, const QString& query,  SparqlDatabase* database) :
+        _type(type),
+        _database(database),
+        _result(NULL)
+{
+    if (!_database)
+        _database = SparqlDatabase::defaultDatabase();
+
+    Q_ASSERT(_database);
+
+    prepare(query);
+}
+
+SparqlQuery::~SparqlQuery()
+{
+}
+
+bool SparqlQuery::prepare(const QString query)
+{
+    // In case of batch update, submit query to the tracker
+    // and call BatchCommit in the end.
+    if (_type == BatchUpdate)
+    {
+        QDBusPendingReply<> reply;
+        reply = _database->_proxy.BatchSparqlUpdate(query);
+
+        reply.waitForFinished();
+
+        bool err = reply.isError();
+        if (err)
+            _error = reply.error().message();
+
+        _query += query;
+
+        return !err;
+    }
+
+    // In case of ordinary query, just assign the value.
+    _query = query;
+
+    return true;
+}
+
+bool SparqlQuery::exec()
+{
+    Q_ASSERT(_database);
+
+    // Clear last error status and query result
+    _result.clear();
+    _error.clear();
+
+    qMailLog(SPARQL) << "SparqlQuery::exec():" << _query;
+
+    bool err = true;
+    if (_type == SearchQuery)
+    {
+        QDBusPendingReply<QueryResultType> reply;
+        reply = _database->_proxy.SparqlQuery(_query);
+
+        reply.waitForFinished();
+
+        err = reply.isError();
+        if (!err)
+        {
+            _result = reply.value();
+
+        } else
+            _error = reply.error().message();
+
+    } else if (_type == UpdateQuery) {
+
+        QDBusPendingReply<> reply;
+        reply = _database->_proxy.SparqlUpdate(_query);
+
+        reply.waitForFinished();
+
+        err = reply.isError();
+        if (err)
+            _error = reply.error().message();
+
+    } else if (_type == BatchUpdate) {
+
+        QDBusPendingReply<> reply;
+        reply = _database->_proxy.BatchCommit();
+
+        reply.waitForFinished();
+
+        err = reply.isError();
+        if (err)
+            _error = reply.error().message();
+
+    } else {
+        Q_ASSERT(false);
+    }
+
+    return !err;
+}
+
+SparqlResult SparqlQuery::result() const
+{
+    return SparqlResult(this);
+}
+
+QString SparqlQuery::error() const
+{
+    return _error;
+}
+
+QString SparqlQuery::query() const
+{
+    return _query;
+}
diff --git a/src/libraries/sparql/sparqlquery.h b/src/libraries/sparql/sparqlquery.h
new file mode 100644
index 0000000..dbb0323
--- /dev/null
+++ b/src/libraries/sparql/sparqlquery.h
@@ -0,0 +1,103 @@
+#ifndef SPARQLQUERY_H
+#define SPARQLQUERY_H
+
+#include <QStringList>
+#include <QVector>
+#include <QString>
+
+class SparqlDatabase;
+class SparqlResult;
+
+/**
+ * \brief SparqlQuery represents SPARQL query.
+ *
+ * There are two different types of queries: search and update queries. Search query uses standard SPARQL syntax
+ * and can only read information from the database. Update queries exploit Advanced SPARQL syntax and allow to
+ * insert, delete and update information in the database.
+ *
+ * Database can be defeined explicitely or default database can be used. In anycase at least one SparqlDatabase
+ * object must be created.
+ *
+ * \see SparqlDatabase
+ */
+class SparqlQuery
+{
+    friend class SparqlResult;
+
+public:
+    /**
+     * \brief Type of the query
+     */
+    enum QueryType
+    {
+        SearchQuery,  ///< Query can use SELECT, CONSTRUCT, DESCRIBE or ASK SPARQL statment
+        UpdateQuery,  ///< Query can use INSERT, DELETE and UPDATE advances SPARQL statment
+        BatchUpdate,  ///< Batch update query can use INSERT, DELETE and UPDATE SPARQL statments several times per request
+    };
+
+    /**
+     * \brief Constructs SPARQL query
+     *
+     * \param type Type of the quey.
+     * \param query Query string, It can be defined later with prepare() method.
+     * \param database Pointer to the database. Default database will be used in case of NULL.
+     */
+    SparqlQuery(QueryType type, const QString& query = QString(),  SparqlDatabase* database = NULL);
+
+     /**
+      * \brief Default destructor
+      */
+    ~SparqlQuery();
+
+    /**
+     * \brief Prepare query for execution
+     *
+     * \param SPARQL query to prepare.
+     * \return Status of the application.
+     */
+    bool prepare(const QString query);
+
+    /**
+     * \brief Execute prepared query
+     *
+     * Before executing a query it has to be prepared using prepare() method.
+     * In case of any errors exec() will return false. More detailes information
+     * about source of error can be retrieved using error() method.
+     *
+     * Result of query execution can be retrieved using result() method.
+     * Retult is available only for Search queries.
+     *
+     * \return true in case of success and false in case of failure.
+     */
+    bool exec();
+
+    /**
+     * \brief Returns result of the operation
+     *
+     * \return result can be NULL in case of error or Update query was executed.
+     */
+    SparqlResult result() const;
+
+    /**
+     * \brief Returns textual representation of the error.
+     *
+     * \return Literal error description.
+     */
+    QString error() const;
+
+    /**
+     * \brief Returns prepared SPARQL query to execute.
+     */
+    QString query() const;
+
+private:
+    QueryType       _type;
+    QString         _query;
+    SparqlDatabase* _database;
+    QString         _error;
+
+    typedef QVector<QStringList> QueryResultType;
+    QueryResultType _result;
+};
+
+#endif // SPARQLQUERY_H
diff --git a/src/libraries/sparql/sparqlresult.cpp b/src/libraries/sparql/sparqlresult.cpp
new file mode 100644
index 0000000..2d13851
--- /dev/null
+++ b/src/libraries/sparql/sparqlresult.cpp
@@ -0,0 +1,34 @@
+#include "sparqlresult.h"
+#include "sparqlquery.h"
+
+#include <qmaillog.h>
+
+SparqlResult::SparqlResult(const SparqlQuery* query) :
+        _query(query),
+        _current(0)
+{
+}
+
+const QStringList& SparqlResult::fetchRow()
+{
+    Q_ASSERT(_query);
+
+    qMailLog(SPARQL) << "SparqlResult::fetchRow():" << _query->_result.at(_current);
+    return _query->_result.at(_current++);
+}
+
+bool SparqlResult::begin() const
+{
+    return (_current == 0);
+}
+
+bool SparqlResult::end() const
+{
+    Q_ASSERT(_query);
+    return (_query->_result.count() == _current);
+}
+
+void SparqlResult::reset()
+{
+    _current = 0;
+}
diff --git a/src/libraries/sparql/sparqlresult.h b/src/libraries/sparql/sparqlresult.h
new file mode 100644
index 0000000..2c9be91
--- /dev/null
+++ b/src/libraries/sparql/sparqlresult.h
@@ -0,0 +1,56 @@
+#ifndef SPARQLRESULT_H
+#define SPARQLRESULT_H
+
+#include <QVector>
+#include <QStringList>
+
+class SparqlQuery;
+
+/**
+ * \brief SparqlResult provides convenient way to fetch data from the executed query.
+ *
+ * To fetch data from already executed query you have to get instance of that class
+ * with SparqlQuery::result() method and call fetchRow() method till you reach the end().
+ *
+ * It is possible to enumerate result of the query using different instances of the
+ * SparqlResult class at the same time. But you have to know that data itself belongs
+ * to the query and you should not access any methods of this class in case of SparqlQuery
+ * was destroyed.
+ *
+ * \see SparqlQuery
+ */
+class SparqlResult
+{
+    friend class SparqlQuery;
+
+public:
+    /**
+     * \brief Fetch the row with results of the query
+     *
+     * \return List of values of the row.
+     */
+    const QStringList& fetchRow();
+
+    /**
+     * \brief Does the result point to the beginig of data set
+     */
+    bool begin() const;
+
+    /**
+     * \brief Does the result point to the end of the data set
+     */
+    bool end() const;
+
+    /**
+     * \brief Reset result and make it points to the begining again
+     */
+    void reset();
+
+private:
+    SparqlResult(const SparqlQuery* query);
+    const SparqlQuery* _query;
+
+    int _current;
+};
+
+#endif // SPARQLRESULT_H
diff --git a/src/libraries/sparql/sparqluri.cpp b/src/libraries/sparql/sparqluri.cpp
new file mode 100644
index 0000000..6963010
--- /dev/null
+++ b/src/libraries/sparql/sparqluri.cpp
@@ -0,0 +1,88 @@
+#include "sparqluri.h"
+#include <QUuid>
+
+SparqlUri::SparqlUri(const QString& base) :
+        _id(generate())
+{
+    bool ret = setBase(base);
+    Q_ASSERT(ret);
+}
+
+SparqlUri::SparqlUri(const QString& base, quint64 id) :
+        _id(id)
+{
+    bool ret = setBase(base);
+    Q_ASSERT(ret);
+}
+
+bool SparqlUri::setBase(const QString& base)
+{
+    _base = base;
+    return true;
+}
+
+QString SparqlUri::base() const
+{
+    return _base;
+}
+
+QString SparqlUri::uri() const
+{
+    return QString("<%1>").arg(base() + QString::number(_id));
+}
+
+void SparqlUri::setId(quint64 id)
+{
+    _id = id;
+}
+
+quint64 SparqlUri::id() const
+{
+    return _id;
+}
+
+quint64 SparqlUri::generate()
+{
+    /*
+     * BUG!BUG!BUG!
+     *
+     * We can't just generate UUID and do not make
+     * sure that it is unique.
+     *
+     * THIS CODE HAS TO BE REWRITTEN.
+     */
+    QUuid uuid = QUuid::createUuid();
+
+    quint64 data1 = uuid.data1;
+    quint64 data2 = uuid.data2;
+    quint64 data3 = uuid.data3;
+    quint64 data4 = *(quint64*)uuid.data4;
+
+    quint64 id = (data1 << 32) ^ (data2 << 16) ^ data3;
+    id |= data4;
+
+    return id;
+}
+
+SparqlUri::operator QString () const
+{
+    return uri();
+}
+
+SparqlUri::operator quint64 () const
+{
+    return id();
+}
+
+QString SparqlUri::operator++ ()
+{
+    _id = generate();
+    return uri();
+}
+
+QString SparqlUri::operator++ (int)
+{
+    QString result(uri());
+    _id = generate();
+    return result;
+}
diff --git a/src/libraries/sparql/sparqluri.h b/src/libraries/sparql/sparqluri.h
new file mode 100644
index 0000000..44aeab1
--- /dev/null
+++ b/src/libraries/sparql/sparqluri.h
@@ -0,0 +1,102 @@
+#ifndef SPARQLURI_H
+#define SPARQLURI_H
+
+#include "sparqldatabase.h"
+
+/**
+ * \brief SparqlUri provides automatic URI generation.
+ *
+ * URI is unique identifier in the SPARQL language, it is required
+ * to be able to generate unique identifiers fast and easy. SparqlUri class
+ * provides convenient way to generate such URI.
+ *
+ * Every URI has base part and autogenerated part. Base part can be defined by user.
+ * Autogenerated part will be changed with every increment operation.
+ *
+ * Autogenerate URI will look like http://base.part/is/fixed#nnnnnn, where nnnnnn is 64bit
+ * integer, No any prediction is made about order or number of digits in the nnnnnn.
+ *
+ * \see SparqlQuery
+ */
+class SparqlUri
+{
+public:
+    /**
+     * \brief Constructor of the URI
+     *
+     * Unique id will be autogenerated.
+     *
+     * \param base Fixed part of the URI.
+     */
+    SparqlUri(const QString& base);
+
+    /**
+     * \brief Constructor of the URI generator
+     *
+     * Value of id is passed as a parameter
+     *
+     * \param base Fixed part of the URI.
+     * \param id Pre-defined id is used in this case.
+     */
+    SparqlUri(const QString& base, quint64 id);
+
+    /**
+     * \brief Set new fixed base of the URI
+     */
+    bool setBase(const QString& base);
+
+    /**
+     * \brief Get fixed base part of the URI
+     */
+    QString base() const;
+
+    /**
+     * \brief Get current URI as a string
+     */
+    void setId(quint64 id);
+
+    /**
+     * \brief Set current nnnnnn part as 64-bit integer
+     */
+    quint64 id() const;
+
+    /**
+     * \brief Get current nnnnnn part as 64-bit integer
+     */
+    QString uri() const;
+
+    /**
+     * \brief Generates new nnnnnn.
+     *
+     * Current URI is not updated. To update current URI as well operator++ should be used.
+     *
+     * \return new nnnnnn part of the URI as 64-bit unsigned integer.
+     */
+    quint64 generate();
+
+    /**
+     * \brief Convenience operator returns URI
+     */
+    operator QString () const;
+
+    /**
+     * \brief Convenience operator returns nnnnnn part of the URI
+     */
+    operator quint64 () const;
+
+    /**
+     * \brief Generates new URI and returns new value
+     */
+    QString operator++ ();
+
+    /**
+     * \brief Generates new URI and returns old value
+     */
+    QString operator++ (int);
+
+private:
+    QString _base;
+    quint64 _id;
+};
+
+#endif // #ifndef SPARQLURI_H
diff --git a/src/libraries/sparql/tracker/README b/src/libraries/sparql/tracker/README
new file mode 100644
index 0000000..9b8b88a
--- /dev/null
+++ b/src/libraries/sparql/tracker/README
@@ -0,0 +1,20 @@
+
+HOWTO Generate proxy code from DBUSXML interface definition
+
+ Obtain latest version of the .xml files from the tracker repository
+   git://git.codethink.co.uk/git/tracker
+   
+   Backup existing .xml files and code of the DBUS proxy classes.
+   
+ Update XML interface description with correct annotations for all Qt types:
+  * For every type="aas" direction="out", add following annotation:
+    <annotation name="com.trolltech.QtDBus.QtTypeName.Out0" value="QVector&lt;QStringList&gt;"/>
+
+  * For every type="a{sv}" direction="out", add following annotation:
+    <annotation name="com.trolltech.QtDBus.QtTypeName.Out0" value="QVariantList"/>
+
+  * For every signal with type="aas", add following annotation:
+    <annotation name="com.trolltech.QtDBus.QtTypeName.In0" value="QVector&lt;QStringList&gt;"/>
+
+ Run genproxy.sh script
+ 
diff --git a/src/libraries/sparql/tracker/genproxy.sh b/src/libraries/sparql/tracker/genproxy.sh
new file mode 100755
index 0000000..4d4f089
--- /dev/null
+++ b/src/libraries/sparql/tracker/genproxy.sh
@@ -0,0 +1,2 @@
+#!/bin/bash
+qdbusxml2cpp -c ResourcesProxy -p resourcesproxy -i registertypes.h tracker-resources.xml org.freedesktop.Tracker1.Resources
diff --git a/src/libraries/sparql/tracker/registertypes.cpp b/src/libraries/sparql/tracker/registertypes.cpp
new file mode 100644
index 0000000..e8ce4ed
--- /dev/null
+++ b/src/libraries/sparql/tracker/registertypes.cpp
@@ -0,0 +1,10 @@
+#include <QDBusMetaType>
+#include <QtDebug>
+
+#include "registertypes.h"
+
+void registerTypes()
+{
+    qRegisterMetaType<QVector<QStringList> >();
+    qDBusRegisterMetaType<QVector<QStringList> >();
+}
diff --git a/src/libraries/sparql/tracker/registertypes.h b/src/libraries/sparql/tracker/registertypes.h
new file mode 100644
index 0000000..5c87c3f
--- /dev/null
+++ b/src/libraries/sparql/tracker/registertypes.h
@@ -0,0 +1,12 @@
+#ifndef __REGISTERTYPES_H__
+#define __REGISTERTYPES_H__
+
+#include <QMetaType>
+#include <QVector>
+#include <QStringList>
+
+Q_DECLARE_METATYPE(QVector<QStringList>)
+
+void registerTypes();
+
+#endif // #ifndef __REGISTERTYPES_H__
diff --git a/src/libraries/sparql/tracker/resourcesproxy.cpp b/src/libraries/sparql/tracker/resourcesproxy.cpp
new file mode 100644
index 0000000..02d44c4
--- /dev/null
+++ b/src/libraries/sparql/tracker/resourcesproxy.cpp
@@ -0,0 +1,26 @@
+/*
+ * This file was generated by qdbusxml2cpp version 0.7
+ * Command line was: qdbusxml2cpp -c ResourcesProxy -p resourcesproxy -i registertypes.h tracker-resources.xml org.freedesktop.Tracker1.Resources
+ *
+ * qdbusxml2cpp is Copyright (C) 2009 Nokia Corporation and/or its subsidiary(-ies).
+ *
+ * This is an auto-generated file.
+ * This file may have been hand-edited. Look for HAND-EDIT comments
+ * before re-generating it.
+ */
+
+#include "resourcesproxy.h"
+
+/*
+ * Implementation of interface class ResourcesProxy
+ */
+
+ResourcesProxy::ResourcesProxy(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent)
+    : QDBusAbstractInterface(service, path, staticInterfaceName(), connection, parent)
+{
+}
+
+ResourcesProxy::~ResourcesProxy()
+{
+}
+
diff --git a/src/libraries/sparql/tracker/resourcesproxy.h b/src/libraries/sparql/tracker/resourcesproxy.h
new file mode 100644
index 0000000..8c5c024
--- /dev/null
+++ b/src/libraries/sparql/tracker/resourcesproxy.h
@@ -0,0 +1,98 @@
+/*
+ * This file was generated by qdbusxml2cpp version 0.7
+ * Command line was: qdbusxml2cpp -c ResourcesProxy -p resourcesproxy -i registertypes.h tracker-resources.xml org.freedesktop.Tracker1.Resources
+ *
+ * qdbusxml2cpp is Copyright (C) 2009 Nokia Corporation and/or its subsidiary(-ies).
+ *
+ * This is an auto-generated file.
+ * Do not edit! All changes made to it will be lost.
+ */
+
+#ifndef RESOURCESPROXY_H_1258731356
+#define RESOURCESPROXY_H_1258731356
+
+#include <QtCore/QObject>
+#include <QtCore/QByteArray>
+#include <QtCore/QList>
+#include <QtCore/QMap>
+#include <QtCore/QString>
+#include <QtCore/QStringList>
+#include <QtCore/QVariant>
+#include <QtDBus/QtDBus>
+#include "registertypes.h"
+
+/*
+ * Proxy class for interface org.freedesktop.Tracker1.Resources
+ */
+class ResourcesProxy: public QDBusAbstractInterface
+{
+    Q_OBJECT
+public:
+    static inline const char *staticInterfaceName()
+    { return "org.freedesktop.Tracker1.Resources"; }
+
+public:
+    ResourcesProxy(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);
+
+    ~ResourcesProxy();
+
+public Q_SLOTS: // METHODS
+    inline QDBusPendingReply<> BatchCommit()
+    {
+        QList<QVariant> argumentList;
+        return asyncCallWithArgumentList(QLatin1String("BatchCommit"), argumentList);
+    }
+
+    inline QDBusPendingReply<> BatchSparqlUpdate(const QString &query)
+    {
+        QList<QVariant> argumentList;
+        argumentList << qVariantFromValue(query);
+        return asyncCallWithArgumentList(QLatin1String("BatchSparqlUpdate"), argumentList);
+    }
+
+    inline QDBusPendingReply<> Delete(const QString &subject, const QString &predicate, const QString &object)
+    {
+        QList<QVariant> argumentList;
+        argumentList << qVariantFromValue(subject) << qVariantFromValue(predicate) << qVariantFromValue(object);
+        return asyncCallWithArgumentList(QLatin1String("Delete"), argumentList);
+    }
+
+    inline QDBusPendingReply<> Insert(const QString &subject, const QString &predicate, const QString &object)
+    {
+        QList<QVariant> argumentList;
+        argumentList << qVariantFromValue(subject) << qVariantFromValue(predicate) << qVariantFromValue(object);
+        return asyncCallWithArgumentList(QLatin1String("Insert"), argumentList);
+    }
+
+    inline QDBusPendingReply<> Load(const QString &uri)
+    {
+        QList<QVariant> argumentList;
+        argumentList << qVariantFromValue(uri);
+        return asyncCallWithArgumentList(QLatin1String("Load"), argumentList);
+    }
+
+    inline QDBusPendingReply<QVector<QStringList> > SparqlQuery(const QString &query)
+    {
+        QList<QVariant> argumentList;
+        argumentList << qVariantFromValue(query);
+        return asyncCallWithArgumentList(QLatin1String("SparqlQuery"), argumentList);
+    }
+
+    inline QDBusPendingReply<> SparqlUpdate(const QString &query)
+    {
+        QList<QVariant> argumentList;
+        argumentList << qVariantFromValue(query);
+        return asyncCallWithArgumentList(QLatin1String("SparqlUpdate"), argumentList);
+    }
+
+Q_SIGNALS: // SIGNALS
+};
+
+namespace org {
+  namespace freedesktop {
+    namespace Tracker1 {
+      typedef ::ResourcesProxy Resources;
+    }
+  }
+}
+#endif
diff --git a/src/libraries/sparql/tracker/tracker-resources.xml b/src/libraries/sparql/tracker/tracker-resources.xml
new file mode 100644
index 0000000..9a2d59a
--- /dev/null
+++ b/src/libraries/sparql/tracker/tracker-resources.xml
@@ -0,0 +1,57 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<node name="/org/freedesktop/Tracker1">
+  <interface name="org.freedesktop.Tracker1.Resources">
+
+    <!-- Insert single statement -->
+    <method name="Insert">
+      <annotation name="org.freedesktop.DBus.GLib.Async" value="true"/> 
+      <arg type="s" name="subject" direction="in" />
+      <arg type="s" name="predicate" direction="in" />
+      <arg type="s" name="object" direction="in" />
+    </method>
+
+    <!-- Delete single statement -->
+    <method name="Delete">
+      <annotation name="org.freedesktop.DBus.GLib.Async" value="true"/> 
+      <arg type="s" name="subject" direction="in" />
+      <arg type="s" name="predicate" direction="in" />
+      <arg type="s" name="object" direction="in" />
+    </method>
+
+    <!-- Load statements from Turtle file -->
+    <method name="Load">
+      <annotation name="org.freedesktop.DBus.GLib.Async" value="true"/> 
+      <arg type="s" name="uri" direction="in" />
+    </method>
+
+    <!-- SPARQL Query without updates -->
+    <method name="SparqlQuery">
+      <annotation name="org.freedesktop.DBus.GLib.Async" value="true"/>
+      <annotation name="com.trolltech.QtDBus.QtTypeName.Out0" 
+		  value="QVector&lt;QStringList&gt;"/>
+      <arg type="s" name="query" direction="in" />
+      <arg type="aas" name="result" direction="out" />
+    </method>
+
+    <!-- SPARQL Update extensions, insert and delete -->
+    <method name="SparqlUpdate">
+      <annotation name="org.freedesktop.DBus.GLib.Async" value="true"/>
+      <arg type="s" name="query" direction="in" />
+    </method>
+
+    <!-- SPARQL Update as part of a batch, use this method when sending a
+         possibly large amount of updates to improve performance, may delay
+         database commit until receiving BatchCommit -->
+    <method name="BatchSparqlUpdate">
+      <annotation name="org.freedesktop.DBus.GLib.Async" value="true"/>
+      <arg type="s" name="query" direction="in" />
+    </method>
+
+    <!-- Commits pending updates to the database -->
+    <method name="BatchCommit">
+      <annotation name="org.freedesktop.DBus.GLib.Async" value="true"/>
+    </method>
+
+  </interface>
+</node>
diff --git a/src/tools/messageserver/etc/event.d/messageserver b/src/tools/messageserver/etc/event.d/messageserver
new file mode 100644
index 0000000..b1e8a21
--- /dev/null
+++ b/src/tools/messageserver/etc/event.d/messageserver
@@ -0,0 +1,13 @@
+description "QMF Message Server"
+author "Dmitry Zelenkovsky"
+
+console none
+
+start on XSESSIONS_STARTING
+stop on stopped xomap
+
+respawn
+
+
+exec su - user -c "DISPLAY=:0 /usr/bin/messageserver"
+
diff --git a/src/tools/messageserver/main.cpp b/src/tools/messageserver/main.cpp
index 952b267..03d6e35 100644
--- a/src/tools/messageserver/main.cpp
+++ b/src/tools/messageserver/main.cpp
@@ -40,7 +40,8 @@
 ****************************************************************************/
 
 #include "messageserver.h"
-#include <QApplication>
+#include "sparqlindexer.h"
+#include <QCoreApplication>
 #include <QDebug>
 #include <qmailnamespace.h>
 
@@ -60,11 +61,10 @@ static void shutdown(int n)
 
 int main(int argc, char** argv)
 {
-
     if(QMail::fileLock("messageserver-instance.lock") == -1)
         qFatal("Could not get messageserver lock. Messageserver might already be running!");
 
-    QApplication app(argc, argv);
+    QCoreApplication app(argc, argv);
 
     MessageServer server;
 
diff --git a/src/tools/messageserver/messageserver.cpp b/src/tools/messageserver/messageserver.cpp
index e8507d0..274f739 100644
--- a/src/tools/messageserver/messageserver.cpp
+++ b/src/tools/messageserver/messageserver.cpp
@@ -42,6 +42,7 @@
 #include "messageserver.h"
 #include "servicehandler.h"
 #include "mailmessageclient.h"
+#include "sparqlindexer.h"
 #include <qmailfolder.h>
 #include <qmailmessage.h>
 #include <qmailstore.h>
@@ -57,7 +58,8 @@ MessageServer::MessageServer(QObject *parent)
       client(new MailMessageClient(this)),
       messageCountUpdate("QPE/Messages/MessageCountUpdated"),
       newMessageTotal(0),
-      completionAttempted(false)
+      completionAttempted(false),
+      indexer(NULL)
 {
     qMailLog(Messaging) << "MessageServer ctor begin";
     new QCopServer(this);
@@ -71,6 +73,17 @@ MessageServer::MessageServer(QObject *parent)
         qFatal("Messaging DB Invalid: Messaging cannot operate due to database incompatibilty!");
         // Do not close, however, or QPE will start another instance.
     } else {
+        indexer = new SparqlIndexer(this);
+
+        // Connect singlas from store to SPARQL indexer handlers
+        connect(store, SIGNAL(accountsAdded(QMailAccountIdList)),   indexer, SLOT(addAccounts(QMailAccountIdList)));
+        connect(store, SIGNAL(accountsUpdated(QMailAccountIdList)), indexer, SLOT(updateAccounts(QMailAccountIdList)));
+        connect(store, SIGNAL(accountsRemoved(QMailAccountIdList)), indexer, SLOT(removeAccounts(QMailAccountIdList)));
+
+        connect(store, SIGNAL(foldersAdded(QMailFolderIdList)),   indexer, SLOT(addFolders(QMailFolderIdList)));
+        connect(store, SIGNAL(foldersUpdated(QMailFolderIdList)), indexer, SLOT(updateFolders(QMailFolderIdList)));
+        connect(store, SIGNAL(foldersRemoved(QMailFolderIdList)), indexer, SLOT(removeFolders(QMailFolderIdList)));
+
         handler = new ServiceHandler(this);
 
         connect(store, SIGNAL(messagesAdded(QMailMessageIdList)),
@@ -89,28 +102,28 @@ MessageServer::MessageServer(QObject *parent)
                 client, SIGNAL(statusChanged(quint64, const QMailServiceAction::Status)));
         connect(handler, SIGNAL(progressChanged(quint64, uint, uint)),
                 client, SIGNAL(progressChanged(quint64, uint, uint)));
-        connect(handler, SIGNAL(messagesDeleted(quint64, QMailMessageIdList)), 
+        connect(handler, SIGNAL(messagesDeleted(quint64, QMailMessageIdList)),
                 client, SIGNAL(messagesDeleted(quint64, QMailMessageIdList)));
-        connect(handler, SIGNAL(messagesCopied(quint64, QMailMessageIdList)), 
+        connect(handler, SIGNAL(messagesCopied(quint64, QMailMessageIdList)),
                 client, SIGNAL(messagesCopied(quint64, QMailMessageIdList)));
-        connect(handler, SIGNAL(messagesMoved(quint64, QMailMessageIdList)), 
+        connect(handler, SIGNAL(messagesMoved(quint64, QMailMessageIdList)),
                 client, SIGNAL(messagesMoved(quint64, QMailMessageIdList)));
-        connect(handler, SIGNAL(messagesFlagged(quint64, QMailMessageIdList)), 
+        connect(handler, SIGNAL(messagesFlagged(quint64, QMailMessageIdList)),
                 client, SIGNAL(messagesFlagged(quint64, QMailMessageIdList)));
         connect(handler, SIGNAL(storageActionCompleted(quint64)),
                 client, SIGNAL(storageActionCompleted(quint64)));
-        connect(handler, SIGNAL(matchingMessageIds(quint64, QMailMessageIdList)), 
+        connect(handler, SIGNAL(matchingMessageIds(quint64, QMailMessageIdList)),
                 client, SIGNAL(matchingMessageIds(quint64, QMailMessageIdList)));
         connect(handler, SIGNAL(searchCompleted(quint64)),
                 client, SIGNAL(searchCompleted(quint64)));
-        connect(handler, SIGNAL(protocolResponse(quint64, QString, QVariant)), 
+        connect(handler, SIGNAL(protocolResponse(quint64, QString, QVariant)),
                 client, SIGNAL(protocolResponse(quint64, QString, QVariant)));
         connect(handler, SIGNAL(protocolRequestCompleted(quint64)),
                 client, SIGNAL(protocolRequestCompleted(quint64)));
-        connect(handler, SIGNAL(messagesTransmitted(quint64, QMailMessageIdList)), 
+        connect(handler, SIGNAL(messagesTransmitted(quint64, QMailMessageIdList)),
                 client, SIGNAL(messagesTransmitted(quint64, QMailMessageIdList)));
 
-        connect(handler, SIGNAL(transmissionCompleted(quint64)), 
+        connect(handler, SIGNAL(transmissionCompleted(quint64)),
                 this, SLOT(transmissionCompleted(quint64)));
         connect(handler, SIGNAL(retrievalCompleted(quint64)),
                 this, SLOT(retrievalCompleted(quint64)));
@@ -154,7 +167,7 @@ MessageServer::MessageServer(QObject *parent)
                 handler, SLOT(cancelSearch(quint64)));
         connect(client, SIGNAL(shutdown()),
                 handler, SLOT(shutdown()));
-       connect(handler, SIGNAL(newMessagesAvailable()),
+        connect(handler, SIGNAL(newMessagesAvailable()),
                 this, SLOT(reportNewCounts()));
         connect(client, SIGNAL(acknowledgeNewMessages(QMailMessageTypeList)),
                 this, SLOT(acknowledgeNewMessages(QMailMessageTypeList)));
@@ -341,11 +354,20 @@ void MessageServer::messagesAdded(const QMailMessageIdList &ids)
                     message.content() == QMailMessage::VideomailContent) {
                     complete = true;
                 }
+
             }
 
             if (complete)
                 completionList.insert(message.id());
+
+            // Index content of newly added messages
+            indexer->addMessageMetaData(message);
         }
+
+    } else {
+        // Index content of received messages
+        indexer->addMessages(ids);
+
     }
 }
 
@@ -354,16 +376,22 @@ void MessageServer::messagesUpdated(const QMailMessageIdList &ids)
     if (QMailStore::instance()->asynchronousEmission()) {
         // Only need to check message counts if the update occurred in another process
         updateNewMessageCounts();
+
+        // Update messages in the index
+        indexer->updateMessages(ids);
     } else {
         // If we're updating, check whether the messages have been marked as Removed
         foreach (const QMailMessageId &id, ids) {
+            QMailMessageMetaData message(id);
             if (completionList.contains(id)) {
-                QMailMessageMetaData message(id);
                 if ((message.status() & QMailMessage::ContentAvailable) || (message.status() & QMailMessage::Removed)) {
                     // This message has been completed (or removed)
                     completionList.remove(id);
                 }
             }
+
+            // Update information in the index
+            indexer->updateMessageMetaData(message);
         }
     }
 }
@@ -376,6 +404,9 @@ void MessageServer::messagesRemoved(const QMailMessageIdList &ids)
     }
 
     updateNewMessageCounts();
+
+    // Remove messages from index
+    indexer->removeMessages(ids);
 }
 
 void MessageServer::updateNewMessageCounts()
diff --git a/src/tools/messageserver/messageserver.h b/src/tools/messageserver/messageserver.h
index 508752a..f7cd380 100644
--- a/src/tools/messageserver/messageserver.h
+++ b/src/tools/messageserver/messageserver.h
@@ -52,6 +52,7 @@ class QDSData;
 class QMailMessageMetaData;
 class QNetworkState;
 class NewCountNotifier;
+class SparqlIndexer;
 
 class MessageServer : public QObject
 {
@@ -93,6 +94,7 @@ private:
 
     QSet<QMailMessageId> completionList;
     bool completionAttempted;
+    SparqlIndexer *indexer;
 };
 
 #endif
diff --git a/src/tools/messageserver/messageserver.pro b/src/tools/messageserver/messageserver.pro
index 6216729..b04ad88 100644
--- a/src/tools/messageserver/messageserver.pro
+++ b/src/tools/messageserver/messageserver.pro
@@ -2,6 +2,9 @@ TEMPLATE = app
 
 include(../../../common.pri)
 
+CONFIG -= x11
+CONFIG += console
+
 TARGET = messageserver
 target.path += $$QMF_INSTALL_ROOT/bin
 INSTALLS += target
@@ -10,22 +13,26 @@ DEPENDPATH += .
 
 INCLUDEPATH += . ../../libraries/qtopiamail \
                  ../../libraries/qtopiamail/support \
-                 ../../libraries/messageserver
+                 ../../libraries/messageserver \
+                 ../../libraries/sparql
 
 LIBS += -L../../libraries/messageserver -lmessageserver \
-        -L../../libraries/qtopiamail -lqtopiamail
+        -L../../libraries/qtopiamail -lqtopiamail \
+        -L../../libraries/sparql -lsparql
 
 HEADERS += mailmessageclient.h \
            messageserver.h \
            servicehandler.h \
-           newcountnotifier.h
+           newcountnotifier.h \
+           sparqlindexer.h
 
 SOURCES += mailmessageclient.cpp \
            main.cpp \
            messageserver.cpp \
            prepareaccounts.cpp \
            newcountnotifier.cpp \
-           servicehandler.cpp
+           servicehandler.cpp \
+           sparqlindexer.cpp
 
 TRANSLATIONS += messageserver-ar.ts \
                 messageserver-de.ts \
@@ -43,10 +50,11 @@ TRANSLATIONS += messageserver-ar.ts \
 
 unix {
     # Uncomment this to shutdown cleanly on termination signal
-    #DEFINES += HANDLE_SHUTDOWN_SIGNALS
+    DEFINES += HANDLE_SHUTDOWN_SIGNALS
 }
 
 eventd.files = etc/event.d/messageserver
 eventd.path  = /etc/event.d
 
 INSTALLS += target eventd
+
diff --git a/src/tools/messageserver/sparqlindexer.cpp b/src/tools/messageserver/sparqlindexer.cpp
new file mode 100644
index 0000000..a7e2f1a
--- /dev/null
+++ b/src/tools/messageserver/sparqlindexer.cpp
@@ -0,0 +1,425 @@
+/****************************************************************************
+**
+** Copyright (C) 2009 Nokia Corporation and/or its subsidiary(-ies).
+** Contact: Qt Software Information (qt-info@nokia.com)
+**
+** This file is part of the Qt Messaging Framework.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** No Commercial Usage
+** This file contains pre-release code and may not be distributed.
+** You may use this file in accordance with the terms and conditions
+** contained in the either Technology Preview License Agreement or the
+** Beta Release License Agreement.
+**
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 2.1 as published by the Free Software
+** Foundation and appearing in the file LICENSE.LGPL included in the
+** packaging of this file.  Please review the following information to
+** ensure the GNU Lesser General Public License version 2.1 requirements
+** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Nokia gives you certain
+** additional rights. These rights are described in the Nokia Qt LGPL
+** Exception version 1.0, included in the file LGPL_EXCEPTION.txt in this
+** package.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU
+** General Public License version 3.0 as published by the Free Software
+** Foundation and appearing in the file LICENSE.GPL included in the
+** packaging of this file.  Please review the following information to
+** ensure the GNU General Public License version 3.0 requirements will be
+** met: http://www.gnu.org/copyleft/gpl.html.
+**
+** If you are unsure which license is appropriate for your use, please
+** contact the sales department at qt-sales@nokia.com.
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#include "sparqlindexer.h"
+#include <qmaillog.h>
+#include <sparqluri.h>
+#include <sparqlquery.h>
+
+#include <QMap>
+
+namespace {
+
+const static char* WellKnownUris[] =
+{
+    "qmf://groove.harmattan.com/email#",
+    "qmf://groove.nokia.com/folder#",
+    "qmf://groove.nokia.com/accounts#"
+};
+
+template <class Key, int Index>
+class WellKnownUri : public SparqlUri
+{
+public:
+    WellKnownUri() : SparqlUri(WellKnownUris[Index]) {}
+    WellKnownUri(const Key& id) : SparqlUri(WellKnownUris[Index], id.toULongLong()) {}
+    Key id() const { return Key(id()); }
+    operator Key () { return id(); }
+};
+
+typedef WellKnownUri<QMailMessageId, 0> MailMessageUri;
+typedef WellKnownUri<QMailFolderId,  1> MailFolderUri;
+typedef WellKnownUri<QMailAccountId, 2> MailAccountUri;
+
+typedef QMap<QMailMessage::ContentType, QString> MimePartMapType;
+MimePartMapType contentMimePartMap()
+{
+    MimePartMapType map;
+    map.insert(QMailMessage::UnknownContent,        QString("message/rfc822"));
+    map.insert(QMailMessage::NoContent,             QString("message/rfc822"));
+    map.insert(QMailMessage::PlainTextContent,      QString("text/plain"));
+    map.insert(QMailMessage::RichTextContent,       QString("text/richtext"));
+    map.insert(QMailMessage::HtmlContent,           QString("text/html"));
+    map.insert(QMailMessage::ImageContent,          QString("message/rfc822"));
+    map.insert(QMailMessage::AudioContent,          QString("message/rfc822"));
+    map.insert(QMailMessage::VideoContent,          QString("message/rfc822"));
+    map.insert(QMailMessage::MultipartContent,      QString("multipart/mixed"));
+    map.insert(QMailMessage::SmilContent,           QString("application/smil"));
+    map.insert(QMailMessage::VoicemailContent,      QString("multipart/voice-message"));
+    map.insert(QMailMessage::VideomailContent,      QString("message/rfc822"));
+    map.insert(QMailMessage::VCardContent,          QString("text/x-vcard"));
+    map.insert(QMailMessage::VCalendarContent,      QString("text/x-vcalendar"));
+    map.insert(QMailMessage::ICalendarContent,      QString("text/x-icalendar"));
+    map.insert(QMailMessage::DeliveryReportContent, QString("message/delivery-status"));
+    map.insert(QMailMessage::UserContent,           QString("message/rfc822"));
+
+    return map;
+}
+
+QString contentMimeType(QMailMessage::ContentType type)
+{
+    static MimePartMapType mimeTypeMap(contentMimePartMap());
+
+    Q_ASSERT(mimeTypeMap.contains(type));
+    return mimeTypeMap.value(type);
+}
+
+QString escape(const QString &original, const QChar &escapee, const QChar &escaper = '\\')
+{
+    QString result(original);
+    return result.replace(escapee, QString(escaper) + escapee);
+}
+
+QString contentUri(const QString &scheme, const QString &identifier)
+{
+    if (scheme.isEmpty())
+        return QString();
+
+    // Formulate a URI from the content scheme and identifier
+    return escape(scheme, ':') + ':' + escape(identifier, ':');
+}
+
+QString contentUri(const QMailMessageMetaData &message)
+{
+    return contentUri(message.contentScheme(), message.contentIdentifier());
+}
+
+QString insertObjectQuery(const QMailAccount& account)
+{
+    QString query;
+    QTextStream q(&query);
+
+    MailAccountUri accountUri(account.id());
+
+    q << "INSERT {" << endl;
+    q << accountUri.uri() << " rdf:type nmo:Mailbox ;" << endl;
+    q << "   nmo:accountName \"" << account.name() << "\" ;"<< endl;
+    q << "   nmo:signature \"" << account.signature() << "\" ;" << endl;
+    q << "   nmo:fromAddress [ " << endl;
+    q << "       rdf:type nco:EmailAddress ;" << endl;
+    q << "       nco:emailAddress \"" << account.fromAddress().toString(true) << "\" ] ." << endl;
+    q << "}";
+
+    return query;
+}
+
+QString dropObjectsQuery(const QMailAccountIdList& ids)
+{
+    Q_ASSERT(!ids.isEmpty());
+
+    QString query;
+    QTextStream q(&query);
+
+    foreach (const QMailAccountId& id, ids)
+    {
+        MailAccountUri accountUri(id);
+        q << "DROP GRAPH " << accountUri.uri() << endl;
+    }
+    return query;
+}
+
+QString insertObjectQuery(const QMailFolder& folder)
+{
+    QString query;
+    QTextStream q(&query);
+
+    MailFolderUri folderUri(folder.id());
+    MailFolderUri  parentFolderUri(folder.parentFolderId());
+    MailAccountUri accountUri(folder.parentAccountId());
+
+    q << "INSERT {" << endl;
+    q << folderUri.uri() <<  " rdf:type nmo:MailFolder ;" << endl;
+    q << "   nmo:folderName \"" << folder.displayName() << "\" ;" << endl;
+    q << "   nie:isLogicalPartOf " <<  parentFolderUri.uri() << " ;" << endl;
+    q << "   nie:relatedTo " << accountUri.uri() << " ." << endl;
+    q << "}";
+
+    return query;
+}
+
+QString dropObjectsQuery(const QMailFolderIdList& ids)
+{
+    Q_ASSERT(!ids.isEmpty());
+
+    QString query;
+    QTextStream q(&query);
+
+    foreach (const QMailFolderId& id, ids)
+    {
+        MailFolderUri folderUri(id);
+        q << "DROP GRAPH " << folderUri.uri() << endl;
+    }
+    return query;
+}
+
+
+QString recipients(const QList<QMailAddress>& recipients)
+{
+    QString result;
+    QTextStream q(&result);
+    foreach (const QMailAddress& address, recipients)
+    {
+        q << "     nmo:recipient [" << endl;
+        q << "        rdf:type nco:Contact ;" << endl;
+        if (address.name() != address.address())
+            q << "        nco:fullname \"" << address.name() << "\" ;" << endl;
+        q << "        nco:hasEmailAddress <mailto:" << address.address() << "> ] ;";
+    }
+    return result;
+}
+
+QString insertObjectQuery(const QMailMessageMetaData& message)
+{
+    QString query;
+    QTextStream q(&query);
+
+    MailMessageUri messageUri(message.id());
+    MailFolderUri  parentFolderUri(message.parentFolderId());
+    MailAccountUri parentAccountUri(message.parentAccountId());
+
+    q << "INSERT {" << endl;
+    q << messageUri.uri() << " rdf:type nmo:Email ;" << endl;
+    q << "   nie:isLogicalPartOf " << parentFolderUri.uri() << ";" << endl;
+    q << "   nmo:sender [" << endl;
+    q << "     rdf:type nco:Contact ;" << endl;
+    if (message.from().name() != message.from().address())
+        q << "       nco:fullname \"" << message.from().name() << "\" ;" << endl;
+    q << "       nco:hasEmailAddress <mailto:" << message.from().address() << "> ] ;" << endl;
+    q <<       recipients(message.to()) << endl;
+    q << "   nmo:messageSubject \"" << message.subject() << "\" ;" << endl;
+    q << "   nmo:sentDate \"" << QMailTimeStamp(message.date()).toLocalTime().toString() << "\"^^xsd:dateTime ;" << endl;
+    q << "   nie:relatedTo "  << parentAccountUri.uri() << ";" << endl;
+    q << "   nie:isStoredAs [" << endl;
+    q << "     rdf:type nie:DataObject ;" << endl;
+    q << "     nie:dataSource <" << ::contentUri(message) << "> ] ;" << endl;
+    q << "   nmo:messageId \""   << message.serverUid() << "\" ;" << endl;
+    q << "   nie:contentSize \"" << message.size()      << "\"^^xsd:integer ;" << endl;
+    q << "   nie:mimeType \""    << contentMimeType(message.content())   << "\" ;" << endl;
+    if (message.inResponseTo().isValid())
+        q << "   nmo:inReplyTo \""   << message.inResponseTo().toULongLong() << "\" ;" << endl;
+    q << "   nmo:receivedDate \"" << QMailTimeStamp(message.receivedDate()).toLocalTime().toString() << "\"^^xsd:dateTime ." << endl;
+    q << "}";
+
+    return query;
+}
+
+QString dropObjectsQuery(const QMailMessageIdList& ids)
+{
+    Q_ASSERT(!ids.isEmpty());
+
+    QString query;
+    QTextStream q(&query);
+
+    foreach (const QMailMessageId& id, ids)
+    {
+        MailMessageUri messageUri(id);
+        q << "DROP GRAPH " << messageUri.uri() << endl;
+    }
+    return query;
+}
+
+template <class MailObject, class MailObjectId>
+bool addObjects(const QList<MailObjectId> ids)
+{
+    Q_ASSERT(!ids.isEmpty());
+
+    SparqlQuery query(SparqlQuery::BatchUpdate);
+    foreach (const MailObjectId& id, ids)
+    {
+        MailObject object(id);
+
+        // Check wheither message was loaded successfully
+        if (object.id().isValid())
+        {
+            QString request(insertObjectQuery(object));
+            if (!query.prepare(request))
+            {
+                qMailLog(Messaging) << "Fail to prepare query to add object in Tracker." << query.error();
+                continue;
+            }
+        }
+    }
+
+    if (!query.exec())
+    {
+        qMailLog(Messaging) << "Fail to add objects to Tracker." << query.error();
+        return false;
+    }
+    return true;
+}
+
+template <class MailObject, class MailObjectId>
+bool updateObjects(const QList<MailObjectId> ids)
+{
+    Q_ASSERT(!ids.isEmpty());
+
+    SparqlQuery query(SparqlQuery::BatchUpdate);
+    foreach (const MailObjectId& id, ids)
+    {
+        MailObject object(id);
+
+        // Check wheither message was loaded successfully
+        if (object.id().isValid())
+        {
+            QString request;
+            QTextStream q(&request);
+
+            q << dropObjectsQuery(QList<MailObjectId>() << id);
+            q << insertObjectQuery(object);
+
+            if (!query.prepare(request))
+            {
+                qMailLog(Messaging) << "Fail to update objects in Tracker." << query.error();
+                continue;
+            }
+        }
+    }
+
+    if (!query.exec())
+    {
+        qMailLog(Messaging) << "Fail to update objects in Tracker." << query.error();
+        return false;
+    }
+    return true;
+}
+
+template <class MailObjectId>
+bool removeObjects(const QList<MailObjectId> ids)
+{
+    QString request(dropObjectsQuery(ids));
+
+    SparqlQuery query(SparqlQuery::UpdateQuery, request);
+    if (!query.exec())
+    {
+        qMailLog(Messaging) << "Fail to remove objects from Tracker:" << query.error();
+        return false;
+    }
+    return true;
+}
+
+} // end of namespace
+
+SparqlIndexer::SparqlIndexer(QObject* parent) : QObject(parent)
+{
+    if (mDatabase.isOpenError())
+    {
+        qMailLog(Messaging) << "Unable to initialize SPARQL indexer.";
+    }
+}
+
+SparqlIndexer::~SparqlIndexer()
+{
+    // TBD: Do nothing at that moment
+}
+
+bool SparqlIndexer::addMessageMetaData(const QMailMessageMetaData& message)
+{
+    QString request(insertObjectQuery(message));
+    SparqlQuery query(SparqlQuery::UpdateQuery, request);
+    if (!query.exec())
+    {
+        qMailLog(Messaging) << "Failed to add message information to Tracker:" << query.error();
+        return false;
+    }
+    return true;
+}
+
+bool SparqlIndexer::updateMessageMetaData(const QMailMessageMetaData& message)
+{
+    QString request;
+    QTextStream q(&request);
+
+    q << dropObjectsQuery(QMailMessageIdList() << message.id());
+    q << insertObjectQuery(message);
+
+    SparqlQuery query(SparqlQuery::UpdateQuery, request);
+    if (!query.exec())
+    {
+        qMailLog(Messaging) << "Failed to update message information in Tracker:" << query.error();
+        return false;
+    }
+    return true;
+}
+
+bool SparqlIndexer::addAccounts(const QMailAccountIdList& ids)
+{
+    return ::addObjects<QMailAccount,QMailAccountId>(ids);
+}
+
+bool SparqlIndexer::updateAccounts(const QMailAccountIdList& ids)
+{
+    return ::updateObjects<QMailAccount,QMailAccountId>(ids);
+}
+
+bool SparqlIndexer::removeAccounts(const QMailAccountIdList& ids)
+{
+    return ::removeObjects(ids);
+}
+
+bool SparqlIndexer::addFolders(const QMailFolderIdList& ids)
+{
+    return ::addObjects<QMailFolder,QMailFolderId>(ids);
+}
+
+bool SparqlIndexer::updateFolders(const QMailFolderIdList& ids)
+{
+    return ::updateObjects<QMailFolder,QMailFolderId>(ids);
+}
+
+bool SparqlIndexer::removeFolders(const QMailFolderIdList& ids)
+{
+    return ::removeObjects(ids);
+}
+
+bool SparqlIndexer::addMessages(const QMailMessageIdList& ids)
+{
+    return addObjects<QMailMessage,QMailMessageId>(ids);
+}
+
+bool SparqlIndexer::updateMessages(const QMailMessageIdList& ids)
+{
+    return updateObjects<QMailMessage,QMailMessageId>(ids);
+}
+
+bool SparqlIndexer::removeMessages(const QMailMessageIdList& ids)
+{
+    return removeObjects(ids);
+}
diff --git a/src/tools/messageserver/sparqlindexer.h b/src/tools/messageserver/sparqlindexer.h
new file mode 100644
index 0000000..41f4139
--- /dev/null
+++ b/src/tools/messageserver/sparqlindexer.h
@@ -0,0 +1,80 @@
+/****************************************************************************
+**
+** Copyright (C) 2009 Nokia Corporation and/or its subsidiary(-ies).
+** Contact: Qt Software Information (qt-info@nokia.com)
+**
+** This file is part of the Qt Messaging Framework.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** No Commercial Usage
+** This file contains pre-release code and may not be distributed.
+** You may use this file in accordance with the terms and conditions
+** contained in the either Technology Preview License Agreement or the
+** Beta Release License Agreement.
+**
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 2.1 as published by the Free Software
+** Foundation and appearing in the file LICENSE.LGPL included in the
+** packaging of this file.  Please review the following information to
+** ensure the GNU Lesser General Public License version 2.1 requirements
+** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Nokia gives you certain
+** additional rights. These rights are described in the Nokia Qt LGPL
+** Exception version 1.0, included in the file LGPL_EXCEPTION.txt in this
+** package.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU
+** General Public License version 3.0 as published by the Free Software
+** Foundation and appearing in the file LICENSE.GPL included in the
+** packaging of this file.  Please review the following information to
+** ensure the GNU General Public License version 3.0 requirements will be
+** met: http://www.gnu.org/copyleft/gpl.html.
+**
+** If you are unsure which license is appropriate for your use, please
+** contact the sales department at qt-sales@nokia.com.
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#ifndef SPARQLINDEXER_H
+#define SPARQLINDEXER_H
+
+#include <QObject>
+
+#include <qmailaccount.h>
+#include <qmailfolder.h>
+#include <qmailmessage.h>
+
+#include <sparqldatabase.h>
+
+class SparqlIndexer : public QObject
+{
+    Q_OBJECT
+public:
+    SparqlIndexer(QObject* parent = NULL);
+    virtual ~SparqlIndexer();
+
+    bool addMessageMetaData(const QMailMessageMetaData& message);
+    bool updateMessageMetaData(const QMailMessageMetaData& message);
+
+public slots:
+    bool addAccounts(const QMailAccountIdList& ids);
+    bool updateAccounts(const QMailAccountIdList& ids);
+    bool removeAccounts(const QMailAccountIdList& ids);
+
+    bool addFolders(const QMailFolderIdList& ids);
+    bool updateFolders(const QMailFolderIdList& ids);
+    bool removeFolders(const QMailFolderIdList& ids);
+
+    bool addMessages(const QMailMessageIdList& ids);
+    bool updateMessages(const QMailMessageIdList& ids);
+    bool removeMessages(const QMailMessageIdList& ids);
+
+private:
+    SparqlDatabase mDatabase;
+};
+
+#endif // SPARQLINDEXER_H
diff --git a/tests/tests.pro b/tests/tests.pro
index 6cd0a15..f60f7ff 100644
--- a/tests/tests.pro
+++ b/tests/tests.pro
@@ -15,3 +15,9 @@ SUBDIRS = \
 
 CONFIG += unittest
 
+# Install test file descriptopm
+test_description.files = tests.xml
+test_description.path  = $$QMF_INSTALL_ROOT/tests
+
+INSTALLS += test_description
+
diff --git a/tests/tests.xml b/tests/tests.xml
new file mode 100644
index 0000000..cabc65d
--- /dev/null
+++ b/tests/tests.xml
@@ -0,0 +1 @@
+<testdefinition version="0.1"><suite name="libqmf-tests"><set description="libqmf-tests:tst_qmailmessagepart" name="/usr/tests/qmf/tst_qmailmessagepart"><case description="libqmf-tests:tst_qmailmessagepart:contentID" name="tst_qmailmessagepart-contentID"><step>/usr/tests/qmf/tst_qmailmessagepart contentID</step></case><case description="libqmf-tests:tst_qmailmessagepart:setContentID" name="tst_qmailmessagepart-setContentID"><step>/usr/tests/qmf/tst_qmailmessagepart setContentID</step></case><case description="libqmf-tests:tst_qmailmessagepart:contentLocation" name="tst_qmailmessagepart-contentLocation"><step>/usr/tests/qmf/tst_qmailmessagepart contentLocation</step></case><case description="libqmf-tests:tst_qmailmessagepart:setContentLocation" name="tst_qmailmessagepart-setContentLocation"><step>/usr/tests/qmf/tst_qmailmessagepart setContentLocation</step></case><case description="libqmf-tests:tst_qmailmessagepart:contentDescription" name="tst_qmailmessagepart-contentDescription"><step>/usr/tests/qmf/tst_qmailmessagepart contentDescription</step></case><case description="libqmf-tests:tst_qmailmessagepart:setContentDescription" name="tst_qmailmessagepart-setContentDescription"><step>/usr/tests/qmf/tst_qmailmessagepart setContentDescription</step></case><case description="libqmf-tests:tst_qmailmessagepart:contentDisposition" name="tst_qmailmessagepart-contentDisposition"><step>/usr/tests/qmf/tst_qmailmessagepart contentDisposition</step></case><case description="libqmf-tests:tst_qmailmessagepart:setContentDisposition" name="tst_qmailmessagepart-setContentDisposition"><step>/usr/tests/qmf/tst_qmailmessagepart setContentDisposition</step></case><case description="libqmf-tests:tst_qmailmessagepart:contentLanguage" name="tst_qmailmessagepart-contentLanguage"><step>/usr/tests/qmf/tst_qmailmessagepart contentLanguage</step></case><case description="libqmf-tests:tst_qmailmessagepart:setContentLanguage" name="tst_qmailmessagepart-setContentLanguage"><step>/usr/tests/qmf/tst_qmailmessagepart setContentLanguage</step></case><case description="libqmf-tests:tst_qmailmessagepart:headerField" name="tst_qmailmessagepart-headerField"><step>/usr/tests/qmf/tst_qmailmessagepart headerField</step></case><case description="libqmf-tests:tst_qmailmessagepart:headerFieldText" name="tst_qmailmessagepart-headerFieldText"><step>/usr/tests/qmf/tst_qmailmessagepart headerFieldText</step></case><case description="libqmf-tests:tst_qmailmessagepart:headerFields" name="tst_qmailmessagepart-headerFields"><step>/usr/tests/qmf/tst_qmailmessagepart headerFields</step></case><case description="libqmf-tests:tst_qmailmessagepart:headerFieldsText" name="tst_qmailmessagepart-headerFieldsText"><step>/usr/tests/qmf/tst_qmailmessagepart headerFieldsText</step></case><case description="libqmf-tests:tst_qmailmessagepart:setHeaderField" name="tst_qmailmessagepart-setHeaderField"><step>/usr/tests/qmf/tst_qmailmessagepart setHeaderField</step></case><case description="libqmf-tests:tst_qmailmessagepart:appendHeaderField" name="tst_qmailmessagepart-appendHeaderField"><step>/usr/tests/qmf/tst_qmailmessagepart appendHeaderField</step></case><case description="libqmf-tests:tst_qmailmessagepart:removeHeaderField" name="tst_qmailmessagepart-removeHeaderField"><step>/usr/tests/qmf/tst_qmailmessagepart removeHeaderField</step></case><case description="libqmf-tests:tst_qmailmessagepart:testSerialization" name="tst_qmailmessagepart-testSerialization"><step>/usr/tests/qmf/tst_qmailmessagepart testSerialization</step></case><environments><scratchbox>true</scratchbox><hardware>true</hardware></environments></set><set description="libqmf-tests:tst_qmailmessageheader" name="/usr/tests/qmf/tst_qmailmessageheader"><case description="libqmf-tests:tst_qmailmessageheader:" name="tst_qmailmessageheader-"><step>/usr/tests/qmf/tst_qmailmessageheader </step></case><environments><scratchbox>true</scratchbox><hardware>true</hardware></environments></set><set description="libqmf-tests:tst_qmailaddress" name="/usr/tests/qmf/tst_qmailaddress"><case description="libqmf-tests:tst_qmailaddress:constructor1" name="tst_qmailaddress-constructor1"><step>/usr/tests/qmf/tst_qmailaddress constructor1</step></case><case description="libqmf-tests:tst_qmailaddress:constructor2" name="tst_qmailaddress-constructor2"><step>/usr/tests/qmf/tst_qmailaddress constructor2</step></case><case description="libqmf-tests:tst_qmailaddress:name" name="tst_qmailaddress-name"><step>/usr/tests/qmf/tst_qmailaddress name</step></case><case description="libqmf-tests:tst_qmailaddress:address" name="tst_qmailaddress-address"><step>/usr/tests/qmf/tst_qmailaddress address</step></case><case description="libqmf-tests:tst_qmailaddress:isGroup" name="tst_qmailaddress-isGroup"><step>/usr/tests/qmf/tst_qmailaddress isGroup</step></case><case description="libqmf-tests:tst_qmailaddress:groupMembers" name="tst_qmailaddress-groupMembers"><step>/usr/tests/qmf/tst_qmailaddress groupMembers</step></case><case description="libqmf-tests:tst_qmailaddress:notGroup" name="tst_qmailaddress-notGroup"><step>/usr/tests/qmf/tst_qmailaddress notGroup</step></case><case description="libqmf-tests:tst_qmailaddress:toString" name="tst_qmailaddress-toString"><step>/usr/tests/qmf/tst_qmailaddress toString</step></case><case description="libqmf-tests:tst_qmailaddress:isPhoneNumber" name="tst_qmailaddress-isPhoneNumber"><step>/usr/tests/qmf/tst_qmailaddress isPhoneNumber</step></case><case description="libqmf-tests:tst_qmailaddress:isEmailAddress" name="tst_qmailaddress-isEmailAddress"><step>/usr/tests/qmf/tst_qmailaddress isEmailAddress</step></case><case description="libqmf-tests:tst_qmailaddress:toStringList" name="tst_qmailaddress-toStringList"><step>/usr/tests/qmf/tst_qmailaddress toStringList</step></case><case description="libqmf-tests:tst_qmailaddress:fromStringList1" name="tst_qmailaddress-fromStringList1"><step>/usr/tests/qmf/tst_qmailaddress fromStringList1</step></case><case description="libqmf-tests:tst_qmailaddress:fromStringList2" name="tst_qmailaddress-fromStringList2"><step>/usr/tests/qmf/tst_qmailaddress fromStringList2</step></case><case description="libqmf-tests:tst_qmailaddress:removeComments" name="tst_qmailaddress-removeComments"><step>/usr/tests/qmf/tst_qmailaddress removeComments</step></case><case description="libqmf-tests:tst_qmailaddress:removeWhitespace" name="tst_qmailaddress-removeWhitespace"><step>/usr/tests/qmf/tst_qmailaddress removeWhitespace</step></case><environments><scratchbox>true</scratchbox><hardware>true</hardware></environments></set><set description="libqmf-tests:tst_qmailmessagebody" name="/usr/tests/qmf/tst_qmailmessagebody"><case description="libqmf-tests:tst_qmailmessagebody:fromQByteArray" name="tst_qmailmessagebody-fromQByteArray"><step>/usr/tests/qmf/tst_qmailmessagebody fromQByteArray</step></case><case description="libqmf-tests:tst_qmailmessagebody:fromQString" name="tst_qmailmessagebody-fromQString"><step>/usr/tests/qmf/tst_qmailmessagebody fromQString</step></case><case description="libqmf-tests:tst_qmailmessagebody:fromFile" name="tst_qmailmessagebody-fromFile"><step>/usr/tests/qmf/tst_qmailmessagebody fromFile</step></case><case description="libqmf-tests:tst_qmailmessagebody:toFile" name="tst_qmailmessagebody-toFile"><step>/usr/tests/qmf/tst_qmailmessagebody toFile</step></case><environments><scratchbox>true</scratchbox><hardware>true</hardware></environments></set><set description="libqmf-tests:tst_qmailcodec" name="/usr/tests/qmf/tst_qmailcodec"><case description="libqmf-tests:tst_qmailcodec:encode" name="tst_qmailcodec-encode"><step>/usr/tests/qmf/tst_qmailcodec encode</step></case><case description="libqmf-tests:tst_qmailcodec:decode" name="tst_qmailcodec-decode"><step>/usr/tests/qmf/tst_qmailcodec decode</step></case><case description="libqmf-tests:tst_qmailcodec:line_lengths" name="tst_qmailcodec-line_lengths"><step>/usr/tests/qmf/tst_qmailcodec line_lengths</step></case><case description="libqmf-tests:tst_qmailcodec:buffer_sizes" name="tst_qmailcodec-buffer_sizes"><step>/usr/tests/qmf/tst_qmailcodec buffer_sizes</step></case><case description="libqmf-tests:tst_qmailcodec:embedded_newlines" name="tst_qmailcodec-embedded_newlines"><step>/usr/tests/qmf/tst_qmailcodec embedded_newlines</step></case><environments><scratchbox>true</scratchbox><hardware>true</hardware></environments></set><set description="libqmf-tests:tst_messageserver" name="/usr/tests/qmf/tst_messageserver"><case description="libqmf-tests:tst_messageserver:completeRetrievalImap" name="tst_messageserver-completeRetrievalImap"><step>/usr/tests/qmf/tst_messageserver completeRetrievalImap</step></case><case description="libqmf-tests:tst_messageserver:removeMessages" name="tst_messageserver-removeMessages"><step>/usr/tests/qmf/tst_messageserver removeMessages</step></case><case description="libqmf-tests:tst_messageserver:replaceMessages" name="tst_messageserver-replaceMessages"><step>/usr/tests/qmf/tst_messageserver replaceMessages</step></case><environments><scratchbox>true</scratchbox><hardware>true</hardware></environments></set><set description="libqmf-tests:tst_qmailstorekeys" name="/usr/tests/qmf/tst_qmailstorekeys"><case description="libqmf-tests:tst_qmailstorekeys:simpleKeys" name="tst_qmailstorekeys-simpleKeys"><step>/usr/tests/qmf/tst_qmailstorekeys simpleKeys</step></case><case description="libqmf-tests:tst_qmailstorekeys:accountId" name="tst_qmailstorekeys-accountId"><step>/usr/tests/qmf/tst_qmailstorekeys accountId</step></case><case description="libqmf-tests:tst_qmailstorekeys:accountName" name="tst_qmailstorekeys-accountName"><step>/usr/tests/qmf/tst_qmailstorekeys accountName</step></case><case description="libqmf-tests:tst_qmailstorekeys:accountMessageType" name="tst_qmailstorekeys-accountMessageType"><step>/usr/tests/qmf/tst_qmailstorekeys accountMessageType</step></case><case description="libqmf-tests:tst_qmailstorekeys:accountFromAddress" name="tst_qmailstorekeys-accountFromAddress"><step>/usr/tests/qmf/tst_qmailstorekeys accountFromAddress</step></case><case description="libqmf-tests:tst_qmailstorekeys:accountStatus" name="tst_qmailstorekeys-accountStatus"><step>/usr/tests/qmf/tst_qmailstorekeys accountStatus</step></case><case description="libqmf-tests:tst_qmailstorekeys:accountCustomField" name="tst_qmailstorekeys-accountCustomField"><step>/usr/tests/qmf/tst_qmailstorekeys accountCustomField</step></case><case description="libqmf-tests:tst_qmailstorekeys:folderId" name="tst_qmailstorekeys-folderId"><step>/usr/tests/qmf/tst_qmailstorekeys folderId</step></case><case description="libqmf-tests:tst_qmailstorekeys:folderPath" name="tst_qmailstorekeys-folderPath"><step>/usr/tests/qmf/tst_qmailstorekeys folderPath</step></case><case description="libqmf-tests:tst_qmailstorekeys:folderParentFolderId" name="tst_qmailstorekeys-folderParentFolderId"><step>/usr/tests/qmf/tst_qmailstorekeys folderParentFolderId</step></case><case description="libqmf-tests:tst_qmailstorekeys:folderParentAccountId" name="tst_qmailstorekeys-folderParentAccountId"><step>/usr/tests/qmf/tst_qmailstorekeys folderParentAccountId</step></case><case description="libqmf-tests:tst_qmailstorekeys:folderDisplayName" name="tst_qmailstorekeys-folderDisplayName"><step>/usr/tests/qmf/tst_qmailstorekeys folderDisplayName</step></case><case description="libqmf-tests:tst_qmailstorekeys:folderStatus" name="tst_qmailstorekeys-folderStatus"><step>/usr/tests/qmf/tst_qmailstorekeys folderStatus</step></case><case description="libqmf-tests:tst_qmailstorekeys:folderAncestorFolderIds" name="tst_qmailstorekeys-folderAncestorFolderIds"><step>/usr/tests/qmf/tst_qmailstorekeys folderAncestorFolderIds</step></case><case description="libqmf-tests:tst_qmailstorekeys:folderCustomField" name="tst_qmailstorekeys-folderCustomField"><step>/usr/tests/qmf/tst_qmailstorekeys folderCustomField</step></case><case description="libqmf-tests:tst_qmailstorekeys:messageId" name="tst_qmailstorekeys-messageId"><step>/usr/tests/qmf/tst_qmailstorekeys messageId</step></case><case description="libqmf-tests:tst_qmailstorekeys:messageType" name="tst_qmailstorekeys-messageType"><step>/usr/tests/qmf/tst_qmailstorekeys messageType</step></case><case description="libqmf-tests:tst_qmailstorekeys:messageParentFolderId" name="tst_qmailstorekeys-messageParentFolderId"><step>/usr/tests/qmf/tst_qmailstorekeys messageParentFolderId</step></case><case description="libqmf-tests:tst_qmailstorekeys:messageSender" name="tst_qmailstorekeys-messageSender"><step>/usr/tests/qmf/tst_qmailstorekeys messageSender</step></case><case description="libqmf-tests:tst_qmailstorekeys:messageRecipients" name="tst_qmailstorekeys-messageRecipients"><step>/usr/tests/qmf/tst_qmailstorekeys messageRecipients</step></case><case description="libqmf-tests:tst_qmailstorekeys:messageSubject" name="tst_qmailstorekeys-messageSubject"><step>/usr/tests/qmf/tst_qmailstorekeys messageSubject</step></case><case description="libqmf-tests:tst_qmailstorekeys:messageTimeStamp" name="tst_qmailstorekeys-messageTimeStamp"><step>/usr/tests/qmf/tst_qmailstorekeys messageTimeStamp</step></case><case description="libqmf-tests:tst_qmailstorekeys:messageReceptionTimeStamp" name="tst_qmailstorekeys-messageReceptionTimeStamp"><step>/usr/tests/qmf/tst_qmailstorekeys messageReceptionTimeStamp</step></case><case description="libqmf-tests:tst_qmailstorekeys:messageStatus" name="tst_qmailstorekeys-messageStatus"><step>/usr/tests/qmf/tst_qmailstorekeys messageStatus</step></case><case description="libqmf-tests:tst_qmailstorekeys:messageConversation" name="tst_qmailstorekeys-messageConversation"><step>/usr/tests/qmf/tst_qmailstorekeys messageConversation</step></case><case description="libqmf-tests:tst_qmailstorekeys:messageServerUid" name="tst_qmailstorekeys-messageServerUid"><step>/usr/tests/qmf/tst_qmailstorekeys messageServerUid</step></case><case description="libqmf-tests:tst_qmailstorekeys:messageSize" name="tst_qmailstorekeys-messageSize"><step>/usr/tests/qmf/tst_qmailstorekeys messageSize</step></case><case description="libqmf-tests:tst_qmailstorekeys:messageParentAccountId" name="tst_qmailstorekeys-messageParentAccountId"><step>/usr/tests/qmf/tst_qmailstorekeys messageParentAccountId</step></case><case description="libqmf-tests:tst_qmailstorekeys:messageAncestorFolderIds" name="tst_qmailstorekeys-messageAncestorFolderIds"><step>/usr/tests/qmf/tst_qmailstorekeys messageAncestorFolderIds</step></case><case description="libqmf-tests:tst_qmailstorekeys:messageContentType" name="tst_qmailstorekeys-messageContentType"><step>/usr/tests/qmf/tst_qmailstorekeys messageContentType</step></case><case description="libqmf-tests:tst_qmailstorekeys:messagePreviousParentFolderId" name="tst_qmailstorekeys-messagePreviousParentFolderId"><step>/usr/tests/qmf/tst_qmailstorekeys messagePreviousParentFolderId</step></case><case description="libqmf-tests:tst_qmailstorekeys:messageInResponseTo" name="tst_qmailstorekeys-messageInResponseTo"><step>/usr/tests/qmf/tst_qmailstorekeys messageInResponseTo</step></case><case description="libqmf-tests:tst_qmailstorekeys:messageResponseType" name="tst_qmailstorekeys-messageResponseType"><step>/usr/tests/qmf/tst_qmailstorekeys messageResponseType</step></case><case description="libqmf-tests:tst_qmailstorekeys:messageCustom" name="tst_qmailstorekeys-messageCustom"><step>/usr/tests/qmf/tst_qmailstorekeys messageCustom</step></case><case description="libqmf-tests:tst_qmailstorekeys:listModel" name="tst_qmailstorekeys-listModel"><step>/usr/tests/qmf/tst_qmailstorekeys listModel</step></case><case description="libqmf-tests:tst_qmailstorekeys:threadedModel" name="tst_qmailstorekeys-threadedModel"><step>/usr/tests/qmf/tst_qmailstorekeys threadedModel</step></case><environments><scratchbox>true</scratchbox><hardware>true</hardware></environments></set><set description="libqmf-tests:tst_qprivateimplementation" name="/usr/tests/qmf/tst_qprivateimplementation"><case description="libqmf-tests:tst_qprivateimplementation:basicTest" name="tst_qprivateimplementation-basicTest"><step>/usr/tests/qmf/tst_qprivateimplementation basicTest</step></case><environments><scratchbox>true</scratchbox><hardware>true</hardware></environments></set><set description="libqmf-tests:tst_python_email" name="/usr/tests/qmf/tst_python_email"><case description="libqmf-tests:tst_python_email:test_get_all" name="tst_python_email-test_get_all"><step>/usr/tests/qmf/tst_python_email test_get_all</step></case><case description="libqmf-tests:tst_python_email:test_get_charsets" name="tst_python_email-test_get_charsets"><step>/usr/tests/qmf/tst_python_email test_get_charsets</step></case><case description="libqmf-tests:tst_python_email:test_get_filename" name="tst_python_email-test_get_filename"><step>/usr/tests/qmf/tst_python_email test_get_filename</step></case><case description="libqmf-tests:tst_python_email:test_get_filename_with_name_parameter" name="tst_python_email-test_get_filename_with_name_parameter"><step>/usr/tests/qmf/tst_python_email test_get_filename_with_name_parameter</step></case><case description="libqmf-tests:tst_python_email:test_get_boundary" name="tst_python_email-test_get_boundary"><step>/usr/tests/qmf/tst_python_email test_get_boundary</step></case><case description="libqmf-tests:tst_python_email:test_set_boundary" name="tst_python_email-test_set_boundary"><step>/usr/tests/qmf/tst_python_email test_set_boundary</step></case><case description="libqmf-tests:tst_python_email:test_get_decoded_payload" name="tst_python_email-test_get_decoded_payload"><step>/usr/tests/qmf/tst_python_email test_get_decoded_payload</step></case><case description="libqmf-tests:tst_python_email:test_decoded_generator" name="tst_python_email-test_decoded_generator"><step>/usr/tests/qmf/tst_python_email test_decoded_generator</step></case><case description="libqmf-tests:tst_python_email:test_as_string" name="tst_python_email-test_as_string"><step>/usr/tests/qmf/tst_python_email test_as_string</step></case><case description="libqmf-tests:tst_python_email:test_get_params" name="tst_python_email-test_get_params"><step>/usr/tests/qmf/tst_python_email test_get_params</step></case><case description="libqmf-tests:tst_python_email:test_get_param_liberal" name="tst_python_email-test_get_param_liberal"><step>/usr/tests/qmf/tst_python_email test_get_param_liberal</step></case><case description="libqmf-tests:tst_python_email:test_get_param" name="tst_python_email-test_get_param"><step>/usr/tests/qmf/tst_python_email test_get_param</step></case><case description="libqmf-tests:tst_python_email:test_get_param_funky_continuation_lines" name="tst_python_email-test_get_param_funky_continuation_lines"><step>/usr/tests/qmf/tst_python_email test_get_param_funky_continuation_lines</step></case><case description="libqmf-tests:tst_python_email:test_get_param_with_semis_in_quotes" name="tst_python_email-test_get_param_with_semis_in_quotes"><step>/usr/tests/qmf/tst_python_email test_get_param_with_semis_in_quotes</step></case><case description="libqmf-tests:tst_python_email:test_has_key" name="tst_python_email-test_has_key"><step>/usr/tests/qmf/tst_python_email test_has_key</step></case><case description="libqmf-tests:tst_python_email:test_del_param" name="tst_python_email-test_del_param"><step>/usr/tests/qmf/tst_python_email test_del_param</step></case><case description="libqmf-tests:tst_python_email:test_get_content_type_from_message_implicit" name="tst_python_email-test_get_content_type_from_message_implicit"><step>/usr/tests/qmf/tst_python_email test_get_content_type_from_message_implicit</step></case><case description="libqmf-tests:tst_python_email:test_get_content_type_from_message_explicit" name="tst_python_email-test_get_content_type_from_message_explicit"><step>/usr/tests/qmf/tst_python_email test_get_content_type_from_message_explicit</step></case><case description="libqmf-tests:tst_python_email:test_get_content_type_from_message_text_plain_implicit" name="tst_python_email-test_get_content_type_from_message_text_plain_implicit"><step>/usr/tests/qmf/tst_python_email test_get_content_type_from_message_text_plain_implicit</step></case><case description="libqmf-tests:tst_python_email:test_get_content_type_from_message_text_plain_explicit" name="tst_python_email-test_get_content_type_from_message_text_plain_explicit"><step>/usr/tests/qmf/tst_python_email test_get_content_type_from_message_text_plain_explicit</step></case><case description="libqmf-tests:tst_python_email:test_get_content_maintype_from_message_implicit" name="tst_python_email-test_get_content_maintype_from_message_implicit"><step>/usr/tests/qmf/tst_python_email test_get_content_maintype_from_message_implicit</step></case><case description="libqmf-tests:tst_python_email:test_get_content_maintype_from_message_explicit" name="tst_python_email-test_get_content_maintype_from_message_explicit"><step>/usr/tests/qmf/tst_python_email test_get_content_maintype_from_message_explicit</step></case><case description="libqmf-tests:tst_python_email:test_get_content_maintype_from_message_text_plain_implicit" name="tst_python_email-test_get_content_maintype_from_message_text_plain_implicit"><step>/usr/tests/qmf/tst_python_email test_get_content_maintype_from_message_text_plain_implicit</step></case><case description="libqmf-tests:tst_python_email:test_get_content_maintype_from_message_text_plain_explicit" name="tst_python_email-test_get_content_maintype_from_message_text_plain_explicit"><step>/usr/tests/qmf/tst_python_email test_get_content_maintype_from_message_text_plain_explicit</step></case><case description="libqmf-tests:tst_python_email:test_get_content_subtype_from_message_implicit" name="tst_python_email-test_get_content_subtype_from_message_implicit"><step>/usr/tests/qmf/tst_python_email test_get_content_subtype_from_message_implicit</step></case><case description="libqmf-tests:tst_python_email:test_get_content_subtype_from_message_explicit" name="tst_python_email-test_get_content_subtype_from_message_explicit"><step>/usr/tests/qmf/tst_python_email test_get_content_subtype_from_message_explicit</step></case><case description="libqmf-tests:tst_python_email:test_get_content_subtype_from_message_text_plain_implicit" name="tst_python_email-test_get_content_subtype_from_message_text_plain_implicit"><step>/usr/tests/qmf/tst_python_email test_get_content_subtype_from_message_text_plain_implicit</step></case><case description="libqmf-tests:tst_python_email:test_get_content_subtype_from_message_text_plain_explicit" name="tst_python_email-test_get_content_subtype_from_message_text_plain_explicit"><step>/usr/tests/qmf/tst_python_email test_get_content_subtype_from_message_text_plain_explicit</step></case><case description="libqmf-tests:tst_python_email:test_replace_header" name="tst_python_email-test_replace_header"><step>/usr/tests/qmf/tst_python_email test_replace_header</step></case><case description="libqmf-tests:tst_python_email:test_broken_base64_payload" name="tst_python_email-test_broken_base64_payload"><step>/usr/tests/qmf/tst_python_email test_broken_base64_payload</step></case><case description="libqmf-tests:tst_python_email:test_default_cte" name="tst_python_email-test_default_cte"><step>/usr/tests/qmf/tst_python_email test_default_cte</step></case><case description="libqmf-tests:tst_python_email:test_long_nonstring" name="tst_python_email-test_long_nonstring"><step>/usr/tests/qmf/tst_python_email test_long_nonstring</step></case><case description="libqmf-tests:tst_python_email:test_long_header_encode" name="tst_python_email-test_long_header_encode"><step>/usr/tests/qmf/tst_python_email test_long_header_encode</step></case><case description="libqmf-tests:tst_python_email:test_no_semis_header_splitter" name="tst_python_email-test_no_semis_header_splitter"><step>/usr/tests/qmf/tst_python_email test_no_semis_header_splitter</step></case><case description="libqmf-tests:tst_python_email:test_no_split_long_header" name="tst_python_email-test_no_split_long_header"><step>/usr/tests/qmf/tst_python_email test_no_split_long_header</step></case><case description="libqmf-tests:tst_python_email:test_splitting_multiple_long_lines" name="tst_python_email-test_splitting_multiple_long_lines"><step>/usr/tests/qmf/tst_python_email test_splitting_multiple_long_lines</step></case><case description="libqmf-tests:tst_python_email:test_splitting_first_line_only_is_long" name="tst_python_email-test_splitting_first_line_only_is_long"><step>/usr/tests/qmf/tst_python_email test_splitting_first_line_only_is_long</step></case><case description="libqmf-tests:tst_python_email:test_long_8bit_header" name="tst_python_email-test_long_8bit_header"><step>/usr/tests/qmf/tst_python_email test_long_8bit_header</step></case><case description="libqmf-tests:tst_python_email:test_long_to_header" name="tst_python_email-test_long_to_header"><step>/usr/tests/qmf/tst_python_email test_long_to_header</step></case><case description="libqmf-tests:tst_python_email:test_long_field_name" name="tst_python_email-test_long_field_name"><step>/usr/tests/qmf/tst_python_email test_long_field_name</step></case><case description="libqmf-tests:tst_python_email:test_string_headerinst_eq" name="tst_python_email-test_string_headerinst_eq"><step>/usr/tests/qmf/tst_python_email test_string_headerinst_eq</step></case><case description="libqmf-tests:tst_python_email:test_another_long_multiline_header" name="tst_python_email-test_another_long_multiline_header"><step>/usr/tests/qmf/tst_python_email test_another_long_multiline_header</step></case><case description="libqmf-tests:tst_python_email:test_long_lines_with_different_header" name="tst_python_email-test_long_lines_with_different_header"><step>/usr/tests/qmf/tst_python_email test_long_lines_with_different_header</step></case><case description="libqmf-tests:tst_python_email:TestMIMEAudio" name="tst_python_email-TestMIMEAudio"><step>/usr/tests/qmf/tst_python_email TestMIMEAudio</step></case><case description="libqmf-tests:tst_python_email:TestMIMEImage" name="tst_python_email-TestMIMEImage"><step>/usr/tests/qmf/tst_python_email TestMIMEImage</step></case><case description="libqmf-tests:tst_python_email:test_hierarchy" name="tst_python_email-test_hierarchy"><step>/usr/tests/qmf/tst_python_email test_hierarchy</step></case><case description="libqmf-tests:tst_python_email:test_empty_multipart_idempotent" name="tst_python_email-test_empty_multipart_idempotent"><step>/usr/tests/qmf/tst_python_email test_empty_multipart_idempotent</step></case><case description="libqmf-tests:tst_python_email:test_no_parts_in_a_multipart_with_none_epilogue" name="tst_python_email-test_no_parts_in_a_multipart_with_none_epilogue"><step>/usr/tests/qmf/tst_python_email test_no_parts_in_a_multipart_with_none_epilogue</step></case><case description="libqmf-tests:tst_python_email:test_no_parts_in_a_multipart_with_empty_epilogue" name="tst_python_email-test_no_parts_in_a_multipart_with_empty_epilogue"><step>/usr/tests/qmf/tst_python_email test_no_parts_in_a_multipart_with_empty_epilogue</step></case><case description="libqmf-tests:tst_python_email:test_one_part_in_a_multipart" name="tst_python_email-test_one_part_in_a_multipart"><step>/usr/tests/qmf/tst_python_email test_one_part_in_a_multipart</step></case><case description="libqmf-tests:tst_python_email:test_message_external_body" name="tst_python_email-test_message_external_body"><step>/usr/tests/qmf/tst_python_email test_message_external_body</step></case><case description="libqmf-tests:tst_python_email:test_double_boundary" name="tst_python_email-test_double_boundary"><step>/usr/tests/qmf/tst_python_email test_double_boundary</step></case><case description="libqmf-tests:tst_python_email:test_nested_inner_contains_outer_boundary" name="tst_python_email-test_nested_inner_contains_outer_boundary"><step>/usr/tests/qmf/tst_python_email test_nested_inner_contains_outer_boundary</step></case><case description="libqmf-tests:tst_python_email:test_nested_with_same_boundary" name="tst_python_email-test_nested_with_same_boundary"><step>/usr/tests/qmf/tst_python_email test_nested_with_same_boundary</step></case><case description="libqmf-tests:tst_python_email:test_boundary_in_non_multipart" name="tst_python_email-test_boundary_in_non_multipart"><step>/usr/tests/qmf/tst_python_email test_boundary_in_non_multipart</step></case><case description="libqmf-tests:tst_python_email:test_boundary_with_leading_space" name="tst_python_email-test_boundary_with_leading_space"><step>/usr/tests/qmf/tst_python_email test_boundary_with_leading_space</step></case><case description="libqmf-tests:tst_python_email:test_boundary_without_trailing_newline" name="tst_python_email-test_boundary_without_trailing_newline"><step>/usr/tests/qmf/tst_python_email test_boundary_without_trailing_newline</step></case><case description="libqmf-tests:tst_python_email:test_parse_missing_minor_type" name="tst_python_email-test_parse_missing_minor_type"><step>/usr/tests/qmf/tst_python_email test_parse_missing_minor_type</step></case><case description="libqmf-tests:tst_python_email:test_same_boundary_inner_outer" name="tst_python_email-test_same_boundary_inner_outer"><step>/usr/tests/qmf/tst_python_email test_same_boundary_inner_outer</step></case><case description="libqmf-tests:tst_python_email:test_multipart_no_boundary" name="tst_python_email-test_multipart_no_boundary"><step>/usr/tests/qmf/tst_python_email test_multipart_no_boundary</step></case><case description="libqmf-tests:tst_python_email:test_invalid_content_type" name="tst_python_email-test_invalid_content_type"><step>/usr/tests/qmf/tst_python_email test_invalid_content_type</step></case><case description="libqmf-tests:tst_python_email:test_no_start_boundary" name="tst_python_email-test_no_start_boundary"><step>/usr/tests/qmf/tst_python_email test_no_start_boundary</step></case><case description="libqmf-tests:tst_python_email:test_no_separating_blank_line" name="tst_python_email-test_no_separating_blank_line"><step>/usr/tests/qmf/tst_python_email test_no_separating_blank_line</step></case><case description="libqmf-tests:tst_python_email:test_lying_multipart" name="tst_python_email-test_lying_multipart"><step>/usr/tests/qmf/tst_python_email test_lying_multipart</step></case><case description="libqmf-tests:tst_python_email:test_missing_start_boundary" name="tst_python_email-test_missing_start_boundary"><step>/usr/tests/qmf/tst_python_email test_missing_start_boundary</step></case><case description="libqmf-tests:tst_python_email:test_whitespace_eater_unicode" name="tst_python_email-test_whitespace_eater_unicode"><step>/usr/tests/qmf/tst_python_email test_whitespace_eater_unicode</step></case><case description="libqmf-tests:tst_python_email:test_whitespace_eater_unicode_2" name="tst_python_email-test_whitespace_eater_unicode_2"><step>/usr/tests/qmf/tst_python_email test_whitespace_eater_unicode_2</step></case><case description="libqmf-tests:tst_python_email:test_rfc2047_without_whitespace" name="tst_python_email-test_rfc2047_without_whitespace"><step>/usr/tests/qmf/tst_python_email test_rfc2047_without_whitespace</step></case><case description="libqmf-tests:tst_python_email:test_rfc2047_with_whitespace" name="tst_python_email-test_rfc2047_with_whitespace"><step>/usr/tests/qmf/tst_python_email test_rfc2047_with_whitespace</step></case><case description="libqmf-tests:tst_python_email:test_generate" name="tst_python_email-test_generate"><step>/usr/tests/qmf/tst_python_email test_generate</step></case><case description="libqmf-tests:tst_python_email:test_parse_message_rfc822" name="tst_python_email-test_parse_message_rfc822"><step>/usr/tests/qmf/tst_python_email test_parse_message_rfc822</step></case><case description="libqmf-tests:tst_python_email:test_dsn" name="tst_python_email-test_dsn"><step>/usr/tests/qmf/tst_python_email test_dsn</step></case><case description="libqmf-tests:tst_python_email:test_epilogue" name="tst_python_email-test_epilogue"><step>/usr/tests/qmf/tst_python_email test_epilogue</step></case><case description="libqmf-tests:tst_python_email:test_default_type" name="tst_python_email-test_default_type"><step>/usr/tests/qmf/tst_python_email test_default_type</step></case><case description="libqmf-tests:tst_python_email:test_default_type_with_explicit_container_type" name="tst_python_email-test_default_type_with_explicit_container_type"><step>/usr/tests/qmf/tst_python_email test_default_type_with_explicit_container_type</step></case><case description="libqmf-tests:tst_python_email:TestIdempotent" name="tst_python_email-TestIdempotent"><step>/usr/tests/qmf/tst_python_email TestIdempotent</step></case><case description="libqmf-tests:tst_python_email:test_crlf_separation" name="tst_python_email-test_crlf_separation"><step>/usr/tests/qmf/tst_python_email test_crlf_separation</step></case><case description="libqmf-tests:tst_python_email:test_rfc2231_get_param" name="tst_python_email-test_rfc2231_get_param"><step>/usr/tests/qmf/tst_python_email test_rfc2231_get_param</step></case><case description="libqmf-tests:tst_python_email:test_rfc2231_set_param" name="tst_python_email-test_rfc2231_set_param"><step>/usr/tests/qmf/tst_python_email test_rfc2231_set_param</step></case><case description="libqmf-tests:tst_python_email:test_rfc2231_no_language_or_charset" name="tst_python_email-test_rfc2231_no_language_or_charset"><step>/usr/tests/qmf/tst_python_email test_rfc2231_no_language_or_charset</step></case><case description="libqmf-tests:tst_python_email:test_rfc2231_no_language_or_charset_in_filename" name="tst_python_email-test_rfc2231_no_language_or_charset_in_filename"><step>/usr/tests/qmf/tst_python_email test_rfc2231_no_language_or_charset_in_filename</step></case><case description="libqmf-tests:tst_python_email:test_rfc2231_partly_encoded" name="tst_python_email-test_rfc2231_partly_encoded"><step>/usr/tests/qmf/tst_python_email test_rfc2231_partly_encoded</step></case><case description="libqmf-tests:tst_python_email:test_rfc2231_no_language_or_charset_in_boundary" name="tst_python_email-test_rfc2231_no_language_or_charset_in_boundary"><step>/usr/tests/qmf/tst_python_email test_rfc2231_no_language_or_charset_in_boundary</step></case><case description="libqmf-tests:tst_python_email:test_rfc2231_no_language_or_charset_in_charset" name="tst_python_email-test_rfc2231_no_language_or_charset_in_charset"><step>/usr/tests/qmf/tst_python_email test_rfc2231_no_language_or_charset_in_charset</step></case><case description="libqmf-tests:tst_python_email:test_rfc2231_bad_encoding_in_filename" name="tst_python_email-test_rfc2231_bad_encoding_in_filename"><step>/usr/tests/qmf/tst_python_email test_rfc2231_bad_encoding_in_filename</step></case><case description="libqmf-tests:tst_python_email:test_rfc2231_bad_encoding_in_charset" name="tst_python_email-test_rfc2231_bad_encoding_in_charset"><step>/usr/tests/qmf/tst_python_email test_rfc2231_bad_encoding_in_charset</step></case><case description="libqmf-tests:tst_python_email:test_rfc2231_bad_character_in_charset" name="tst_python_email-test_rfc2231_bad_character_in_charset"><step>/usr/tests/qmf/tst_python_email test_rfc2231_bad_character_in_charset</step></case><case description="libqmf-tests:tst_python_email:test_rfc2231_bad_character_in_filename" name="tst_python_email-test_rfc2231_bad_character_in_filename"><step>/usr/tests/qmf/tst_python_email test_rfc2231_bad_character_in_filename</step></case><case description="libqmf-tests:tst_python_email:test_rfc2231_single_tick_in_filename_extended" name="tst_python_email-test_rfc2231_single_tick_in_filename_extended"><step>/usr/tests/qmf/tst_python_email test_rfc2231_single_tick_in_filename_extended</step></case><case description="libqmf-tests:tst_python_email:test_rfc2231_tick_attack_extended" name="tst_python_email-test_rfc2231_tick_attack_extended"><step>/usr/tests/qmf/tst_python_email test_rfc2231_tick_attack_extended</step></case><case description="libqmf-tests:tst_python_email:test_rfc2231_no_extended_values" name="tst_python_email-test_rfc2231_no_extended_values"><step>/usr/tests/qmf/tst_python_email test_rfc2231_no_extended_values</step></case><case description="libqmf-tests:tst_python_email:test_rfc2231_encoded_then_unencoded_segments" name="tst_python_email-test_rfc2231_encoded_then_unencoded_segments"><step>/usr/tests/qmf/tst_python_email test_rfc2231_encoded_then_unencoded_segments</step></case><case description="libqmf-tests:tst_python_email:test_rfc2231_unencoded_then_encoded_segments" name="tst_python_email-test_rfc2231_unencoded_then_encoded_segments"><step>/usr/tests/qmf/tst_python_email test_rfc2231_unencoded_then_encoded_segments</step></case><environments><scratchbox>true</scratchbox><hardware>true</hardware></environments></set><set description="libqmf-tests:tst_longstring" name="/usr/tests/qmf/tst_longstring"><case description="libqmf-tests:tst_longstring:indexOf" name="tst_longstring-indexOf"><step>/usr/tests/qmf/tst_longstring indexOf</step></case><case description="libqmf-tests:tst_longstring:left" name="tst_longstring-left"><step>/usr/tests/qmf/tst_longstring left</step></case><case description="libqmf-tests:tst_longstring:right" name="tst_longstring-right"><step>/usr/tests/qmf/tst_longstring right</step></case><case description="libqmf-tests:tst_longstring:mid" name="tst_longstring-mid"><step>/usr/tests/qmf/tst_longstring mid</step></case><case description="libqmf-tests:tst_longstring:length" name="tst_longstring-length"><step>/usr/tests/qmf/tst_longstring length</step></case><case description="libqmf-tests:tst_longstring:isEmpty" name="tst_longstring-isEmpty"><step>/usr/tests/qmf/tst_longstring isEmpty</step></case><case description="libqmf-tests:tst_longstring:toQByteArray" name="tst_longstring-toQByteArray"><step>/usr/tests/qmf/tst_longstring toQByteArray</step></case><case description="libqmf-tests:tst_longstring:dataStream" name="tst_longstring-dataStream"><step>/usr/tests/qmf/tst_longstring dataStream</step></case><environments><scratchbox>true</scratchbox><hardware>true</hardware></environments></set><set description="libqmf-tests:tst_qmailstore" name="/usr/tests/qmf/tst_qmailstore"><case description="libqmf-tests:tst_qmailstore:addAccount" name="tst_qmailstore-addAccount"><step>/usr/tests/qmf/tst_qmailstore addAccount</step></case><case description="libqmf-tests:tst_qmailstore:addFolder" name="tst_qmailstore-addFolder"><step>/usr/tests/qmf/tst_qmailstore addFolder</step></case><case description="libqmf-tests:tst_qmailstore:addMessage" name="tst_qmailstore-addMessage"><step>/usr/tests/qmf/tst_qmailstore addMessage</step></case><case description="libqmf-tests:tst_qmailstore:addMessages" name="tst_qmailstore-addMessages"><step>/usr/tests/qmf/tst_qmailstore addMessages</step></case><case description="libqmf-tests:tst_qmailstore:addMessages2" name="tst_qmailstore-addMessages2"><step>/usr/tests/qmf/tst_qmailstore addMessages2</step></case><case description="libqmf-tests:tst_qmailstore:updateAccount" name="tst_qmailstore-updateAccount"><step>/usr/tests/qmf/tst_qmailstore updateAccount</step></case><case description="libqmf-tests:tst_qmailstore:updateFolder" name="tst_qmailstore-updateFolder"><step>/usr/tests/qmf/tst_qmailstore updateFolder</step></case><case description="libqmf-tests:tst_qmailstore:updateMessage" name="tst_qmailstore-updateMessage"><step>/usr/tests/qmf/tst_qmailstore updateMessage</step></case><case description="libqmf-tests:tst_qmailstore:updateMessages" name="tst_qmailstore-updateMessages"><step>/usr/tests/qmf/tst_qmailstore updateMessages</step></case><case description="libqmf-tests:tst_qmailstore:removeAccount" name="tst_qmailstore-removeAccount"><step>/usr/tests/qmf/tst_qmailstore removeAccount</step></case><case description="libqmf-tests:tst_qmailstore:removeFolder" name="tst_qmailstore-removeFolder"><step>/usr/tests/qmf/tst_qmailstore removeFolder</step></case><case description="libqmf-tests:tst_qmailstore:removeMessage" name="tst_qmailstore-removeMessage"><step>/usr/tests/qmf/tst_qmailstore removeMessage</step></case><case description="libqmf-tests:tst_qmailstore:remove1000Messages" name="tst_qmailstore-remove1000Messages"><step>/usr/tests/qmf/tst_qmailstore remove1000Messages</step></case><environments><scratchbox>true</scratchbox><hardware>true</hardware></environments></set><set description="libqmf-tests:tst_qmailmessage" name="/usr/tests/qmf/tst_qmailmessage"><case description="libqmf-tests:tst_qmailmessage:toRfc2822" name="tst_qmailmessage-toRfc2822"><step>/usr/tests/qmf/tst_qmailmessage toRfc2822</step></case><case description="libqmf-tests:tst_qmailmessage:fromRfc2822" name="tst_qmailmessage-fromRfc2822"><step>/usr/tests/qmf/tst_qmailmessage fromRfc2822</step></case><case description="libqmf-tests:tst_qmailmessage:id" name="tst_qmailmessage-id"><step>/usr/tests/qmf/tst_qmailmessage id</step></case><case description="libqmf-tests:tst_qmailmessage:setId" name="tst_qmailmessage-setId"><step>/usr/tests/qmf/tst_qmailmessage setId</step></case><case description="libqmf-tests:tst_qmailmessage:parentFolderId" name="tst_qmailmessage-parentFolderId"><step>/usr/tests/qmf/tst_qmailmessage parentFolderId</step></case><case description="libqmf-tests:tst_qmailmessage:setParentFolderId" name="tst_qmailmessage-setParentFolderId"><step>/usr/tests/qmf/tst_qmailmessage setParentFolderId</step></case><case description="libqmf-tests:tst_qmailmessage:messageType" name="tst_qmailmessage-messageType"><step>/usr/tests/qmf/tst_qmailmessage messageType</step></case><case description="libqmf-tests:tst_qmailmessage:setMessageType" name="tst_qmailmessage-setMessageType"><step>/usr/tests/qmf/tst_qmailmessage setMessageType</step></case><case description="libqmf-tests:tst_qmailmessage:setFrom" name="tst_qmailmessage-setFrom"><step>/usr/tests/qmf/tst_qmailmessage setFrom</step></case><case description="libqmf-tests:tst_qmailmessage:from" name="tst_qmailmessage-from"><step>/usr/tests/qmf/tst_qmailmessage from</step></case><case description="libqmf-tests:tst_qmailmessage:subject" name="tst_qmailmessage-subject"><step>/usr/tests/qmf/tst_qmailmessage subject</step></case><case description="libqmf-tests:tst_qmailmessage:setSubject" name="tst_qmailmessage-setSubject"><step>/usr/tests/qmf/tst_qmailmessage setSubject</step></case><case description="libqmf-tests:tst_qmailmessage:date" name="tst_qmailmessage-date"><step>/usr/tests/qmf/tst_qmailmessage date</step></case><case description="libqmf-tests:tst_qmailmessage:setDate" name="tst_qmailmessage-setDate"><step>/usr/tests/qmf/tst_qmailmessage setDate</step></case><case description="libqmf-tests:tst_qmailmessage:to" name="tst_qmailmessage-to"><step>/usr/tests/qmf/tst_qmailmessage to</step></case><case description="libqmf-tests:tst_qmailmessage:setTo" name="tst_qmailmessage-setTo"><step>/usr/tests/qmf/tst_qmailmessage setTo</step></case><case description="libqmf-tests:tst_qmailmessage:cc" name="tst_qmailmessage-cc"><step>/usr/tests/qmf/tst_qmailmessage cc</step></case><case description="libqmf-tests:tst_qmailmessage:setCc" name="tst_qmailmessage-setCc"><step>/usr/tests/qmf/tst_qmailmessage setCc</step></case><case description="libqmf-tests:tst_qmailmessage:bcc" name="tst_qmailmessage-bcc"><step>/usr/tests/qmf/tst_qmailmessage bcc</step></case><case description="libqmf-tests:tst_qmailmessage:setBcc" name="tst_qmailmessage-setBcc"><step>/usr/tests/qmf/tst_qmailmessage setBcc</step></case><case description="libqmf-tests:tst_qmailmessage:recipients" name="tst_qmailmessage-recipients"><step>/usr/tests/qmf/tst_qmailmessage recipients</step></case><case description="libqmf-tests:tst_qmailmessage:hasRecipients" name="tst_qmailmessage-hasRecipients"><step>/usr/tests/qmf/tst_qmailmessage hasRecipients</step></case><case description="libqmf-tests:tst_qmailmessage:replyTo" name="tst_qmailmessage-replyTo"><step>/usr/tests/qmf/tst_qmailmessage replyTo</step></case><case description="libqmf-tests:tst_qmailmessage:setReplyTo" name="tst_qmailmessage-setReplyTo"><step>/usr/tests/qmf/tst_qmailmessage setReplyTo</step></case><case description="libqmf-tests:tst_qmailmessage:inReplyTo" name="tst_qmailmessage-inReplyTo"><step>/usr/tests/qmf/tst_qmailmessage inReplyTo</step></case><case description="libqmf-tests:tst_qmailmessage:setInReplyTo" name="tst_qmailmessage-setInReplyTo"><step>/usr/tests/qmf/tst_qmailmessage setInReplyTo</step></case><case description="libqmf-tests:tst_qmailmessage:serverUid" name="tst_qmailmessage-serverUid"><step>/usr/tests/qmf/tst_qmailmessage serverUid</step></case><case description="libqmf-tests:tst_qmailmessage:setServerUid" name="tst_qmailmessage-setServerUid"><step>/usr/tests/qmf/tst_qmailmessage setServerUid</step></case><case description="libqmf-tests:tst_qmailmessage:multiMultipart" name="tst_qmailmessage-multiMultipart"><step>/usr/tests/qmf/tst_qmailmessage multiMultipart</step></case><case description="libqmf-tests:tst_qmailmessage:copyAndAssign" name="tst_qmailmessage-copyAndAssign"><step>/usr/tests/qmf/tst_qmailmessage copyAndAssign</step></case><environments><scratchbox>true</scratchbox><hardware>true</hardware></environments></set></suite></testdefinition>
\ No newline at end of file
diff --git a/tests/tst_qmailstore/tst_qmailstore.cpp b/tests/tst_qmailstore/tst_qmailstore.cpp
index 0a12c85..20e431b 100644
--- a/tests/tst_qmailstore/tst_qmailstore.cpp
+++ b/tests/tst_qmailstore/tst_qmailstore.cpp
@@ -71,6 +71,7 @@ private slots:
     void addFolder();
     void addMessage();
     void addMessages();
+    void addMessages2();
     void updateAccount();
     void updateFolder();
     void updateMessage();
@@ -491,6 +492,79 @@ void tst_QMailStore::addMessages()
     QCOMPARE(QMailStore::instance()->queryMessages(key, sort, 10, 0), messageIds);
 }
 
+void tst_QMailStore::addMessages2()
+{
+    QMailAccount account;
+    account.setName("Account");
+
+    QCOMPARE(QMailStore::instance()->countAccounts(), 0);
+    QCOMPARE(QMailStore::instance()->lastError(), QMailStore::NoError);
+    QVERIFY(!account.id().isValid());
+    QVERIFY(QMailStore::instance()->addAccount(&account, 0));
+    QCOMPARE(QMailStore::instance()->lastError(), QMailStore::NoError);
+    QVERIFY(account.id().isValid());
+    QCOMPARE(QMailStore::instance()->countAccounts(), 1);
+    QCOMPARE(QMailStore::instance()->lastError(), QMailStore::NoError);
+
+    QMailFolder folder;
+    folder.setPath("Folder");
+    folder.setParentAccountId(account.id());
+
+    QCOMPARE(QMailStore::instance()->countFolders(), 0);
+    QCOMPARE(QMailStore::instance()->lastError(), QMailStore::NoError);
+    QVERIFY(!folder.id().isValid());
+    QVERIFY(QMailStore::instance()->addFolder(&folder));
+    QCOMPARE(QMailStore::instance()->lastError(), QMailStore::NoError);
+    QVERIFY(folder.id().isValid());
+    QCOMPARE(QMailStore::instance()->countFolders(), 1);
+    QCOMPARE(QMailStore::instance()->lastError(), QMailStore::NoError);
+
+    QList<QMailMessage> messages;
+    QList<QMailMessage*> messageAddresses;
+    for (int i = 1; i <= 10; ++i) {
+        QMailMessage message;
+        message.setParentAccountId(account.id());
+        message.setParentFolderId(folder.id());
+        message.setMessageType(QMailMessage::Sms);
+        message.setSubject(QString("Message %1").arg(i));
+        message.setBody(QMailMessageBody::fromData(QString("Hi #%1").arg(i), QMailMessageContentType("text/plain"), QMailMessageBody::SevenBit));
+
+        messages.append(message);
+        messageAddresses.append(&messages.last());
+    }
+
+    // Verify that addition is successful
+    QCOMPARE(QMailStore::instance()->countMessages(), 0);
+    QCOMPARE(QMailStore::instance()->lastError(), QMailStore::NoError);
+    QVERIFY(!messages.first().id().isValid());
+    QVERIFY(!messages.last().id().isValid());
+    QVERIFY(QMailStore::instance()->addMessages(messageAddresses));
+    QCOMPARE(QMailStore::instance()->lastError(), QMailStore::NoError);
+    QVERIFY(messages.first().id().isValid());
+    QVERIFY(messages.last().id().isValid());
+    QCOMPARE(QMailStore::instance()->countMessages(), 10);
+    QCOMPARE(QMailStore::instance()->lastError(), QMailStore::NoError);
+
+    // Verify that retrieval yields matching result
+    for (int i = 1; i <= 10; ++i) {
+        QMailMessage message(messages.at(i - 1).id());
+        QCOMPARE(QMailStore::instance()->lastError(), QMailStore::NoError);
+        QCOMPARE(message.subject(), QString("Message %1").arg(i));
+        QCOMPARE(message.body().data(), QString("Hi #%1").arg(i));
+    }
+
+    // Test basic limit/offset
+    QMailMessageKey key;
+    QMailMessageSortKey sort;
+    QMailMessageIdList messageIds(QMailStore::instance()->queryMessages(key, sort));
+    QCOMPARE(QMailStore::instance()->queryMessages(key, sort, 4, 0), messageIds.mid(0, 4));
+    QCOMPARE(QMailStore::instance()->queryMessages(key, sort, 4, 3), messageIds.mid(3, 4));
+    QCOMPARE(QMailStore::instance()->queryMessages(key, sort, 4, 6), messageIds.mid(6, 4));
+    QCOMPARE(QMailStore::instance()->queryMessages(key, sort, 9, 0), messageIds.mid(0, 9));
+    QCOMPARE(QMailStore::instance()->queryMessages(key, sort, 9, 1), messageIds.mid(1, 9));
+    QCOMPARE(QMailStore::instance()->queryMessages(key, sort, 10, 0), messageIds);
+}
+
 void tst_QMailStore::updateAccount()
 {
     QMailFolder folder("new folder 1");

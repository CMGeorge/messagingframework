/*!

\title Location Services
\page location.html

\tableofcontents


\section1 Introduction

The Qt Extended Whereabouts library provides developers of Location-Based Services with the essential components for distributing, receiving and processing location information. The library can be used to easily query and retrieve location information, and location updates can be received from either built-in or custom-added location data sources. Custom location data sources are added through Qt Extended's plugin mechanisms.

The main classes in the Whereabouts library are QWhereabouts, QWhereaboutsUpdate, QWhereaboutsPlugin and QWhereaboutsFactory:

\list
\o QWhereabouts instances provides location data updates using QWhereaboutsUpdate objects
\o QWhereaboutsPlugin allows the addition of Whereabouts plugins to receive and process data from custom location data sources (such as AGPS sources or GPS devices with proprietary protocols)
\o QWhereaboutsFactory allows such plugins to be loaded.
\endlist

In addition, QNmeaWhereabouts provides functionality for reading location data from NMEA data sources. Developers can use it to read NMEA data sources without the need to write NMEA parsing code in their plugin implementations.


\section1 A simple example

The \l {Whereabouts Simple Demo} demonstrates how to create a QWhereabouts instance and use it to retrieve location updates:

\quotefromfile whereabouts/simpledemo/main.cpp
\skipto class SimpleLocationDemo
\printuntil };

The application simply calls QWhereabouts::startUpdates() to begin to receive regular location updates through the QWhereabouts::updated() signal.

Where does the location data come from? That depends on the QWhereabouts instance returned from QWhereaboutsFactory::create(). In this example, \l {QWhereaboutsFactory::create()}{create()} is called without any arguments, so the returned instance receives location data from the default data source. See below for details on using the default and custom data sources.


\section2 Reading location data from QWhereaboutsUpdate

QWhereaboutsUpdate contains the various types of data that can be retrieved in a location update. At a minimum, an update includes a global coordinate position specified by a QWhereaboutsCoordinate object, and a timestamp specified by QWhereaboutsUpdate::updateDateTime() that indicates when the update was received. The update may also include other information such as altitude, ground speed and bearing. QWhereaboutsUpdate::dataValidityFlags() indicates the types of data contained in a particular update.

Coordinates are expected to be in the WGS84 datum, which is the most commonly used datum for GPS devices and is a standard datum for worldwide use. Also note that location data generally uses metric units; altitude is measured in metres and speed is measured in kilometres/hour.



\section1 Specifying and adding location data sources

The Whereabouts API uses Qt Extended's plugin mechanisms to allow location data to be retrieved from arbitrary sources, such as custom GPS hardware devices, AGPS sources, or previously logged location data. Developers can write plugins that retrieve data from their desired data source and then distribute this data through the Whereabouts API classes.

The desired location data source is specified by the argument to QWhereaboutsFactory::create(). If no argument is provided, the default data source is used. Otherwise, the argument can be set to the class name of the plugin that provides the location data.

As a convenience, the Whereabouts library has a built-in plugin, "gpsd", that retrieves data from \l {http://gpsd.berlios.de}{GPSd} daemons. \l {http://gpsd.berlios.de}{GPSd} is an open-source service daemon that connects to a specified GPS device and distributes the GPS data over a TCP port. The gpsd plugin connects to this daemon and then provides access to the data through the Whereabouts API. Naturally, the system integrator must ensure a GPSd daemon has been started on the defined GPSd port (2947) or else this plugin will not be able to receive any location data.


\section2 The default location data source

A default location data source can be specified through the "Plugins/Default" value in the \c $QPEDIR/etc/Settings/Trolltech/Whereabouts.conf settings file. For most Qt Extended device configurations, the default plugin is set to the built-in plugin, "gpsd". However, if your device has a supported Qt Extended device configuration and also has built-in GPS hardware, this default value may already be set to a plugin that can read from that hardware.

To use the default plugin, call QWhereaboutsFactory::create() without any arguments.


\section2 Adding custom location data sources

Whereabouts plugins can easily be added to retrieve location data from custom sources.

To add a Whereabouts plugin:

\list 1

\o Create a subclass of QWhereabouts that connects to and distributes data from your custom data source. (Or, if the data source provides location data in the form of NMEA sentences, you can use QNmeaWhereabouts instead of writing your own subclass.)

\o Create a subclass of QWhereaboutsPlugin that is declared with the QTOPIA_PLUGIN_EXPORT macro, and when implementing QWhereaboutsPlugin::create(), return an instance of your QWhereaboutsSubclass. Also, export the plugin using the QTOPIA_EXPORT_PLUGIN macro.

\endlist

Once the plugin is installed, you can use it by calling QWhereaboutsFactory::create() with the plugin class name.


\section3 An example

The \l {Whereabouts Sample Plugin} demonstrates the integration of a custom Whereabouts plugin. The \c examples/sampleplugin/locationplugin directory contains the plugin, and \c examples/sampleplugin/mylocationapp contains an application that uses the plugin to retrieve location updates.

First, we create a QWhereabouts subclass called \c LocationProvider:

\quotefromfile whereabouts/sampleplugin/locationplugin/locationplugin.h
\skipto class LocationProvider
\printuntil };


This \c LocationProvider class simply produces updates with the current date/time and latitude-longitude coordinates of (0, 0). It uses QTimer to implement timed updates for QWhereabouts::startUpdates() and QWhereabouts::stopUpdates(). Here is the implementation:

\quotefromfile whereabouts/sampleplugin/locationplugin/locationplugin.cpp
\skipto LocationProvider
\printto stopUpdates()
\printuntil }


Then we create a Whereaboutsplugin called \c LocationPlugin that is able to create and return instances of \c LocationProvider. Here is the class definition:

\quotefromfile whereabouts/sampleplugin/locationplugin/locationplugin.h
\skipto class QTOPIA_PLUGIN_EXPORT LocationPlugin
\printuntil };


In the \c locationplugin.cpp file, we implement \c create() to return an instance of \c LocationProvider, and export the plugin using the QTOPIA_EXPORT_PLUGIN macro:

\quotefromfile whereabouts/sampleplugin/locationplugin/locationplugin.cpp
\skipto LocationPlugin
\printuntil QTOPIA_EXPORT_PLUGIN


Then, once the plugin has been installed with \c {qbuild image}, you can use it by passing the class name to QWhereaboutsFactory::create(). (The class name argument is not case-sensitive.) So in the \c examples/sampleplugin/mylocationapp project, we create a \c MyLocationApp class that uses our custom plugin, like this:

\quotefromfile whereabouts/sampleplugin/mylocationapp/mylocationapp.cpp
\skipto MyLocationApp
\printuntil locationplugin
\skipto connect
\printuntil }
\printuntil }

So \c MyLocationApp now receives updates through the \c LocationProvider we created.

To make this the default plugin to be returned if QWhereaboutsFactory::create() is called without any arguments, set the "Plugins/Default" value in \c $QPEDIR/etc/Settings/Trolltech/Whereabouts.conf to "locationplugin".


\section1 Other examples

The \l {Whereabouts Mapping Demo} uses the Whereabouts API together with Google Maps to either track the user's current location, or provide a simulation of a previous journey using a NMEA data log.

\image location-mappingdemo.png

*/

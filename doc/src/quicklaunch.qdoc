/*!
\page quicklaunch.html
\target top
\title Quicklauncher

\tableofcontents

\section1 Issues affecting application startup times

Early Qtopia versions suffered from slow startup times primarily for the following reasons:
\list
\o loading and linking dynamic libraries
\o constructing QtopiaApplication
\o constructing widgets
\o loading data files
\endlist

The \c quicklauncher functionality aims to eliminate 1, 2, and some of 3. Further information
about speeding up application startup times can be found in \l {Writing Applications that Start Quickly}.

\section1 Quicklauncher Stub Application

To eliminate loading/linking and QtopiaApplication construction, a stub
application (called quicklauncher) will be run in advance of an application being requested.
When the quicklauncher is started, it will perform preloading as described in the
\l{Adjusting Preload Behavior} section.

When quicklauncher is requested to run an application, it will:
\list
 \o drop all current LIDS/SXE credentials
 \o load the application plugin
 \o change identity to that of the requested application. This includes LIDS/SXE credentials,
    process listings and QCop channels
 \o run the application initialization function (which constructs the main widget)
 \o return to the event loop
\endlist

At this point, quicklauncher appears and should behave exactly as if the app had been started
normally.

\section2 SXE Issues

The use of static global initializers in quicklaunch applications should be avoided where possible.
The problem is that these fire before quicklauncher can confirm and switch to the identity of the
application. A typical symptom is SXE errors reported for the quicklauncher process or for an invalid
process.

Static global initalizers can be used as long as they do not cause code that interacts with LIDS/SXE
to be run. It is suggested to limit static global initializers to registration-type functions and to
perform any further actions required once the main widget has been constructed.

\section2 Adjusting Preload Behavior

The preloading done by quicklauncher is a tradeoff between startup time and memory.  Quicklaunched
applications start more quickly, but the running quicklauncher instances consume some memory.

Therefore the desired behavior of quicklauncher depends on the performance characteristics of the
target device.  In Qt Extended 4.5 and later, it is possible to adjust quicklauncher's behavior
accordingly.

The preload behavior can be adjusted by setting the \c{AggressivePreload} value in
\c{Quicklauncher.conf}.
As with all Qt Extended settings files, the defaults are found in:
\code
    /opt/Qtopia/etc/default/Trolltech/Quicklauncher.conf
\endcode
and these are overridden by settings in:
\code
    $HOME/Settings/Trolltech/Quicklauncher.conf
\endcode

The following table describes the meanings of different values of \c{AggressivePreload}.
A higher value means a more aggressive preload strategy.
In general, the more aggressive preload strategy is used, the faster each application will
launch, but more resources will be required by each quicklauncher instance.

\table
\header \o AggressivePreload
        \o Effect
        \o Comments
\row    \o >= 0
        \o \list
            \o link to the most common libraries
            \o construct QtopiaApplication
            \o preload the default font and initialize other data where possible 
            \o execute the event loop and wait for a request to run an application
        \endlist
        \o The only available behavior prior to Qt Extended 4.5.
\row    \o >= 1
        \o \list
            \o preload application plugins, in order of most recently executed application
            \o preloading is interrupted if the quicklauncher is asked to execute
        \endlist
        \o \list
            \o Significant decrease in startup time (as much as %50).
            \o Slight increase in memory usage per quicklauncher instance (~100KB).
            \o Each quicklauncher instance takes several additional seconds to become idle.
            \o Maximum number of preloaded applications can be set by \c{ApplicationPreloadLimit}
               in \c{Quicklauncher.conf}.
            \o May be unsuitable for devices with a very slow filesystem or a low amount of RAM.
        \endlist
\row    \o >= 2
        \o Reserved for future use.
        \o
\endtable

\section1 Launcher integration

The QuickExeApplicationLauncher server task is responsible for ensuring enough instances of quicklauncher
are running.

When a request to launch an application is made:
\list
 \o QuickExeApplicationLauncher checks if it can launch the app
 \o If quicklauncher is running it is sent a message via QCop to become the application
 \o Otherwise the application is started manually (which causes quicklauncher to
    run and then become the application)
 \o If required new quicklauncher processes will be started
\endlist

If the server is running as root, it will set the priority of quicklauncher
to low while it is being started to ensure that it does not
take processor cycles needed by foreground processes.  It will be given
normal priority when a request to load a new application is received.

\section1 Making Applications quicklauncher Enabled

To enable an application for quicklauncher, use the macros described in \l Applications.

\section1 Initial Results

The initial results of the design described above are:

\table
\header \o Application
        \o Qtopia 1.6.0 (sec)
        \o + quicklauncher (sec)
\row \o Calendar
     \o 1.9
     \o 0.8
\row \o Contacts
     \o 2.2
     \o 1.1
\row \o Email
     \o 2.4
     \o 1.2
\row \o Image Viewer
     \o 1.4
     \o 0.9
\row \o Media Player
     \o 2.3
     \o 0.4/1.3*
\row \o Tasks
     \o 2.0
     \o 1.1
\row \o Today
     \o 1.8
     \o 0.8
\row \o Clock
     \o 1.6
     \o 0.6
\endtable

* The Media Player delays its main GUI construction, so the initial window displays in 0.4 seconds and the full GUI is displayed in 1.3 seconds

*/
